{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,function(module,exports,__webpack_require__){\"use strict\";eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(4), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, count, show) {\\n    // require([\\'./move\\']);\\n    $(function () {\\n\\n        function guid() {\\n            return \\'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\\'.replace(/[xy]/g, function (c) {\\n                var r = Math.random() * 16 | 0,\\n                    v = c == \\'x\\' ? r : r & 0x3 | 0x8;\\n                return v.toString(16);\\n            });\\n        }\\n        $(\\'.addlist\\').on(\"click\", function () {\\n            for (var i = 0; i < 1000; i++) {\\n                var content = i;\\n\\n                var old = localStorage.getItem(\"myplan\");\\n                if (!old) {\\n                    var obj = {};\\n                    obj.content = content;\\n                    obj.done = false;\\n                    obj.listatus = false;\\n                    obj.id = guid();\\n                    var str = JSON.stringify(obj);\\n                    localStorage.setItem(\"myplan\", \\'[\\' + str + \\']\\');\\n                } else {\\n                    var obj = JSON.parse(old);\\n                    obj.push({\\n                        \"content\": content,\\n                        \"done\": false,\\n                        \"listatus\": false,\\n                        \"id\": guid()\\n                    });\\n                    var str = JSON.stringify(obj);\\n                    localStorage.setItem(\"myplan\", str);\\n                }\\n            }\\n            show.showplans();\\n            count.count();\\n        });\\n\\n        function safeStr(str) {\\n            return str.replace(/</g, \\'&lt;\\').replace(/>/g, \\'&gt;\\').replace(/\"/g, \"&quot;\").replace(/\\'/g, \"&#039;\");\\n        }\\n        $(\"body\").on(\"keydown\", \"#todoinput\", function (e) {\\n\\n            if (e.keyCode == 13) {\\n                var content = $(\\'#todoinput\\').val();\\n                content = safeStr(content);\\n                if (content.length > 0) {\\n                    var old = localStorage.getItem(\"myplan\");\\n                    if (!old) {\\n                        var obj = {};\\n                        obj.content = content;\\n                        obj.done = false;\\n                        obj.listatus = false;\\n                        obj.id = guid();\\n\\n                        var str = JSON.stringify(obj);\\n                        localStorage.setItem(\"myplan\", \\'[\\' + str + \\']\\');\\n                    } else {\\n                        var obj = JSON.parse(old);\\n                        obj.push({\\n                            \"content\": content,\\n                            \"done\": false,\\n                            \"listatus\": false,\\n                            \"id\": guid()\\n                        });\\n                        var str = JSON.stringify(obj);\\n                        localStorage.setItem(\"myplan\", str);\\n                    }\\n                    show.showplan();\\n                    count.count();\\n                } else {\\n                    alert(\"请输入数据\");\\n                }\\n                $(\\'#todoinput\\').val(\"\");\\n            }\\n        });\\n\\n        $(\\'body\\').on(\\'click\\', \".list ul li\", function () {\\n            var key = $(this).prop(\\'id\\');\\n            var data = localStorage.getItem(\"myplan\");\\n            data = JSON.parse(data);\\n            for (var i = 0; i < data.length; i++) {\\n                if (data[i].id == key) {\\n                    if (data[i].listatus == false) {\\n                        data[i].listatus = true;\\n                        //$(this).prop(\\'class\\', \\'liborder\\');\\n                        $(this).addClass(\\'liborder\\');\\n                    } else {\\n                        data[i].listatus = false;\\n                        //$(this).prop(\\'class\\', \\'liborder2\\');\\n                        $(this).removeClass(\\'liborder\\');\\n                    }\\n                }\\n            }\\n            var str = JSON.stringify(data);\\n            localStorage.setItem(\"myplan\", str);\\n            var data = localStorage.getItem(\"myplan\");\\n            data = JSON.parse(data);\\n        });\\n\\n        $(\\'body\\').on(\\'click\\', \".list ul li input\", function (e) {\\n            e.stopPropagation();\\n        });\\n        // 点击未完成计划列表input\\n        $(\"body .todolist .list #ullist\").on(\"click\", \"li input\", function () {\\n\\n            if ($(this).prop(\"checked\") == true) {\\n                var key = $(this).parent().parent().prop(\"id\");\\n                $(\"#\" + key).fadeOut(function () {\\n                    $(\"#\" + key).remove();\\n                });\\n                var data = localStorage.getItem(\"myplan\");\\n                data = JSON.parse(data);\\n                for (var i = 0; i < data.length; i++) {\\n                    if (data[i].id == key) {\\n                        data[i].done = true;\\n                        var str = JSON.stringify(data);\\n                        localStorage.setItem(\"myplan\", str);\\n                        var data = localStorage.getItem(\"myplan\");\\n                        data = JSON.parse(data);\\n                        console.log(data[i].listatus);\\n                        $(\\'<li id=\\' + data[i].id + \\'><span><span></span><input type=\"checkbox\"  style=\"zoom:200%\" checked=\"checked\"/><span>\\' + data[i].content + \\'</span></span><span class=\"del\">X</span></li>\\').appendTo($(\".todolist .list2>ul\"));\\n                        var datatem = data[i];\\n                        data.splice(i, 1);\\n                        data.push(datatem);\\n                        var str = JSON.stringify(data);\\n                        localStorage.setItem(\"myplan\", str);\\n                        count.count();\\n                        return;\\n                    }\\n                }\\n            }\\n        });\\n        // 点击已完成列表input\\n        $(\"body .todolist .list #donelist\").on(\"click\", \"li input\", function () {\\n            if ($(this).prop(\"checked\") == false) {\\n                var key = $(this).parent().parent().prop(\"id\");\\n                $(\"#\" + key).remove();\\n                var data = localStorage.getItem(\"myplan\");\\n                data = JSON.parse(data);\\n                for (var i = 0; i < data.length; i++) {\\n                    if (data[i].id == key) {\\n                        data[i].done = false;\\n                        var str = JSON.stringify(data);\\n                        localStorage.setItem(\"myplan\", str);\\n                        var data = localStorage.getItem(\"myplan\");\\n                        data = JSON.parse(data);\\n                        $(\\'<li id=\\' + data[i].id + \\'  ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\" ><span><span></span><input type=\"checkbox\" style=\"zoom:200%\" /><span>\\' + data[i].content + \\'</span></span><span class=\"del\">X</span></li>\\').appendTo($(\".todolist .list1>ul\"));\\n                        //$(\"#\" + data[i].id).find(\"*\");\\n                        var datatem = data[i];\\n                        // console.log(datatem)\\n                        data.splice(i, 1);\\n                        data.push(datatem);\\n                        var str = JSON.stringify(data);\\n                        localStorage.setItem(\"myplan\", str);\\n                        count.count();\\n                        return;\\n                    }\\n                }\\n            }\\n        });\\n        // 点击删除按钮\\n        $(\"body\").on(\"click\", \".del\", function () {\\n            var key = $(this).parent().prop(\"id\");\\n            $(\"#\" + key).fadeOut(function () {\\n                $(\"#\" + key).remove();\\n            });\\n            var data = localStorage.getItem(\"myplan\");\\n            data = JSON.parse(data);\\n            var index = 0;\\n            for (var i = 0; i < data.length; i++) {\\n                if (key == data[i].id) {\\n                    index = i;\\n                    data.splice(index, 1);\\n                }\\n            }\\n            var str = JSON.stringify(data);\\n            localStorage.setItem(\"myplan\", str);\\n            count.count();\\n            return false;\\n        });\\n        count.count();\\n        show.showallplan();\\n    });\\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n')},function(module,exports,__webpack_require__){\"use strict\";eval('/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\\n\\n/*!\\r\\n * jQuery JavaScript Library v2.1.1\\r\\n * http://jquery.com/\\r\\n *\\r\\n * Includes Sizzle.js\\r\\n * http://sizzlejs.com/\\r\\n *\\r\\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\\r\\n * Released under the MIT license\\r\\n * http://jquery.org/license\\r\\n *\\r\\n * Date: 2014-05-01T17:11Z\\r\\n */\\n\\n(function (global, factory) {\\n\\n    if (( false ? undefined : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\\n        // For CommonJS and CommonJS-like environments where a proper window is present,\\n        // execute the factory and get jQuery\\n        // For environments that do not inherently posses a window with a document\\n        // (such as Node.js), expose a jQuery-making factory as module.exports\\n        // This accentuates the need for the creation of a real window\\n        // e.g. var jQuery = require(\"jquery\")(window);\\n        // See ticket #14549 for more info\\n        module.exports = global.document ? factory(global, true) : function (w) {\\n            if (!w.document) {\\n                throw new Error(\"jQuery requires a window with a document\");\\n            }\\n            return factory(w);\\n        };\\n    } else {\\n        factory(global);\\n    }\\n\\n    // Pass this if window is not defined yet\\n})(typeof window !== \"undefined\" ? window : undefined, function (window, noGlobal) {\\n\\n    // Can\\'t do this because several apps including ASP.NET trace\\n    // the stack via arguments.caller.callee and Firefox dies if\\n    // you try to trace through \"use strict\" call chains. (#13335)\\n    // Support: Firefox 18+\\n    //\\n\\n    var arr = [];\\n\\n    var _slice = arr.slice;\\n\\n    var concat = arr.concat;\\n\\n    var push = arr.push;\\n\\n    var indexOf = arr.indexOf;\\n\\n    var class2type = {};\\n\\n    var toString = class2type.toString;\\n\\n    var hasOwn = class2type.hasOwnProperty;\\n\\n    var support = {};\\n\\n    var\\n    // Use the correct document accordingly with window argument (sandbox)\\n    document = window.document,\\n        version = \"2.1.1\",\\n\\n\\n    // Define a local copy of jQuery\\n    jQuery = function jQuery(selector, context) {\\n        // The jQuery object is actually just the init constructor \\'enhanced\\'\\n        // Need init if jQuery is called (just allow error to be thrown if not included)\\n        return new jQuery.fn.init(selector, context);\\n    },\\n\\n\\n    // Support: Android<4.1\\n    // Make sure we trim BOM and NBSP\\n    rtrim = /^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g,\\n\\n\\n    // Matches dashed string for camelizing\\n    rmsPrefix = /^-ms-/,\\n        rdashAlpha = /-([\\\\da-z])/gi,\\n\\n\\n    // Used by jQuery.camelCase as callback to replace()\\n    fcamelCase = function fcamelCase(all, letter) {\\n        return letter.toUpperCase();\\n    };\\n\\n    jQuery.fn = jQuery.prototype = {\\n        // The current version of jQuery being used\\n        jquery: version,\\n\\n        constructor: jQuery,\\n\\n        // Start with an empty selector\\n        selector: \"\",\\n\\n        // The default length of a jQuery object is 0\\n        length: 0,\\n\\n        toArray: function toArray() {\\n            return _slice.call(this);\\n        },\\n\\n        // Get the Nth element in the matched element set OR\\n        // Get the whole matched element set as a clean array\\n        get: function get(num) {\\n            return num != null ?\\n\\n            // Return just the one element from the set\\n            num < 0 ? this[num + this.length] : this[num] :\\n\\n            // Return all the elements in a clean array\\n            _slice.call(this);\\n        },\\n\\n        // Take an array of elements and push it onto the stack\\n        // (returning the new matched element set)\\n        pushStack: function pushStack(elems) {\\n\\n            // Build a new jQuery matched element set\\n            var ret = jQuery.merge(this.constructor(), elems);\\n\\n            // Add the old object onto the stack (as a reference)\\n            ret.prevObject = this;\\n            ret.context = this.context;\\n\\n            // Return the newly-formed element set\\n            return ret;\\n        },\\n\\n        // Execute a callback for every element in the matched set.\\n        // (You can seed the arguments with an array of args, but this is\\n        // only used internally.)\\n        each: function each(callback, args) {\\n            return jQuery.each(this, callback, args);\\n        },\\n\\n        map: function map(callback) {\\n            return this.pushStack(jQuery.map(this, function (elem, i) {\\n                return callback.call(elem, i, elem);\\n            }));\\n        },\\n\\n        slice: function slice() {\\n            return this.pushStack(_slice.apply(this, arguments));\\n        },\\n\\n        first: function first() {\\n            return this.eq(0);\\n        },\\n\\n        last: function last() {\\n            return this.eq(-1);\\n        },\\n\\n        eq: function eq(i) {\\n            var len = this.length,\\n                j = +i + (i < 0 ? len : 0);\\n            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\\n        },\\n\\n        end: function end() {\\n            return this.prevObject || this.constructor(null);\\n        },\\n\\n        // For internal use only.\\n        // Behaves like an Array\\'s method, not like a jQuery method.\\n        push: push,\\n        sort: arr.sort,\\n        splice: arr.splice\\n    };\\n\\n    jQuery.extend = jQuery.fn.extend = function () {\\n        var options,\\n            name,\\n            src,\\n            copy,\\n            copyIsArray,\\n            clone,\\n            target = arguments[0] || {},\\n            i = 1,\\n            length = arguments.length,\\n            deep = false;\\n\\n        // Handle a deep copy situation\\n        if (typeof target === \"boolean\") {\\n            deep = target;\\n\\n            // skip the boolean and the target\\n            target = arguments[i] || {};\\n            i++;\\n        }\\n\\n        // Handle case when target is a string or something (possible in deep copy)\\n        if ((typeof target === \"undefined\" ? \"undefined\" : _typeof(target)) !== \"object\" && !jQuery.isFunction(target)) {\\n            target = {};\\n        }\\n\\n        // extend jQuery itself if only one argument is passed\\n        if (i === length) {\\n            target = this;\\n            i--;\\n        }\\n\\n        for (; i < length; i++) {\\n            // Only deal with non-null/undefined values\\n            if ((options = arguments[i]) != null) {\\n                // Extend the base object\\n                for (name in options) {\\n                    src = target[name];\\n                    copy = options[name];\\n\\n                    // Prevent never-ending loop\\n                    if (target === copy) {\\n                        continue;\\n                    }\\n\\n                    // Recurse if we\\'re merging plain objects or arrays\\n                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\\n                        if (copyIsArray) {\\n                            copyIsArray = false;\\n                            clone = src && jQuery.isArray(src) ? src : [];\\n                        } else {\\n                            clone = src && jQuery.isPlainObject(src) ? src : {};\\n                        }\\n\\n                        // Never move original objects, clone them\\n                        target[name] = jQuery.extend(deep, clone, copy);\\n\\n                        // Don\\'t bring in undefined values\\n                    } else if (copy !== undefined) {\\n                        target[name] = copy;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Return the modified object\\n        return target;\\n    };\\n\\n    jQuery.extend({\\n        // Unique for each copy of jQuery on the page\\n        expando: \"jQuery\" + (version + Math.random()).replace(/\\\\D/g, \"\"),\\n\\n        // Assume jQuery is ready without the ready module\\n        isReady: true,\\n\\n        error: function error(msg) {\\n            throw new Error(msg);\\n        },\\n\\n        noop: function noop() {},\\n\\n        // See test/unit/core.js for details concerning isFunction.\\n        // Since version 1.3, DOM methods and functions like alert\\n        // aren\\'t supported. They return false on IE (#2968).\\n        isFunction: function isFunction(obj) {\\n            return jQuery.type(obj) === \"function\";\\n        },\\n\\n        isArray: Array.isArray,\\n\\n        isWindow: function isWindow(obj) {\\n            return obj != null && obj === obj.window;\\n        },\\n\\n        isNumeric: function isNumeric(obj) {\\n            // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\\n            // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\\n            // subtraction forces infinities to NaN\\n            return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;\\n        },\\n\\n        isPlainObject: function isPlainObject(obj) {\\n            // Not plain objects:\\n            // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\\n            // - DOM nodes\\n            // - window\\n            if (jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\\n                return false;\\n            }\\n\\n            if (obj.constructor && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\\n                return false;\\n            }\\n\\n            // If the function hasn\\'t returned already, we\\'re confident that\\n            // |obj| is a plain object, created by {} or constructed with new Object\\n            return true;\\n        },\\n\\n        isEmptyObject: function isEmptyObject(obj) {\\n            var name;\\n            for (name in obj) {\\n                return false;\\n            }\\n            return true;\\n        },\\n\\n        type: function type(obj) {\\n            if (obj == null) {\\n                return obj + \"\";\\n            }\\n            // Support: Android < 4.0, iOS < 6 (functionish RegExp)\\n            return (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\\n        },\\n\\n        // Evaluates a script in a global context\\n        globalEval: function globalEval(code) {\\n            var script,\\n                indirect = eval;\\n\\n            code = jQuery.trim(code);\\n\\n            if (code) {\\n                // If the code includes a valid, prologue position\\n                // strict mode pragma, execute code by injecting a\\n                // script tag into the document.\\n                if (code.indexOf(\"use strict\") === 1) {\\n                    script = document.createElement(\"script\");\\n                    script.text = code;\\n                    document.head.appendChild(script).parentNode.removeChild(script);\\n                } else {\\n                    // Otherwise, avoid the DOM node creation, insertion\\n                    // and removal by using an indirect global eval\\n                    indirect(code);\\n                }\\n            }\\n        },\\n\\n        // Convert dashed to camelCase; used by the css and data modules\\n        // Microsoft forgot to hump their vendor prefix (#9572)\\n        camelCase: function camelCase(string) {\\n            return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\\n        },\\n\\n        nodeName: function nodeName(elem, name) {\\n            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\\n        },\\n\\n        // args is for internal usage only\\n        each: function each(obj, callback, args) {\\n            var value,\\n                i = 0,\\n                length = obj.length,\\n                isArray = isArraylike(obj);\\n\\n            if (args) {\\n                if (isArray) {\\n                    for (; i < length; i++) {\\n                        value = callback.apply(obj[i], args);\\n\\n                        if (value === false) {\\n                            break;\\n                        }\\n                    }\\n                } else {\\n                    for (i in obj) {\\n                        value = callback.apply(obj[i], args);\\n\\n                        if (value === false) {\\n                            break;\\n                        }\\n                    }\\n                }\\n\\n                // A special, fast, case for the most common use of each\\n            } else {\\n                if (isArray) {\\n                    for (; i < length; i++) {\\n                        value = callback.call(obj[i], i, obj[i]);\\n\\n                        if (value === false) {\\n                            break;\\n                        }\\n                    }\\n                } else {\\n                    for (i in obj) {\\n                        value = callback.call(obj[i], i, obj[i]);\\n\\n                        if (value === false) {\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return obj;\\n        },\\n\\n        // Support: Android<4.1\\n        trim: function trim(text) {\\n            return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\\n        },\\n\\n        // results is for internal usage only\\n        makeArray: function makeArray(arr, results) {\\n            var ret = results || [];\\n\\n            if (arr != null) {\\n                if (isArraylike(Object(arr))) {\\n                    jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\\n                } else {\\n                    push.call(ret, arr);\\n                }\\n            }\\n\\n            return ret;\\n        },\\n\\n        inArray: function inArray(elem, arr, i) {\\n            return arr == null ? -1 : indexOf.call(arr, elem, i);\\n        },\\n\\n        merge: function merge(first, second) {\\n            var len = +second.length,\\n                j = 0,\\n                i = first.length;\\n\\n            for (; j < len; j++) {\\n                first[i++] = second[j];\\n            }\\n\\n            first.length = i;\\n\\n            return first;\\n        },\\n\\n        grep: function grep(elems, callback, invert) {\\n            var callbackInverse,\\n                matches = [],\\n                i = 0,\\n                length = elems.length,\\n                callbackExpect = !invert;\\n\\n            // Go through the array, only saving the items\\n            // that pass the validator function\\n            for (; i < length; i++) {\\n                callbackInverse = !callback(elems[i], i);\\n                if (callbackInverse !== callbackExpect) {\\n                    matches.push(elems[i]);\\n                }\\n            }\\n\\n            return matches;\\n        },\\n\\n        // arg is for internal usage only\\n        map: function map(elems, callback, arg) {\\n            var value,\\n                i = 0,\\n                length = elems.length,\\n                isArray = isArraylike(elems),\\n                ret = [];\\n\\n            // Go through the array, translating each of the items to their new values\\n            if (isArray) {\\n                for (; i < length; i++) {\\n                    value = callback(elems[i], i, arg);\\n\\n                    if (value != null) {\\n                        ret.push(value);\\n                    }\\n                }\\n\\n                // Go through every key on the object,\\n            } else {\\n                for (i in elems) {\\n                    value = callback(elems[i], i, arg);\\n\\n                    if (value != null) {\\n                        ret.push(value);\\n                    }\\n                }\\n            }\\n\\n            // Flatten any nested arrays\\n            return concat.apply([], ret);\\n        },\\n\\n        // A global GUID counter for objects\\n        guid: 1,\\n\\n        // Bind a function to a context, optionally partially applying any\\n        // arguments.\\n        proxy: function proxy(fn, context) {\\n            var tmp, args, proxy;\\n\\n            if (typeof context === \"string\") {\\n                tmp = fn[context];\\n                context = fn;\\n                fn = tmp;\\n            }\\n\\n            // Quick check to determine if target is callable, in the spec\\n            // this throws a TypeError, but we will just return undefined.\\n            if (!jQuery.isFunction(fn)) {\\n                return undefined;\\n            }\\n\\n            // Simulated bind\\n            args = _slice.call(arguments, 2);\\n            proxy = function proxy() {\\n                return fn.apply(context || this, args.concat(_slice.call(arguments)));\\n            };\\n\\n            // Set the guid of unique handler to the same of original handler, so it can be removed\\n            proxy.guid = fn.guid = fn.guid || jQuery.guid++;\\n\\n            return proxy;\\n        },\\n\\n        now: Date.now,\\n\\n        // jQuery.support is not used in Core but other projects attach their\\n        // properties to it so it needs to exist.\\n        support: support\\n    });\\n\\n    // Populate the class2type map\\n    jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\\n        class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\\n    });\\n\\n    function isArraylike(obj) {\\n        var length = obj.length,\\n            type = jQuery.type(obj);\\n\\n        if (type === \"function\" || jQuery.isWindow(obj)) {\\n            return false;\\n        }\\n\\n        if (obj.nodeType === 1 && length) {\\n            return true;\\n        }\\n\\n        return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\\n    }\\n    var Sizzle =\\n    /*!\\r\\n     * Sizzle CSS Selector Engine v1.10.19\\r\\n     * http://sizzlejs.com/\\r\\n     *\\r\\n     * Copyright 2013 jQuery Foundation, Inc. and other contributors\\r\\n     * Released under the MIT license\\r\\n     * http://jquery.org/license\\r\\n     *\\r\\n     * Date: 2014-04-18\\r\\n     */\\n    function (window) {\\n\\n        var i,\\n            support,\\n            Expr,\\n            getText,\\n            isXML,\\n            tokenize,\\n            compile,\\n            select,\\n            outermostContext,\\n            sortInput,\\n            hasDuplicate,\\n\\n\\n        // Local document vars\\n        setDocument,\\n            document,\\n            docElem,\\n            documentIsHTML,\\n            rbuggyQSA,\\n            rbuggyMatches,\\n            matches,\\n            contains,\\n\\n\\n        // Instance-specific data\\n        expando = \"sizzle\" + -new Date(),\\n            preferredDoc = window.document,\\n            dirruns = 0,\\n            done = 0,\\n            classCache = createCache(),\\n            tokenCache = createCache(),\\n            compilerCache = createCache(),\\n            sortOrder = function sortOrder(a, b) {\\n            if (a === b) {\\n                hasDuplicate = true;\\n            }\\n            return 0;\\n        },\\n\\n\\n        // General-purpose constants\\n        strundefined =  true ? \"undefined\" : undefined,\\n            MAX_NEGATIVE = 1 << 31,\\n\\n\\n        // Instance methods\\n        hasOwn = {}.hasOwnProperty,\\n            arr = [],\\n            pop = arr.pop,\\n            push_native = arr.push,\\n            push = arr.push,\\n            slice = arr.slice,\\n\\n        // Use a stripped-down indexOf if we can\\'t use a native one\\n        indexOf = arr.indexOf || function (elem) {\\n            var i = 0,\\n                len = this.length;\\n            for (; i < len; i++) {\\n                if (this[i] === elem) {\\n                    return i;\\n                }\\n            }\\n            return -1;\\n        },\\n            booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\\n\\n\\n        // Regular expressions\\n\\n        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\\n        whitespace = \"[\\\\\\\\x20\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\f]\",\\n\\n        // http://www.w3.org/TR/css3-syntax/#characters\\n        characterEncoding = \"(?:\\\\\\\\\\\\\\\\.|[\\\\\\\\w-]|[^\\\\\\\\x00-\\\\\\\\xa0])+\",\\n\\n\\n        // Loosely modeled on CSS identifier characters\\n        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\\n        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\\n        identifier = characterEncoding.replace(\"w\", \"w#\"),\\n\\n\\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\\n        attributes = \"\\\\\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace +\\n        // Operator (capture 2)\\n        \"*([*^$|!~]?=)\" + whitespace +\\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\\n        \"*(?:\\'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\'])*)\\'|\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\\\\\]\",\\n            pseudos = \":(\" + characterEncoding + \")(?:\\\\\\\\((\" +\\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\\n        // 1. quoted (capture 3; capture 4 or capture 5)\\n        \"(\\'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\'])*)\\'|\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\")|\" +\\n        // 2. simple (capture 6)\\n        \"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()[\\\\\\\\]]|\" + attributes + \")*)|\" +\\n        // 3. anything else (capture 2)\\n        \".*\" + \")\\\\\\\\)|)\",\\n\\n\\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\\n        rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\\\\\\\\\])(?:\\\\\\\\\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\\n            rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\\n            rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\\n            rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\\\\\]\\'\\\\\"]*?)\" + whitespace + \"*\\\\\\\\]\", \"g\"),\\n            rpseudo = new RegExp(pseudos),\\n            ridentifier = new RegExp(\"^\" + identifier + \"$\"),\\n            matchExpr = {\\n            \"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\\n            \"CLASS\": new RegExp(\"^\\\\\\\\.(\" + characterEncoding + \")\"),\\n            \"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\\n            \"ATTR\": new RegExp(\"^\" + attributes),\\n            \"PSEUDO\": new RegExp(\"^\" + pseudos),\\n            \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\\\\\d+)|))\" + whitespace + \"*\\\\\\\\)|)\", \"i\"),\\n            \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\\n            // For use in libraries implementing .is()\\n            // We use this for POS matching in `select`\\n            \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\\\\\(\" + whitespace + \"*((?:-\\\\\\\\d)?\\\\\\\\d*)\" + whitespace + \"*\\\\\\\\)|)(?=[^-]|$)\", \"i\")\\n        },\\n            rinputs = /^(?:input|select|textarea|button)$/i,\\n            rheader = /^h\\\\d$/i,\\n            rnative = /^[^{]+\\\\{\\\\s*\\\\[native \\\\w/,\\n\\n\\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\\n        rquickExpr = /^(?:#([\\\\w-]+)|(\\\\w+)|\\\\.([\\\\w-]+))$/,\\n            rsibling = /[+~]/,\\n            rescape = /\\'|\\\\\\\\/g,\\n\\n\\n        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\\n        runescape = new RegExp(\"\\\\\\\\\\\\\\\\([\\\\\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\\n            funescape = function funescape(_, escaped, escapedWhitespace) {\\n            var high = \"0x\" + escaped - 0x10000;\\n            // NaN means non-codepoint\\n            // Support: Firefox<24\\n            // Workaround erroneous numeric interpretation of +\"0x\"\\n            return high !== high || escapedWhitespace ? escaped : high < 0 ?\\n            // BMP codepoint\\n            String.fromCharCode(high + 0x10000) :\\n            // Supplemental Plane codepoint (surrogate pair)\\n            String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\\n        };\\n\\n        // Optimize for push.apply( _, NodeList )\\n        try {\\n            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\\n            // Support: Android<4.0\\n            // Detect silently failing push.apply\\n            arr[preferredDoc.childNodes.length].nodeType;\\n        } catch (e) {\\n            push = {\\n                apply: arr.length ?\\n\\n                // Leverage slice if possible\\n                function (target, els) {\\n                    push_native.apply(target, slice.call(els));\\n                } :\\n\\n                // Support: IE<9\\n                // Otherwise append directly\\n                function (target, els) {\\n                    var j = target.length,\\n                        i = 0;\\n                    // Can\\'t trust NodeList.length\\n                    while (target[j++] = els[i++]) {}\\n                    target.length = j - 1;\\n                }\\n            };\\n        }\\n\\n        function Sizzle(selector, context, results, seed) {\\n            var match, elem, m, nodeType,\\n            // QSA vars\\n            i, groups, old, nid, newContext, newSelector;\\n\\n            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\\n                setDocument(context);\\n            }\\n\\n            context = context || document;\\n            results = results || [];\\n\\n            if (!selector || typeof selector !== \"string\") {\\n                return results;\\n            }\\n\\n            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {\\n                return [];\\n            }\\n\\n            if (documentIsHTML && !seed) {\\n\\n                // Shortcuts\\n                if (match = rquickExpr.exec(selector)) {\\n                    // Speed-up: Sizzle(\"#ID\")\\n                    if (m = match[1]) {\\n                        if (nodeType === 9) {\\n                            elem = context.getElementById(m);\\n                            // Check parentNode to catch when Blackberry 4.6 returns\\n                            // nodes that are no longer in the document (jQuery #6963)\\n                            if (elem && elem.parentNode) {\\n                                // Handle the case where IE, Opera, and Webkit return items\\n                                // by name instead of ID\\n                                if (elem.id === m) {\\n                                    results.push(elem);\\n                                    return results;\\n                                }\\n                            } else {\\n                                return results;\\n                            }\\n                        } else {\\n                            // Context is not a document\\n                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\\n                                results.push(elem);\\n                                return results;\\n                            }\\n                        }\\n\\n                        // Speed-up: Sizzle(\"TAG\")\\n                    } else if (match[2]) {\\n                        push.apply(results, context.getElementsByTagName(selector));\\n                        return results;\\n\\n                        // Speed-up: Sizzle(\".CLASS\")\\n                    } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\\n                        push.apply(results, context.getElementsByClassName(m));\\n                        return results;\\n                    }\\n                }\\n\\n                // QSA path\\n                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\\n                    nid = old = expando;\\n                    newContext = context;\\n                    newSelector = nodeType === 9 && selector;\\n\\n                    // qSA works strangely on Element-rooted queries\\n                    // We can work around this by specifying an extra ID on the root\\n                    // and working up from there (Thanks to Andrew Dupont for the technique)\\n                    // IE 8 doesn\\'t work on object elements\\n                    if (nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\\n                        groups = tokenize(selector);\\n\\n                        if (old = context.getAttribute(\"id\")) {\\n                            nid = old.replace(rescape, \"\\\\\\\\$&\");\\n                        } else {\\n                            context.setAttribute(\"id\", nid);\\n                        }\\n                        nid = \"[id=\\'\" + nid + \"\\'] \";\\n\\n                        i = groups.length;\\n                        while (i--) {\\n                            groups[i] = nid + toSelector(groups[i]);\\n                        }\\n                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\\n                        newSelector = groups.join(\",\");\\n                    }\\n\\n                    if (newSelector) {\\n                        try {\\n                            push.apply(results, newContext.querySelectorAll(newSelector));\\n                            return results;\\n                        } catch (qsaError) {} finally {\\n                            if (!old) {\\n                                context.removeAttribute(\"id\");\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // All others\\n            return select(selector.replace(rtrim, \"$1\"), context, results, seed);\\n        }\\n\\n        /**\\r\\n         * Create key-value caches of limited size\\r\\n         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\\r\\n         *\\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\\r\\n         *\\tdeleting the oldest entry\\r\\n         */\\n        function createCache() {\\n            var keys = [];\\n\\n            function cache(key, value) {\\n                // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\\n                if (keys.push(key + \" \") > Expr.cacheLength) {\\n                    // Only keep the most recent entries\\n                    delete cache[keys.shift()];\\n                }\\n                return cache[key + \" \"] = value;\\n            }\\n            return cache;\\n        }\\n\\n        /**\\r\\n         * Mark a function for special use by Sizzle\\r\\n         * @param {Function} fn The function to mark\\r\\n         */\\n        function markFunction(fn) {\\n            fn[expando] = true;\\n            return fn;\\n        }\\n\\n        /**\\r\\n         * Support testing using an element\\r\\n         * @param {Function} fn Passed the created div and expects a boolean result\\r\\n         */\\n        function assert(fn) {\\n            var div = document.createElement(\"div\");\\n\\n            try {\\n                return !!fn(div);\\n            } catch (e) {\\n                return false;\\n            } finally {\\n                // Remove from its parent by default\\n                if (div.parentNode) {\\n                    div.parentNode.removeChild(div);\\n                }\\n                // release memory in IE\\n                div = null;\\n            }\\n        }\\n\\n        /**\\r\\n         * Adds the same handler for all of the specified attrs\\r\\n         * @param {String} attrs Pipe-separated list of attributes\\r\\n         * @param {Function} handler The method that will be applied\\r\\n         */\\n        function addHandle(attrs, handler) {\\n            var arr = attrs.split(\"|\"),\\n                i = attrs.length;\\n\\n            while (i--) {\\n                Expr.attrHandle[arr[i]] = handler;\\n            }\\n        }\\n\\n        /**\\r\\n         * Checks document order of two siblings\\r\\n         * @param {Element} a\\r\\n         * @param {Element} b\\r\\n         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\\r\\n         */\\n        function siblingCheck(a, b) {\\n            var cur = b && a,\\n                diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);\\n\\n            // Use IE sourceIndex if available on both nodes\\n            if (diff) {\\n                return diff;\\n            }\\n\\n            // Check if b follows a\\n            if (cur) {\\n                while (cur = cur.nextSibling) {\\n                    if (cur === b) {\\n                        return -1;\\n                    }\\n                }\\n            }\\n\\n            return a ? 1 : -1;\\n        }\\n\\n        /**\\r\\n         * Returns a function to use in pseudos for input types\\r\\n         * @param {String} type\\r\\n         */\\n        function createInputPseudo(type) {\\n            return function (elem) {\\n                var name = elem.nodeName.toLowerCase();\\n                return name === \"input\" && elem.type === type;\\n            };\\n        }\\n\\n        /**\\r\\n         * Returns a function to use in pseudos for buttons\\r\\n         * @param {String} type\\r\\n         */\\n        function createButtonPseudo(type) {\\n            return function (elem) {\\n                var name = elem.nodeName.toLowerCase();\\n                return (name === \"input\" || name === \"button\") && elem.type === type;\\n            };\\n        }\\n\\n        /**\\r\\n         * Returns a function to use in pseudos for positionals\\r\\n         * @param {Function} fn\\r\\n         */\\n        function createPositionalPseudo(fn) {\\n            return markFunction(function (argument) {\\n                argument = +argument;\\n                return markFunction(function (seed, matches) {\\n                    var j,\\n                        matchIndexes = fn([], seed.length, argument),\\n                        i = matchIndexes.length;\\n\\n                    // Match elements found at the specified indexes\\n                    while (i--) {\\n                        if (seed[j = matchIndexes[i]]) {\\n                            seed[j] = !(matches[j] = seed[j]);\\n                        }\\n                    }\\n                });\\n            });\\n        }\\n\\n        /**\\r\\n         * Checks a node for validity as a Sizzle context\\r\\n         * @param {Element|Object=} context\\r\\n         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\\r\\n         */\\n        function testContext(context) {\\n            return context && _typeof(context.getElementsByTagName) !== strundefined && context;\\n        }\\n\\n        // Expose support vars for convenience\\n        support = Sizzle.support = {};\\n\\n        /**\\r\\n         * Detects XML nodes\\r\\n         * @param {Element|Object} elem An element or a document\\r\\n         * @returns {Boolean} True iff elem is a non-HTML XML node\\r\\n         */\\n        isXML = Sizzle.isXML = function (elem) {\\n            // documentElement is verified for cases where it doesn\\'t yet exist\\n            // (such as loading iframes in IE - #4833)\\n            var documentElement = elem && (elem.ownerDocument || elem).documentElement;\\n            return documentElement ? documentElement.nodeName !== \"HTML\" : false;\\n        };\\n\\n        /**\\r\\n         * Sets document-related variables once based on the current document\\r\\n         * @param {Element|Object} [doc] An element or document object to use to set the document\\r\\n         * @returns {Object} Returns the current document\\r\\n         */\\n        setDocument = Sizzle.setDocument = function (node) {\\n            var hasCompare,\\n                doc = node ? node.ownerDocument || node : preferredDoc,\\n                parent = doc.defaultView;\\n\\n            // If no document and documentElement is available, return\\n            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\\n                return document;\\n            }\\n\\n            // Set our document\\n            document = doc;\\n            docElem = doc.documentElement;\\n\\n            // Support tests\\n            documentIsHTML = !isXML(doc);\\n\\n            // Support: IE>8\\n            // If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\\n            // IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\\n            // IE6-8 do not support the defaultView property so parent will be undefined\\n            if (parent && parent !== parent.top) {\\n                // IE11 does not have attachEvent, so all must suffer\\n                if (parent.addEventListener) {\\n                    parent.addEventListener(\"unload\", function () {\\n                        setDocument();\\n                    }, false);\\n                } else if (parent.attachEvent) {\\n                    parent.attachEvent(\"onunload\", function () {\\n                        setDocument();\\n                    });\\n                }\\n            }\\n\\n            /* Attributes\\r\\n            ---------------------------------------------------------------------- */\\n\\n            // Support: IE<8\\n            // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)\\n            support.attributes = assert(function (div) {\\n                div.className = \"i\";\\n                return !div.getAttribute(\"className\");\\n            });\\n\\n            /* getElement(s)By*\\r\\n            ---------------------------------------------------------------------- */\\n\\n            // Check if getElementsByTagName(\"*\") returns only elements\\n            support.getElementsByTagName = assert(function (div) {\\n                div.appendChild(doc.createComment(\"\"));\\n                return !div.getElementsByTagName(\"*\").length;\\n            });\\n\\n            // Check if getElementsByClassName can be trusted\\n            support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function (div) {\\n                div.innerHTML = \"<div class=\\'a\\'></div><div class=\\'a i\\'></div>\";\\n\\n                // Support: Safari<4\\n                // Catch class over-caching\\n                div.firstChild.className = \"i\";\\n                // Support: Opera<10\\n                // Catch gEBCN failure to find non-leading classes\\n                return div.getElementsByClassName(\"i\").length === 2;\\n            });\\n\\n            // Support: IE<10\\n            // Check if getElementById returns elements by name\\n            // The broken getElementById methods don\\'t pick up programatically-set names,\\n            // so use a roundabout getElementsByName test\\n            support.getById = assert(function (div) {\\n                docElem.appendChild(div).id = expando;\\n                return !doc.getElementsByName || !doc.getElementsByName(expando).length;\\n            });\\n\\n            // ID find and filter\\n            if (support.getById) {\\n                Expr.find[\"ID\"] = function (id, context) {\\n                    if (_typeof(context.getElementById) !== strundefined && documentIsHTML) {\\n                        var m = context.getElementById(id);\\n                        // Check parentNode to catch when Blackberry 4.6 returns\\n                        // nodes that are no longer in the document #6963\\n                        return m && m.parentNode ? [m] : [];\\n                    }\\n                };\\n                Expr.filter[\"ID\"] = function (id) {\\n                    var attrId = id.replace(runescape, funescape);\\n                    return function (elem) {\\n                        return elem.getAttribute(\"id\") === attrId;\\n                    };\\n                };\\n            } else {\\n                // Support: IE6/7\\n                // getElementById is not reliable as a find shortcut\\n                delete Expr.find[\"ID\"];\\n\\n                Expr.filter[\"ID\"] = function (id) {\\n                    var attrId = id.replace(runescape, funescape);\\n                    return function (elem) {\\n                        var node = _typeof(elem.getAttributeNode) !== strundefined && elem.getAttributeNode(\"id\");\\n                        return node && node.value === attrId;\\n                    };\\n                };\\n            }\\n\\n            // Tag\\n            Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\\n                if (_typeof(context.getElementsByTagName) !== strundefined) {\\n                    return context.getElementsByTagName(tag);\\n                }\\n            } : function (tag, context) {\\n                var elem,\\n                    tmp = [],\\n                    i = 0,\\n                    results = context.getElementsByTagName(tag);\\n\\n                // Filter out possible comments\\n                if (tag === \"*\") {\\n                    while (elem = results[i++]) {\\n                        if (elem.nodeType === 1) {\\n                            tmp.push(elem);\\n                        }\\n                    }\\n\\n                    return tmp;\\n                }\\n                return results;\\n            };\\n\\n            // Class\\n            Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\\n                if (_typeof(context.getElementsByClassName) !== strundefined && documentIsHTML) {\\n                    return context.getElementsByClassName(className);\\n                }\\n            };\\n\\n            /* QSA/matchesSelector\\r\\n            ---------------------------------------------------------------------- */\\n\\n            // QSA and matchesSelector support\\n\\n            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\\n            rbuggyMatches = [];\\n\\n            // qSa(:focus) reports false when true (Chrome 21)\\n            // We allow this because of a bug in IE8/9 that throws an error\\n            // whenever `document.activeElement` is accessed on an iframe\\n            // So, we allow :focus to pass through QSA all the time to avoid the IE error\\n            // See http://bugs.jquery.com/ticket/13378\\n            rbuggyQSA = [];\\n\\n            if (support.qsa = rnative.test(doc.querySelectorAll)) {\\n                // Build QSA regex\\n                // Regex strategy adopted from Diego Perini\\n                assert(function (div) {\\n                    // Select is set to empty string on purpose\\n                    // This is to test IE\\'s treatment of not explicitly\\n                    // setting a boolean content attribute,\\n                    // since its presence should be enough\\n                    // http://bugs.jquery.com/ticket/12359\\n                    div.innerHTML = \"<select msallowclip=\\'\\'><option selected=\\'\\'></option></select>\";\\n\\n                    // Support: IE8, Opera 11-12.16\\n                    // Nothing should be selected when empty strings follow ^= or $= or *=\\n                    // The test attribute must be unknown in Opera but \"safe\" for WinRT\\n                    // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\\n                    if (div.querySelectorAll(\"[msallowclip^=\\'\\']\").length) {\\n                        rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:\\'\\'|\\\\\"\\\\\")\");\\n                    }\\n\\n                    // Support: IE8\\n                    // Boolean attributes and \"value\" are not treated correctly\\n                    if (!div.querySelectorAll(\"[selected]\").length) {\\n                        rbuggyQSA.push(\"\\\\\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\\n                    }\\n\\n                    // Webkit/Opera - :checked should return selected option elements\\n                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n                    // IE8 throws error here and will not see later tests\\n                    if (!div.querySelectorAll(\":checked\").length) {\\n                        rbuggyQSA.push(\":checked\");\\n                    }\\n                });\\n\\n                assert(function (div) {\\n                    // Support: Windows 8 Native Apps\\n                    // The type and name attributes are restricted during .innerHTML assignment\\n                    var input = doc.createElement(\"input\");\\n                    input.setAttribute(\"type\", \"hidden\");\\n                    div.appendChild(input).setAttribute(\"name\", \"D\");\\n\\n                    // Support: IE8\\n                    // Enforce case-sensitivity of name attribute\\n                    if (div.querySelectorAll(\"[name=d]\").length) {\\n                        rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\\n                    }\\n\\n                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\\n                    // IE8 throws error here and will not see later tests\\n                    if (!div.querySelectorAll(\":enabled\").length) {\\n                        rbuggyQSA.push(\":enabled\", \":disabled\");\\n                    }\\n\\n                    // Opera 10-11 does not throw on post-comma invalid pseudos\\n                    div.querySelectorAll(\"*,:x\");\\n                    rbuggyQSA.push(\",.*:\");\\n                });\\n            }\\n\\n            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\\n\\n                assert(function (div) {\\n                    // Check to see if it\\'s possible to do matchesSelector\\n                    // on a disconnected node (IE 9)\\n                    support.disconnectedMatch = matches.call(div, \"div\");\\n\\n                    // This should fail with an exception\\n                    // Gecko does not error, returns false instead\\n                    matches.call(div, \"[s!=\\'\\']:x\");\\n                    rbuggyMatches.push(\"!=\", pseudos);\\n                });\\n            }\\n\\n            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\\n            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\\n\\n            /* Contains\\r\\n            ---------------------------------------------------------------------- */\\n            hasCompare = rnative.test(docElem.compareDocumentPosition);\\n\\n            // Element contains another\\n            // Purposefully does not implement inclusive descendent\\n            // As in, an element does not contain itself\\n            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\\n                var adown = a.nodeType === 9 ? a.documentElement : a,\\n                    bup = b && b.parentNode;\\n                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\\n            } : function (a, b) {\\n                if (b) {\\n                    while (b = b.parentNode) {\\n                        if (b === a) {\\n                            return true;\\n                        }\\n                    }\\n                }\\n                return false;\\n            };\\n\\n            /* Sorting\\r\\n            ---------------------------------------------------------------------- */\\n\\n            // Document order sorting\\n            sortOrder = hasCompare ? function (a, b) {\\n\\n                // Flag for duplicate removal\\n                if (a === b) {\\n                    hasDuplicate = true;\\n                    return 0;\\n                }\\n\\n                // Sort on method existence if only one input has compareDocumentPosition\\n                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\\n                if (compare) {\\n                    return compare;\\n                }\\n\\n                // Calculate position if both inputs belong to the same document\\n                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\\n\\n                // Otherwise we know they are disconnected\\n                1;\\n\\n                // Disconnected nodes\\n                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\\n\\n                    // Choose the first element that is related to our preferred document\\n                    if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\\n                        return -1;\\n                    }\\n                    if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\\n                        return 1;\\n                    }\\n\\n                    // Maintain original order\\n                    return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;\\n                }\\n\\n                return compare & 4 ? -1 : 1;\\n            } : function (a, b) {\\n                // Exit early if the nodes are identical\\n                if (a === b) {\\n                    hasDuplicate = true;\\n                    return 0;\\n                }\\n\\n                var cur,\\n                    i = 0,\\n                    aup = a.parentNode,\\n                    bup = b.parentNode,\\n                    ap = [a],\\n                    bp = [b];\\n\\n                // Parentless nodes are either documents or disconnected\\n                if (!aup || !bup) {\\n                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;\\n\\n                    // If the nodes are siblings, we can do a quick check\\n                } else if (aup === bup) {\\n                    return siblingCheck(a, b);\\n                }\\n\\n                // Otherwise we need full lists of their ancestors for comparison\\n                cur = a;\\n                while (cur = cur.parentNode) {\\n                    ap.unshift(cur);\\n                }\\n                cur = b;\\n                while (cur = cur.parentNode) {\\n                    bp.unshift(cur);\\n                }\\n\\n                // Walk down the tree looking for a discrepancy\\n                while (ap[i] === bp[i]) {\\n                    i++;\\n                }\\n\\n                return i ?\\n                // Do a sibling check if the nodes have a common ancestor\\n                siblingCheck(ap[i], bp[i]) :\\n\\n                // Otherwise nodes in our document sort first\\n                ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\\n            };\\n\\n            return doc;\\n        };\\n\\n        Sizzle.matches = function (expr, elements) {\\n            return Sizzle(expr, null, null, elements);\\n        };\\n\\n        Sizzle.matchesSelector = function (elem, expr) {\\n            // Set document vars if needed\\n            if ((elem.ownerDocument || elem) !== document) {\\n                setDocument(elem);\\n            }\\n\\n            // Make sure that attribute selectors are quoted\\n            expr = expr.replace(rattributeQuotes, \"=\\'$1\\']\");\\n\\n            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\\n\\n                try {\\n                    var ret = matches.call(elem, expr);\\n\\n                    // IE 9\\'s matchesSelector returns false on disconnected nodes\\n                    if (ret || support.disconnectedMatch ||\\n                    // As well, disconnected nodes are said to be in a document\\n                    // fragment in IE 9\\n                    elem.document && elem.document.nodeType !== 11) {\\n                        return ret;\\n                    }\\n                } catch (e) {}\\n            }\\n\\n            return Sizzle(expr, document, null, [elem]).length > 0;\\n        };\\n\\n        Sizzle.contains = function (context, elem) {\\n            // Set document vars if needed\\n            if ((context.ownerDocument || context) !== document) {\\n                setDocument(context);\\n            }\\n            return contains(context, elem);\\n        };\\n\\n        Sizzle.attr = function (elem, name) {\\n            // Set document vars if needed\\n            if ((elem.ownerDocument || elem) !== document) {\\n                setDocument(elem);\\n            }\\n\\n            var fn = Expr.attrHandle[name.toLowerCase()],\\n\\n            // Don\\'t get fooled by Object.prototype properties (jQuery #13807)\\n            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\\n\\n            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\\n        };\\n\\n        Sizzle.error = function (msg) {\\n            throw new Error(\"Syntax error, unrecognized expression: \" + msg);\\n        };\\n\\n        /**\\r\\n         * Document sorting and removing duplicates\\r\\n         * @param {ArrayLike} results\\r\\n         */\\n        Sizzle.uniqueSort = function (results) {\\n            var elem,\\n                duplicates = [],\\n                j = 0,\\n                i = 0;\\n\\n            // Unless we *know* we can detect duplicates, assume their presence\\n            hasDuplicate = !support.detectDuplicates;\\n            sortInput = !support.sortStable && results.slice(0);\\n            results.sort(sortOrder);\\n\\n            if (hasDuplicate) {\\n                while (elem = results[i++]) {\\n                    if (elem === results[i]) {\\n                        j = duplicates.push(i);\\n                    }\\n                }\\n                while (j--) {\\n                    results.splice(duplicates[j], 1);\\n                }\\n            }\\n\\n            // Clear input after sorting to release objects\\n            // See https://github.com/jquery/sizzle/pull/225\\n            sortInput = null;\\n\\n            return results;\\n        };\\n\\n        /**\\r\\n         * Utility function for retrieving the text value of an array of DOM nodes\\r\\n         * @param {Array|Element} elem\\r\\n         */\\n        getText = Sizzle.getText = function (elem) {\\n            var node,\\n                ret = \"\",\\n                i = 0,\\n                nodeType = elem.nodeType;\\n\\n            if (!nodeType) {\\n                // If no nodeType, this is expected to be an array\\n                while (node = elem[i++]) {\\n                    // Do not traverse comment nodes\\n                    ret += getText(node);\\n                }\\n            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\\n                // Use textContent for elements\\n                // innerText usage removed for consistency of new lines (jQuery #11153)\\n                if (typeof elem.textContent === \"string\") {\\n                    return elem.textContent;\\n                } else {\\n                    // Traverse its children\\n                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\\n                        ret += getText(elem);\\n                    }\\n                }\\n            } else if (nodeType === 3 || nodeType === 4) {\\n                return elem.nodeValue;\\n            }\\n            // Do not include comment or processing instruction nodes\\n\\n            return ret;\\n        };\\n\\n        Expr = Sizzle.selectors = {\\n\\n            // Can be adjusted by the user\\n            cacheLength: 50,\\n\\n            createPseudo: markFunction,\\n\\n            match: matchExpr,\\n\\n            attrHandle: {},\\n\\n            find: {},\\n\\n            relative: {\\n                \">\": { dir: \"parentNode\", first: true },\\n                \" \": { dir: \"parentNode\" },\\n                \"+\": { dir: \"previousSibling\", first: true },\\n                \"~\": { dir: \"previousSibling\" }\\n            },\\n\\n            preFilter: {\\n                \"ATTR\": function ATTR(match) {\\n                    match[1] = match[1].replace(runescape, funescape);\\n\\n                    // Move the given value to match[3] whether quoted or unquoted\\n                    match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\\n\\n                    if (match[2] === \"~=\") {\\n                        match[3] = \" \" + match[3] + \" \";\\n                    }\\n\\n                    return match.slice(0, 4);\\n                },\\n\\n                \"CHILD\": function CHILD(match) {\\n                    /* matches from matchExpr[\"CHILD\"]\\r\\n                    \\t1 type (only|nth|...)\\r\\n                    \\t2 what (child|of-type)\\r\\n                    \\t3 argument (even|odd|\\\\d*|\\\\d*n([+-]\\\\d+)?|...)\\r\\n                    \\t4 xn-component of xn+y argument ([+-]?\\\\d*n|)\\r\\n                    \\t5 sign of xn-component\\r\\n                    \\t6 x of xn-component\\r\\n                    \\t7 sign of y-component\\r\\n                    \\t8 y of y-component\\r\\n                    */\\n                    match[1] = match[1].toLowerCase();\\n\\n                    if (match[1].slice(0, 3) === \"nth\") {\\n                        // nth-* requires argument\\n                        if (!match[3]) {\\n                            Sizzle.error(match[0]);\\n                        }\\n\\n                        // numeric x and y parameters for Expr.filter.CHILD\\n                        // remember that false/true cast respectively to 0/1\\n                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\\n                        match[5] = +(match[7] + match[8] || match[3] === \"odd\");\\n\\n                        // other types prohibit arguments\\n                    } else if (match[3]) {\\n                        Sizzle.error(match[0]);\\n                    }\\n\\n                    return match;\\n                },\\n\\n                \"PSEUDO\": function PSEUDO(match) {\\n                    var excess,\\n                        unquoted = !match[6] && match[2];\\n\\n                    if (matchExpr[\"CHILD\"].test(match[0])) {\\n                        return null;\\n                    }\\n\\n                    // Accept quoted arguments as-is\\n                    if (match[3]) {\\n                        match[2] = match[4] || match[5] || \"\";\\n\\n                        // Strip excess characters from unquoted arguments\\n                    } else if (unquoted && rpseudo.test(unquoted) && (\\n                    // Get excess from tokenize (recursively)\\n                    excess = tokenize(unquoted, true)) && (\\n                    // advance to the next closing parenthesis\\n                    excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\\n\\n                        // excess is a negative index\\n                        match[0] = match[0].slice(0, excess);\\n                        match[2] = unquoted.slice(0, excess);\\n                    }\\n\\n                    // Return only captures needed by the pseudo filter method (type and argument)\\n                    return match.slice(0, 3);\\n                }\\n            },\\n\\n            filter: {\\n\\n                \"TAG\": function TAG(nodeNameSelector) {\\n                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\\n                    return nodeNameSelector === \"*\" ? function () {\\n                        return true;\\n                    } : function (elem) {\\n                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\\n                    };\\n                },\\n\\n                \"CLASS\": function CLASS(className) {\\n                    var pattern = classCache[className + \" \"];\\n\\n                    return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\\n                        return pattern.test(typeof elem.className === \"string\" && elem.className || _typeof(elem.getAttribute) !== strundefined && elem.getAttribute(\"class\") || \"\");\\n                    });\\n                },\\n\\n                \"ATTR\": function ATTR(name, operator, check) {\\n                    return function (elem) {\\n                        var result = Sizzle.attr(elem, name);\\n\\n                        if (result == null) {\\n                            return operator === \"!=\";\\n                        }\\n                        if (!operator) {\\n                            return true;\\n                        }\\n\\n                        result += \"\";\\n\\n                        return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\\n                    };\\n                },\\n\\n                \"CHILD\": function CHILD(type, what, argument, first, last) {\\n                    var simple = type.slice(0, 3) !== \"nth\",\\n                        forward = type.slice(-4) !== \"last\",\\n                        ofType = what === \"of-type\";\\n\\n                    return first === 1 && last === 0 ?\\n\\n                    // Shortcut for :nth-*(n)\\n                    function (elem) {\\n                        return !!elem.parentNode;\\n                    } : function (elem, context, xml) {\\n                        var cache,\\n                            outerCache,\\n                            node,\\n                            diff,\\n                            nodeIndex,\\n                            start,\\n                            dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\\n                            parent = elem.parentNode,\\n                            name = ofType && elem.nodeName.toLowerCase(),\\n                            useCache = !xml && !ofType;\\n\\n                        if (parent) {\\n\\n                            // :(first|last|only)-(child|of-type)\\n                            if (simple) {\\n                                while (dir) {\\n                                    node = elem;\\n                                    while (node = node[dir]) {\\n                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\\n                                            return false;\\n                                        }\\n                                    }\\n                                    // Reverse direction for :only-* (if we haven\\'t yet done so)\\n                                    start = dir = type === \"only\" && !start && \"nextSibling\";\\n                                }\\n                                return true;\\n                            }\\n\\n                            start = [forward ? parent.firstChild : parent.lastChild];\\n\\n                            // non-xml :nth-child(...) stores cache data on `parent`\\n                            if (forward && useCache) {\\n                                // Seek `elem` from a previously-cached index\\n                                outerCache = parent[expando] || (parent[expando] = {});\\n                                cache = outerCache[type] || [];\\n                                nodeIndex = cache[0] === dirruns && cache[1];\\n                                diff = cache[0] === dirruns && cache[2];\\n                                node = nodeIndex && parent.childNodes[nodeIndex];\\n\\n                                while (node = ++nodeIndex && node && node[dir] || (\\n\\n                                // Fallback to seeking `elem` from the start\\n                                diff = nodeIndex = 0) || start.pop()) {\\n\\n                                    // When found, cache indexes on `parent` and break\\n                                    if (node.nodeType === 1 && ++diff && node === elem) {\\n                                        outerCache[type] = [dirruns, nodeIndex, diff];\\n                                        break;\\n                                    }\\n                                }\\n\\n                                // Use previously-cached element index if available\\n                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\\n                                diff = cache[1];\\n\\n                                // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\\n                            } else {\\n                                // Use the same loop as above to seek `elem` from the start\\n                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\\n\\n                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\\n                                        // Cache the index of each encountered element\\n                                        if (useCache) {\\n                                            (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\\n                                        }\\n\\n                                        if (node === elem) {\\n                                            break;\\n                                        }\\n                                    }\\n                                }\\n                            }\\n\\n                            // Incorporate the offset, then check against cycle size\\n                            diff -= last;\\n                            return diff === first || diff % first === 0 && diff / first >= 0;\\n                        }\\n                    };\\n                },\\n\\n                \"PSEUDO\": function PSEUDO(pseudo, argument) {\\n                    // pseudo-class names are case-insensitive\\n                    // http://www.w3.org/TR/selectors/#pseudo-classes\\n                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\\n                    // Remember that setFilters inherits from pseudos\\n                    var args,\\n                        fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\\n\\n                    // The user may use createPseudo to indicate that\\n                    // arguments are needed to create the filter function\\n                    // just as Sizzle does\\n                    if (fn[expando]) {\\n                        return fn(argument);\\n                    }\\n\\n                    // But maintain support for old signatures\\n                    if (fn.length > 1) {\\n                        args = [pseudo, pseudo, \"\", argument];\\n                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\\n                            var idx,\\n                                matched = fn(seed, argument),\\n                                i = matched.length;\\n                            while (i--) {\\n                                idx = indexOf.call(seed, matched[i]);\\n                                seed[idx] = !(matches[idx] = matched[i]);\\n                            }\\n                        }) : function (elem) {\\n                            return fn(elem, 0, args);\\n                        };\\n                    }\\n\\n                    return fn;\\n                }\\n            },\\n\\n            pseudos: {\\n                // Potentially complex pseudos\\n                \"not\": markFunction(function (selector) {\\n                    // Trim the selector passed to compile\\n                    // to avoid treating leading and trailing\\n                    // spaces as combinators\\n                    var input = [],\\n                        results = [],\\n                        matcher = compile(selector.replace(rtrim, \"$1\"));\\n\\n                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\\n                        var elem,\\n                            unmatched = matcher(seed, null, xml, []),\\n                            i = seed.length;\\n\\n                        // Match elements unmatched by `matcher`\\n                        while (i--) {\\n                            if (elem = unmatched[i]) {\\n                                seed[i] = !(matches[i] = elem);\\n                            }\\n                        }\\n                    }) : function (elem, context, xml) {\\n                        input[0] = elem;\\n                        matcher(input, null, xml, results);\\n                        return !results.pop();\\n                    };\\n                }),\\n\\n                \"has\": markFunction(function (selector) {\\n                    return function (elem) {\\n                        return Sizzle(selector, elem).length > 0;\\n                    };\\n                }),\\n\\n                \"contains\": markFunction(function (text) {\\n                    return function (elem) {\\n                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\\n                    };\\n                }),\\n\\n                // \"Whether an element is represented by a :lang() selector\\n                // is based solely on the element\\'s language value\\n                // being equal to the identifier C,\\n                // or beginning with the identifier C immediately followed by \"-\".\\n                // The matching of C against the element\\'s language value is performed case-insensitively.\\n                // The identifier C does not have to be a valid language name.\"\\n                // http://www.w3.org/TR/selectors/#lang-pseudo\\n                \"lang\": markFunction(function (lang) {\\n                    // lang value must be a valid identifier\\n                    if (!ridentifier.test(lang || \"\")) {\\n                        Sizzle.error(\"unsupported lang: \" + lang);\\n                    }\\n                    lang = lang.replace(runescape, funescape).toLowerCase();\\n                    return function (elem) {\\n                        var elemLang;\\n                        do {\\n                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\\n\\n                                elemLang = elemLang.toLowerCase();\\n                                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\\n                            }\\n                        } while ((elem = elem.parentNode) && elem.nodeType === 1);\\n                        return false;\\n                    };\\n                }),\\n\\n                // Miscellaneous\\n                \"target\": function target(elem) {\\n                    var hash = window.location && window.location.hash;\\n                    return hash && hash.slice(1) === elem.id;\\n                },\\n\\n                \"root\": function root(elem) {\\n                    return elem === docElem;\\n                },\\n\\n                \"focus\": function focus(elem) {\\n                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\\n                },\\n\\n                // Boolean properties\\n                \"enabled\": function enabled(elem) {\\n                    return elem.disabled === false;\\n                },\\n\\n                \"disabled\": function disabled(elem) {\\n                    return elem.disabled === true;\\n                },\\n\\n                \"checked\": function checked(elem) {\\n                    // In CSS3, :checked should return both checked and selected elements\\n                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n                    var nodeName = elem.nodeName.toLowerCase();\\n                    return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\\n                },\\n\\n                \"selected\": function selected(elem) {\\n                    // Accessing this property makes selected-by-default\\n                    // options in Safari work properly\\n                    if (elem.parentNode) {\\n                        elem.parentNode.selectedIndex;\\n                    }\\n\\n                    return elem.selected === true;\\n                },\\n\\n                // Contents\\n                \"empty\": function empty(elem) {\\n                    // http://www.w3.org/TR/selectors/#empty-pseudo\\n                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\\n                    //   but not by others (comment: 8; processing instruction: 7; etc.)\\n                    // nodeType < 6 works because attributes (2) do not appear as children\\n                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\\n                        if (elem.nodeType < 6) {\\n                            return false;\\n                        }\\n                    }\\n                    return true;\\n                },\\n\\n                \"parent\": function parent(elem) {\\n                    return !Expr.pseudos[\"empty\"](elem);\\n                },\\n\\n                // Element/input types\\n                \"header\": function header(elem) {\\n                    return rheader.test(elem.nodeName);\\n                },\\n\\n                \"input\": function input(elem) {\\n                    return rinputs.test(elem.nodeName);\\n                },\\n\\n                \"button\": function button(elem) {\\n                    var name = elem.nodeName.toLowerCase();\\n                    return name === \"input\" && elem.type === \"button\" || name === \"button\";\\n                },\\n\\n                \"text\": function text(elem) {\\n                    var attr;\\n                    return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && (\\n\\n                    // Support: IE<8\\n                    // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\\n                    (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\\n                },\\n\\n                // Position-in-collection\\n                \"first\": createPositionalPseudo(function () {\\n                    return [0];\\n                }),\\n\\n                \"last\": createPositionalPseudo(function (matchIndexes, length) {\\n                    return [length - 1];\\n                }),\\n\\n                \"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n                    return [argument < 0 ? argument + length : argument];\\n                }),\\n\\n                \"even\": createPositionalPseudo(function (matchIndexes, length) {\\n                    var i = 0;\\n                    for (; i < length; i += 2) {\\n                        matchIndexes.push(i);\\n                    }\\n                    return matchIndexes;\\n                }),\\n\\n                \"odd\": createPositionalPseudo(function (matchIndexes, length) {\\n                    var i = 1;\\n                    for (; i < length; i += 2) {\\n                        matchIndexes.push(i);\\n                    }\\n                    return matchIndexes;\\n                }),\\n\\n                \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n                    var i = argument < 0 ? argument + length : argument;\\n                    for (; --i >= 0;) {\\n                        matchIndexes.push(i);\\n                    }\\n                    return matchIndexes;\\n                }),\\n\\n                \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n                    var i = argument < 0 ? argument + length : argument;\\n                    for (; ++i < length;) {\\n                        matchIndexes.push(i);\\n                    }\\n                    return matchIndexes;\\n                })\\n            }\\n        };\\n\\n        Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\\n\\n        // Add button/input type pseudos\\n        for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\\n            Expr.pseudos[i] = createInputPseudo(i);\\n        }\\n        for (i in { submit: true, reset: true }) {\\n            Expr.pseudos[i] = createButtonPseudo(i);\\n        }\\n\\n        // Easy API for creating new setFilters\\n        function setFilters() {}\\n        setFilters.prototype = Expr.filters = Expr.pseudos;\\n        Expr.setFilters = new setFilters();\\n\\n        tokenize = Sizzle.tokenize = function (selector, parseOnly) {\\n            var matched,\\n                match,\\n                tokens,\\n                type,\\n                soFar,\\n                groups,\\n                preFilters,\\n                cached = tokenCache[selector + \" \"];\\n\\n            if (cached) {\\n                return parseOnly ? 0 : cached.slice(0);\\n            }\\n\\n            soFar = selector;\\n            groups = [];\\n            preFilters = Expr.preFilter;\\n\\n            while (soFar) {\\n\\n                // Comma and first run\\n                if (!matched || (match = rcomma.exec(soFar))) {\\n                    if (match) {\\n                        // Don\\'t consume trailing commas as valid\\n                        soFar = soFar.slice(match[0].length) || soFar;\\n                    }\\n                    groups.push(tokens = []);\\n                }\\n\\n                matched = false;\\n\\n                // Combinators\\n                if (match = rcombinators.exec(soFar)) {\\n                    matched = match.shift();\\n                    tokens.push({\\n                        value: matched,\\n                        // Cast descendant combinators to space\\n                        type: match[0].replace(rtrim, \" \")\\n                    });\\n                    soFar = soFar.slice(matched.length);\\n                }\\n\\n                // Filters\\n                for (type in Expr.filter) {\\n                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\\n                        matched = match.shift();\\n                        tokens.push({\\n                            value: matched,\\n                            type: type,\\n                            matches: match\\n                        });\\n                        soFar = soFar.slice(matched.length);\\n                    }\\n                }\\n\\n                if (!matched) {\\n                    break;\\n                }\\n            }\\n\\n            // Return the length of the invalid excess\\n            // if we\\'re just parsing\\n            // Otherwise, throw an error or return tokens\\n            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\\n            // Cache the tokens\\n            tokenCache(selector, groups).slice(0);\\n        };\\n\\n        function toSelector(tokens) {\\n            var i = 0,\\n                len = tokens.length,\\n                selector = \"\";\\n            for (; i < len; i++) {\\n                selector += tokens[i].value;\\n            }\\n            return selector;\\n        }\\n\\n        function addCombinator(matcher, combinator, base) {\\n            var dir = combinator.dir,\\n                checkNonElements = base && dir === \"parentNode\",\\n                doneName = done++;\\n\\n            return combinator.first ?\\n            // Check against closest ancestor/preceding element\\n            function (elem, context, xml) {\\n                while (elem = elem[dir]) {\\n                    if (elem.nodeType === 1 || checkNonElements) {\\n                        return matcher(elem, context, xml);\\n                    }\\n                }\\n            } :\\n\\n            // Check against all ancestor/preceding elements\\n            function (elem, context, xml) {\\n                var oldCache,\\n                    outerCache,\\n                    newCache = [dirruns, doneName];\\n\\n                // We can\\'t set arbitrary data on XML nodes, so they don\\'t benefit from dir caching\\n                if (xml) {\\n                    while (elem = elem[dir]) {\\n                        if (elem.nodeType === 1 || checkNonElements) {\\n                            if (matcher(elem, context, xml)) {\\n                                return true;\\n                            }\\n                        }\\n                    }\\n                } else {\\n                    while (elem = elem[dir]) {\\n                        if (elem.nodeType === 1 || checkNonElements) {\\n                            outerCache = elem[expando] || (elem[expando] = {});\\n                            if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\\n\\n                                // Assign to newCache so results back-propagate to previous elements\\n                                return newCache[2] = oldCache[2];\\n                            } else {\\n                                // Reuse newcache so results back-propagate to previous elements\\n                                outerCache[dir] = newCache;\\n\\n                                // A match means we\\'re done; a fail means we have to keep checking\\n                                if (newCache[2] = matcher(elem, context, xml)) {\\n                                    return true;\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            };\\n        }\\n\\n        function elementMatcher(matchers) {\\n            return matchers.length > 1 ? function (elem, context, xml) {\\n                var i = matchers.length;\\n                while (i--) {\\n                    if (!matchers[i](elem, context, xml)) {\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            } : matchers[0];\\n        }\\n\\n        function multipleContexts(selector, contexts, results) {\\n            var i = 0,\\n                len = contexts.length;\\n            for (; i < len; i++) {\\n                Sizzle(selector, contexts[i], results);\\n            }\\n            return results;\\n        }\\n\\n        function condense(unmatched, map, filter, context, xml) {\\n            var elem,\\n                newUnmatched = [],\\n                i = 0,\\n                len = unmatched.length,\\n                mapped = map != null;\\n\\n            for (; i < len; i++) {\\n                if (elem = unmatched[i]) {\\n                    if (!filter || filter(elem, context, xml)) {\\n                        newUnmatched.push(elem);\\n                        if (mapped) {\\n                            map.push(i);\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return newUnmatched;\\n        }\\n\\n        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\\n            if (postFilter && !postFilter[expando]) {\\n                postFilter = setMatcher(postFilter);\\n            }\\n            if (postFinder && !postFinder[expando]) {\\n                postFinder = setMatcher(postFinder, postSelector);\\n            }\\n            return markFunction(function (seed, results, context, xml) {\\n                var temp,\\n                    i,\\n                    elem,\\n                    preMap = [],\\n                    postMap = [],\\n                    preexisting = results.length,\\n\\n\\n                // Get initial elements from seed or context\\n                elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\\n\\n\\n                // Prefilter to get matcher input, preserving a map for seed-results synchronization\\n                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\\n                    matcherOut = matcher ?\\n                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\\n                postFinder || (seed ? preFilter : preexisting || postFilter) ?\\n\\n                // ...intermediate processing is necessary\\n                [] :\\n\\n                // ...otherwise use results directly\\n                results : matcherIn;\\n\\n                // Find primary matches\\n                if (matcher) {\\n                    matcher(matcherIn, matcherOut, context, xml);\\n                }\\n\\n                // Apply postFilter\\n                if (postFilter) {\\n                    temp = condense(matcherOut, postMap);\\n                    postFilter(temp, [], context, xml);\\n\\n                    // Un-match failing elements by moving them back to matcherIn\\n                    i = temp.length;\\n                    while (i--) {\\n                        if (elem = temp[i]) {\\n                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\\n                        }\\n                    }\\n                }\\n\\n                if (seed) {\\n                    if (postFinder || preFilter) {\\n                        if (postFinder) {\\n                            // Get the final matcherOut by condensing this intermediate into postFinder contexts\\n                            temp = [];\\n                            i = matcherOut.length;\\n                            while (i--) {\\n                                if (elem = matcherOut[i]) {\\n                                    // Restore matcherIn since elem is not yet a final match\\n                                    temp.push(matcherIn[i] = elem);\\n                                }\\n                            }\\n                            postFinder(null, matcherOut = [], temp, xml);\\n                        }\\n\\n                        // Move matched elements from seed to results to keep them synchronized\\n                        i = matcherOut.length;\\n                        while (i--) {\\n                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\\n\\n                                seed[temp] = !(results[temp] = elem);\\n                            }\\n                        }\\n                    }\\n\\n                    // Add elements to results, through postFinder if defined\\n                } else {\\n                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\\n                    if (postFinder) {\\n                        postFinder(null, results, matcherOut, xml);\\n                    } else {\\n                        push.apply(results, matcherOut);\\n                    }\\n                }\\n            });\\n        }\\n\\n        function matcherFromTokens(tokens) {\\n            var checkContext,\\n                matcher,\\n                j,\\n                len = tokens.length,\\n                leadingRelative = Expr.relative[tokens[0].type],\\n                implicitRelative = leadingRelative || Expr.relative[\" \"],\\n                i = leadingRelative ? 1 : 0,\\n\\n\\n            // The foundational matcher ensures that elements are reachable from top-level context(s)\\n            matchContext = addCombinator(function (elem) {\\n                return elem === checkContext;\\n            }, implicitRelative, true),\\n                matchAnyContext = addCombinator(function (elem) {\\n                return indexOf.call(checkContext, elem) > -1;\\n            }, implicitRelative, true),\\n                matchers = [function (elem, context, xml) {\\n                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\\n            }];\\n\\n            for (; i < len; i++) {\\n                if (matcher = Expr.relative[tokens[i].type]) {\\n                    matchers = [addCombinator(elementMatcher(matchers), matcher)];\\n                } else {\\n                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\\n\\n                    // Return special upon seeing a positional matcher\\n                    if (matcher[expando]) {\\n                        // Find the next relative operator (if any) for proper handling\\n                        j = ++i;\\n                        for (; j < len; j++) {\\n                            if (Expr.relative[tokens[j].type]) {\\n                                break;\\n                            }\\n                        }\\n                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\\n                        tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === \" \" ? \"*\" : \"\" })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\\n                    }\\n                    matchers.push(matcher);\\n                }\\n            }\\n\\n            return elementMatcher(matchers);\\n        }\\n\\n        function matcherFromGroupMatchers(elementMatchers, setMatchers) {\\n            var bySet = setMatchers.length > 0,\\n                byElement = elementMatchers.length > 0,\\n                superMatcher = function superMatcher(seed, context, xml, results, outermost) {\\n                var elem,\\n                    j,\\n                    matcher,\\n                    matchedCount = 0,\\n                    i = \"0\",\\n                    unmatched = seed && [],\\n                    setMatched = [],\\n                    contextBackup = outermostContext,\\n\\n                // We must always have either seed elements or outermost context\\n                elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\\n\\n                // Use integer dirruns iff this is the outermost matcher\\n                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\\n                    len = elems.length;\\n\\n                if (outermost) {\\n                    outermostContext = context !== document && context;\\n                }\\n\\n                // Add elements passing elementMatchers directly to results\\n                // Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\\n                // Support: IE<9, Safari\\n                // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\\n                for (; i !== len && (elem = elems[i]) != null; i++) {\\n                    if (byElement && elem) {\\n                        j = 0;\\n                        while (matcher = elementMatchers[j++]) {\\n                            if (matcher(elem, context, xml)) {\\n                                results.push(elem);\\n                                break;\\n                            }\\n                        }\\n                        if (outermost) {\\n                            dirruns = dirrunsUnique;\\n                        }\\n                    }\\n\\n                    // Track unmatched elements for set filters\\n                    if (bySet) {\\n                        // They will have gone through all possible matchers\\n                        if (elem = !matcher && elem) {\\n                            matchedCount--;\\n                        }\\n\\n                        // Lengthen the array for every element, matched or not\\n                        if (seed) {\\n                            unmatched.push(elem);\\n                        }\\n                    }\\n                }\\n\\n                // Apply set filters to unmatched elements\\n                matchedCount += i;\\n                if (bySet && i !== matchedCount) {\\n                    j = 0;\\n                    while (matcher = setMatchers[j++]) {\\n                        matcher(unmatched, setMatched, context, xml);\\n                    }\\n\\n                    if (seed) {\\n                        // Reintegrate element matches to eliminate the need for sorting\\n                        if (matchedCount > 0) {\\n                            while (i--) {\\n                                if (!(unmatched[i] || setMatched[i])) {\\n                                    setMatched[i] = pop.call(results);\\n                                }\\n                            }\\n                        }\\n\\n                        // Discard index placeholder values to get only actual matches\\n                        setMatched = condense(setMatched);\\n                    }\\n\\n                    // Add matches to results\\n                    push.apply(results, setMatched);\\n\\n                    // Seedless set matches succeeding multiple successful matchers stipulate sorting\\n                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\\n\\n                        Sizzle.uniqueSort(results);\\n                    }\\n                }\\n\\n                // Override manipulation of globals by nested matchers\\n                if (outermost) {\\n                    dirruns = dirrunsUnique;\\n                    outermostContext = contextBackup;\\n                }\\n\\n                return unmatched;\\n            };\\n\\n            return bySet ? markFunction(superMatcher) : superMatcher;\\n        }\\n\\n        compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\\n            var i,\\n                setMatchers = [],\\n                elementMatchers = [],\\n                cached = compilerCache[selector + \" \"];\\n\\n            if (!cached) {\\n                // Generate a function of recursive functions that can be used to check each element\\n                if (!match) {\\n                    match = tokenize(selector);\\n                }\\n                i = match.length;\\n                while (i--) {\\n                    cached = matcherFromTokens(match[i]);\\n                    if (cached[expando]) {\\n                        setMatchers.push(cached);\\n                    } else {\\n                        elementMatchers.push(cached);\\n                    }\\n                }\\n\\n                // Cache the compiled function\\n                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\\n\\n                // Save selector and tokenization\\n                cached.selector = selector;\\n            }\\n            return cached;\\n        };\\n\\n        /**\\r\\n         * A low-level selection function that works with Sizzle\\'s compiled\\r\\n         *  selector functions\\r\\n         * @param {String|Function} selector A selector or a pre-compiled\\r\\n         *  selector function built with Sizzle.compile\\r\\n         * @param {Element} context\\r\\n         * @param {Array} [results]\\r\\n         * @param {Array} [seed] A set of elements to match against\\r\\n         */\\n        select = Sizzle.select = function (selector, context, results, seed) {\\n            var i,\\n                tokens,\\n                token,\\n                type,\\n                find,\\n                compiled = typeof selector === \"function\" && selector,\\n                match = !seed && tokenize(selector = compiled.selector || selector);\\n\\n            results = results || [];\\n\\n            // Try to minimize operations if there is no seed and only one group\\n            if (match.length === 1) {\\n\\n                // Take a shortcut and set the context if the root selector is an ID\\n                tokens = match[0] = match[0].slice(0);\\n                if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\\n\\n                    context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\\n                    if (!context) {\\n                        return results;\\n\\n                        // Precompiled matchers will still verify ancestry, so step up a level\\n                    } else if (compiled) {\\n                        context = context.parentNode;\\n                    }\\n\\n                    selector = selector.slice(tokens.shift().value.length);\\n                }\\n\\n                // Fetch a seed set for right-to-left matching\\n                i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\\n                while (i--) {\\n                    token = tokens[i];\\n\\n                    // Abort if we hit a combinator\\n                    if (Expr.relative[type = token.type]) {\\n                        break;\\n                    }\\n                    if (find = Expr.find[type]) {\\n                        // Search, expanding context for leading sibling combinators\\n                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\\n\\n                            // If seed is empty or no tokens remain, we can return early\\n                            tokens.splice(i, 1);\\n                            selector = seed.length && toSelector(tokens);\\n                            if (!selector) {\\n                                push.apply(results, seed);\\n                                return results;\\n                            }\\n\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // Compile and execute a filtering function if one is not provided\\n            // Provide `match` to avoid retokenization if we modified the selector above\\n            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);\\n            return results;\\n        };\\n\\n        // One-time assignments\\n\\n        // Sort stability\\n        support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando;\\n\\n        // Support: Chrome<14\\n        // Always assume duplicates if they aren\\'t passed to the comparison function\\n        support.detectDuplicates = !!hasDuplicate;\\n\\n        // Initialize against the default document\\n        setDocument();\\n\\n        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\\n        // Detached nodes confoundingly follow *each other*\\n        support.sortDetached = assert(function (div1) {\\n            // Should return 1, but returns 4 (following)\\n            return div1.compareDocumentPosition(document.createElement(\"div\")) & 1;\\n        });\\n\\n        // Support: IE<8\\n        // Prevent attribute/property \"interpolation\"\\n        // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\\n        if (!assert(function (div) {\\n            div.innerHTML = \"<a href=\\'#\\'></a>\";\\n            return div.firstChild.getAttribute(\"href\") === \"#\";\\n        })) {\\n            addHandle(\"type|href|height|width\", function (elem, name, isXML) {\\n                if (!isXML) {\\n                    return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\\n                }\\n            });\\n        }\\n\\n        // Support: IE<9\\n        // Use defaultValue in place of getAttribute(\"value\")\\n        if (!support.attributes || !assert(function (div) {\\n            div.innerHTML = \"<input/>\";\\n            div.firstChild.setAttribute(\"value\", \"\");\\n            return div.firstChild.getAttribute(\"value\") === \"\";\\n        })) {\\n            addHandle(\"value\", function (elem, name, isXML) {\\n                if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\\n                    return elem.defaultValue;\\n                }\\n            });\\n        }\\n\\n        // Support: IE<9\\n        // Use getAttributeNode to fetch booleans when getAttribute lies\\n        if (!assert(function (div) {\\n            return div.getAttribute(\"disabled\") == null;\\n        })) {\\n            addHandle(booleans, function (elem, name, isXML) {\\n                var val;\\n                if (!isXML) {\\n                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\\n                }\\n            });\\n        }\\n\\n        return Sizzle;\\n    }(window);\\n\\n    jQuery.find = Sizzle;\\n    jQuery.expr = Sizzle.selectors;\\n    jQuery.expr[\":\"] = jQuery.expr.pseudos;\\n    jQuery.unique = Sizzle.uniqueSort;\\n    jQuery.text = Sizzle.getText;\\n    jQuery.isXMLDoc = Sizzle.isXML;\\n    jQuery.contains = Sizzle.contains;\\n\\n    var rneedsContext = jQuery.expr.match.needsContext;\\n\\n    var rsingleTag = /^<(\\\\w+)\\\\s*\\\\/?>(?:<\\\\/\\\\1>|)$/;\\n\\n    var risSimple = /^.[^:#\\\\[\\\\.,]*$/;\\n\\n    // Implement the identical functionality for filter and not\\n    function winnow(elements, qualifier, not) {\\n        if (jQuery.isFunction(qualifier)) {\\n            return jQuery.grep(elements, function (elem, i) {\\n                /* jshint -W018 */\\n                return !!qualifier.call(elem, i, elem) !== not;\\n            });\\n        }\\n\\n        if (qualifier.nodeType) {\\n            return jQuery.grep(elements, function (elem) {\\n                return elem === qualifier !== not;\\n            });\\n        }\\n\\n        if (typeof qualifier === \"string\") {\\n            if (risSimple.test(qualifier)) {\\n                return jQuery.filter(qualifier, elements, not);\\n            }\\n\\n            qualifier = jQuery.filter(qualifier, elements);\\n        }\\n\\n        return jQuery.grep(elements, function (elem) {\\n            return indexOf.call(qualifier, elem) >= 0 !== not;\\n        });\\n    }\\n\\n    jQuery.filter = function (expr, elems, not) {\\n        var elem = elems[0];\\n\\n        if (not) {\\n            expr = \":not(\" + expr + \")\";\\n        }\\n\\n        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\\n            return elem.nodeType === 1;\\n        }));\\n    };\\n\\n    jQuery.fn.extend({\\n        find: function find(selector) {\\n            var i,\\n                len = this.length,\\n                ret = [],\\n                self = this;\\n\\n            if (typeof selector !== \"string\") {\\n                return this.pushStack(jQuery(selector).filter(function () {\\n                    for (i = 0; i < len; i++) {\\n                        if (jQuery.contains(self[i], this)) {\\n                            return true;\\n                        }\\n                    }\\n                }));\\n            }\\n\\n            for (i = 0; i < len; i++) {\\n                jQuery.find(selector, self[i], ret);\\n            }\\n\\n            // Needed because $( selector, context ) becomes $( context ).find( selector )\\n            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\\n            ret.selector = this.selector ? this.selector + \" \" + selector : selector;\\n            return ret;\\n        },\\n        filter: function filter(selector) {\\n            return this.pushStack(winnow(this, selector || [], false));\\n        },\\n        not: function not(selector) {\\n            return this.pushStack(winnow(this, selector || [], true));\\n        },\\n        is: function is(selector) {\\n            return !!winnow(this,\\n\\n            // If this is a positional/relative selector, check membership in the returned set\\n            // so $(\"p:first\").is(\"p:last\") won\\'t return true for a doc with two \"p\".\\n            typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\\n        }\\n    });\\n\\n    // Initialize a jQuery object\\n\\n\\n    // A central reference to the root jQuery(document)\\n    var rootjQuery,\\n\\n\\n    // A simple way to check for HTML strings\\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\\n    // Strict HTML recognition (#11290: must start with <)\\n    rquickExpr = /^(?:\\\\s*(<[\\\\w\\\\W]+>)[^>]*|#([\\\\w-]*))$/,\\n        init = jQuery.fn.init = function (selector, context) {\\n        var match, elem;\\n\\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\\n        if (!selector) {\\n            return this;\\n        }\\n\\n        // Handle HTML strings\\n        if (typeof selector === \"string\") {\\n            if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\\n                // Assume that strings that start and end with <> are HTML and skip the regex check\\n                match = [null, selector, null];\\n            } else {\\n                match = rquickExpr.exec(selector);\\n            }\\n\\n            // Match html or make sure no context is specified for #id\\n            if (match && (match[1] || !context)) {\\n\\n                // HANDLE: $(html) -> $(array)\\n                if (match[1]) {\\n                    context = context instanceof jQuery ? context[0] : context;\\n\\n                    // scripts is true for back-compat\\n                    // Intentionally let the error be thrown if parseHTML is not present\\n                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\\n\\n                    // HANDLE: $(html, props)\\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\\n                        for (match in context) {\\n                            // Properties of context are called as methods if possible\\n                            if (jQuery.isFunction(this[match])) {\\n                                this[match](context[match]);\\n\\n                                // ...and otherwise set as attributes\\n                            } else {\\n                                this.attr(match, context[match]);\\n                            }\\n                        }\\n                    }\\n\\n                    return this;\\n\\n                    // HANDLE: $(#id)\\n                } else {\\n                    elem = document.getElementById(match[2]);\\n\\n                    // Check parentNode to catch when Blackberry 4.6 returns\\n                    // nodes that are no longer in the document #6963\\n                    if (elem && elem.parentNode) {\\n                        // Inject the element directly into the jQuery object\\n                        this.length = 1;\\n                        this[0] = elem;\\n                    }\\n\\n                    this.context = document;\\n                    this.selector = selector;\\n                    return this;\\n                }\\n\\n                // HANDLE: $(expr, $(...))\\n            } else if (!context || context.jquery) {\\n                return (context || rootjQuery).find(selector);\\n\\n                // HANDLE: $(expr, context)\\n                // (which is just equivalent to: $(context).find(expr)\\n            } else {\\n                return this.constructor(context).find(selector);\\n            }\\n\\n            // HANDLE: $(DOMElement)\\n        } else if (selector.nodeType) {\\n            this.context = this[0] = selector;\\n            this.length = 1;\\n            return this;\\n\\n            // HANDLE: $(function)\\n            // Shortcut for document ready\\n        } else if (jQuery.isFunction(selector)) {\\n            return typeof rootjQuery.ready !== \"undefined\" ? rootjQuery.ready(selector) :\\n            // Execute immediately if ready is not present\\n            selector(jQuery);\\n        }\\n\\n        if (selector.selector !== undefined) {\\n            this.selector = selector.selector;\\n            this.context = selector.context;\\n        }\\n\\n        return jQuery.makeArray(selector, this);\\n    };\\n\\n    // Give the init function the jQuery prototype for later instantiation\\n    init.prototype = jQuery.fn;\\n\\n    // Initialize central reference\\n    rootjQuery = jQuery(document);\\n\\n    var rparentsprev = /^(?:parents|prev(?:Until|All))/,\\n\\n    // methods guaranteed to produce a unique set when starting from a unique set\\n    guaranteedUnique = {\\n        children: true,\\n        contents: true,\\n        next: true,\\n        prev: true\\n    };\\n\\n    jQuery.extend({\\n        dir: function dir(elem, _dir, until) {\\n            var matched = [],\\n                truncate = until !== undefined;\\n\\n            while ((elem = elem[_dir]) && elem.nodeType !== 9) {\\n                if (elem.nodeType === 1) {\\n                    if (truncate && jQuery(elem).is(until)) {\\n                        break;\\n                    }\\n                    matched.push(elem);\\n                }\\n            }\\n            return matched;\\n        },\\n\\n        sibling: function sibling(n, elem) {\\n            var matched = [];\\n\\n            for (; n; n = n.nextSibling) {\\n                if (n.nodeType === 1 && n !== elem) {\\n                    matched.push(n);\\n                }\\n            }\\n\\n            return matched;\\n        }\\n    });\\n\\n    jQuery.fn.extend({\\n        has: function has(target) {\\n            var targets = jQuery(target, this),\\n                l = targets.length;\\n\\n            return this.filter(function () {\\n                var i = 0;\\n                for (; i < l; i++) {\\n                    if (jQuery.contains(this, targets[i])) {\\n                        return true;\\n                    }\\n                }\\n            });\\n        },\\n\\n        closest: function closest(selectors, context) {\\n            var cur,\\n                i = 0,\\n                l = this.length,\\n                matched = [],\\n                pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? jQuery(selectors, context || this.context) : 0;\\n\\n            for (; i < l; i++) {\\n                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\\n                    // Always skip document fragments\\n                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :\\n\\n                    // Don\\'t pass non-elements to Sizzle\\n                    cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\\n\\n                        matched.push(cur);\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);\\n        },\\n\\n        // Determine the position of an element within\\n        // the matched set of elements\\n        index: function index(elem) {\\n\\n            // No argument, return index in parent\\n            if (!elem) {\\n                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\\n            }\\n\\n            // index in selector\\n            if (typeof elem === \"string\") {\\n                return indexOf.call(jQuery(elem), this[0]);\\n            }\\n\\n            // Locate the position of the desired element\\n            return indexOf.call(this,\\n\\n            // If it receives a jQuery object, the first element is used\\n            elem.jquery ? elem[0] : elem);\\n        },\\n\\n        add: function add(selector, context) {\\n            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));\\n        },\\n\\n        addBack: function addBack(selector) {\\n            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\\n        }\\n    });\\n\\n    function sibling(cur, dir) {\\n        while ((cur = cur[dir]) && cur.nodeType !== 1) {}\\n        return cur;\\n    }\\n\\n    jQuery.each({\\n        parent: function parent(elem) {\\n            var parent = elem.parentNode;\\n            return parent && parent.nodeType !== 11 ? parent : null;\\n        },\\n        parents: function parents(elem) {\\n            return jQuery.dir(elem, \"parentNode\");\\n        },\\n        parentsUntil: function parentsUntil(elem, i, until) {\\n            return jQuery.dir(elem, \"parentNode\", until);\\n        },\\n        next: function next(elem) {\\n            return sibling(elem, \"nextSibling\");\\n        },\\n        prev: function prev(elem) {\\n            return sibling(elem, \"previousSibling\");\\n        },\\n        nextAll: function nextAll(elem) {\\n            return jQuery.dir(elem, \"nextSibling\");\\n        },\\n        prevAll: function prevAll(elem) {\\n            return jQuery.dir(elem, \"previousSibling\");\\n        },\\n        nextUntil: function nextUntil(elem, i, until) {\\n            return jQuery.dir(elem, \"nextSibling\", until);\\n        },\\n        prevUntil: function prevUntil(elem, i, until) {\\n            return jQuery.dir(elem, \"previousSibling\", until);\\n        },\\n        siblings: function siblings(elem) {\\n            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);\\n        },\\n        children: function children(elem) {\\n            return jQuery.sibling(elem.firstChild);\\n        },\\n        contents: function contents(elem) {\\n            return elem.contentDocument || jQuery.merge([], elem.childNodes);\\n        }\\n    }, function (name, fn) {\\n        jQuery.fn[name] = function (until, selector) {\\n            var matched = jQuery.map(this, fn, until);\\n\\n            if (name.slice(-5) !== \"Until\") {\\n                selector = until;\\n            }\\n\\n            if (selector && typeof selector === \"string\") {\\n                matched = jQuery.filter(selector, matched);\\n            }\\n\\n            if (this.length > 1) {\\n                // Remove duplicates\\n                if (!guaranteedUnique[name]) {\\n                    jQuery.unique(matched);\\n                }\\n\\n                // Reverse order for parents* and prev-derivatives\\n                if (rparentsprev.test(name)) {\\n                    matched.reverse();\\n                }\\n            }\\n\\n            return this.pushStack(matched);\\n        };\\n    });\\n    var rnotwhite = /\\\\S+/g;\\n\\n    // String to Object options format cache\\n    var optionsCache = {};\\n\\n    // Convert String-formatted options into Object-formatted ones and store in cache\\n    function createOptions(options) {\\n        var object = optionsCache[options] = {};\\n        jQuery.each(options.match(rnotwhite) || [], function (_, flag) {\\n            object[flag] = true;\\n        });\\n        return object;\\n    }\\n\\n    /*\\r\\n     * Create a callback list using the following parameters:\\r\\n     *\\r\\n     *\\toptions: an optional list of space-separated options that will change how\\r\\n     *\\t\\t\\tthe callback list behaves or a more traditional option object\\r\\n     *\\r\\n     * By default a callback list will act like an event callback list and can be\\r\\n     * \"fired\" multiple times.\\r\\n     *\\r\\n     * Possible options:\\r\\n     *\\r\\n     *\\tonce:\\t\\t\\twill ensure the callback list can only be fired once (like a Deferred)\\r\\n     *\\r\\n     *\\tmemory:\\t\\t\\twill keep track of previous values and will call any callback added\\r\\n     *\\t\\t\\t\\t\\tafter the list has been fired right away with the latest \"memorized\"\\r\\n     *\\t\\t\\t\\t\\tvalues (like a Deferred)\\r\\n     *\\r\\n     *\\tunique:\\t\\t\\twill ensure a callback can only be added once (no duplicate in the list)\\r\\n     *\\r\\n     *\\tstopOnFalse:\\tinterrupt callings when a callback returns false\\r\\n     *\\r\\n     */\\n    jQuery.Callbacks = function (options) {\\n\\n        // Convert options from String-formatted to Object-formatted if needed\\n        // (we check in cache first)\\n        options = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\\n\\n        var // Last fire value (for non-forgettable lists)\\n        memory,\\n\\n        // Flag to know if list was already fired\\n        _fired,\\n\\n        // Flag to know if list is currently firing\\n        firing,\\n\\n        // First callback to fire (used internally by add and fireWith)\\n        firingStart,\\n\\n        // End of the loop when firing\\n        firingLength,\\n\\n        // Index of currently firing callback (modified by remove if needed)\\n        firingIndex,\\n\\n        // Actual callback list\\n        list = [],\\n\\n        // Stack of fire calls for repeatable lists\\n        stack = !options.once && [],\\n\\n        // Fire callbacks\\n        fire = function fire(data) {\\n            memory = options.memory && data;\\n            _fired = true;\\n            firingIndex = firingStart || 0;\\n            firingStart = 0;\\n            firingLength = list.length;\\n            firing = true;\\n            for (; list && firingIndex < firingLength; firingIndex++) {\\n                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\\n                    memory = false; // To prevent further calls using add\\n                    break;\\n                }\\n            }\\n            firing = false;\\n            if (list) {\\n                if (stack) {\\n                    if (stack.length) {\\n                        fire(stack.shift());\\n                    }\\n                } else if (memory) {\\n                    list = [];\\n                } else {\\n                    self.disable();\\n                }\\n            }\\n        },\\n\\n        // Actual Callbacks object\\n        self = {\\n            // Add a callback or a collection of callbacks to the list\\n            add: function add() {\\n                if (list) {\\n                    // First, we save the current length\\n                    var start = list.length;\\n                    (function add(args) {\\n                        jQuery.each(args, function (_, arg) {\\n                            var type = jQuery.type(arg);\\n                            if (type === \"function\") {\\n                                if (!options.unique || !self.has(arg)) {\\n                                    list.push(arg);\\n                                }\\n                            } else if (arg && arg.length && type !== \"string\") {\\n                                // Inspect recursively\\n                                add(arg);\\n                            }\\n                        });\\n                    })(arguments);\\n                    // Do we need to add the callbacks to the\\n                    // current firing batch?\\n                    if (firing) {\\n                        firingLength = list.length;\\n                        // With memory, if we\\'re not firing then\\n                        // we should call right away\\n                    } else if (memory) {\\n                        firingStart = start;\\n                        fire(memory);\\n                    }\\n                }\\n                return this;\\n            },\\n            // Remove a callback from the list\\n            remove: function remove() {\\n                if (list) {\\n                    jQuery.each(arguments, function (_, arg) {\\n                        var index;\\n                        while ((index = jQuery.inArray(arg, list, index)) > -1) {\\n                            list.splice(index, 1);\\n                            // Handle firing indexes\\n                            if (firing) {\\n                                if (index <= firingLength) {\\n                                    firingLength--;\\n                                }\\n                                if (index <= firingIndex) {\\n                                    firingIndex--;\\n                                }\\n                            }\\n                        }\\n                    });\\n                }\\n                return this;\\n            },\\n            // Check if a given callback is in the list.\\n            // If no argument is given, return whether or not list has callbacks attached.\\n            has: function has(fn) {\\n                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\\n            },\\n            // Remove all callbacks from the list\\n            empty: function empty() {\\n                list = [];\\n                firingLength = 0;\\n                return this;\\n            },\\n            // Have the list do nothing anymore\\n            disable: function disable() {\\n                list = stack = memory = undefined;\\n                return this;\\n            },\\n            // Is it disabled?\\n            disabled: function disabled() {\\n                return !list;\\n            },\\n            // Lock the list in its current state\\n            lock: function lock() {\\n                stack = undefined;\\n                if (!memory) {\\n                    self.disable();\\n                }\\n                return this;\\n            },\\n            // Is it locked?\\n            locked: function locked() {\\n                return !stack;\\n            },\\n            // Call all callbacks with the given context and arguments\\n            fireWith: function fireWith(context, args) {\\n                if (list && (!_fired || stack)) {\\n                    args = args || [];\\n                    args = [context, args.slice ? args.slice() : args];\\n                    if (firing) {\\n                        stack.push(args);\\n                    } else {\\n                        fire(args);\\n                    }\\n                }\\n                return this;\\n            },\\n            // Call all the callbacks with the given arguments\\n            fire: function fire() {\\n                self.fireWith(this, arguments);\\n                return this;\\n            },\\n            // To know if the callbacks have already been called at least once\\n            fired: function fired() {\\n                return !!_fired;\\n            }\\n        };\\n\\n        return self;\\n    };\\n\\n    jQuery.extend({\\n\\n        Deferred: function Deferred(func) {\\n            var tuples = [\\n            // action, add listener, listener list, final state\\n            [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\\n                _state = \"pending\",\\n                _promise = {\\n                state: function state() {\\n                    return _state;\\n                },\\n                always: function always() {\\n                    deferred.done(arguments).fail(arguments);\\n                    return this;\\n                },\\n                then: function then() /* fnDone, fnFail, fnProgress */{\\n                    var fns = arguments;\\n                    return jQuery.Deferred(function (newDefer) {\\n                        jQuery.each(tuples, function (i, tuple) {\\n                            var fn = jQuery.isFunction(fns[i]) && fns[i];\\n                            // deferred[ done | fail | progress ] for forwarding actions to newDefer\\n                            deferred[tuple[1]](function () {\\n                                var returned = fn && fn.apply(this, arguments);\\n                                if (returned && jQuery.isFunction(returned.promise)) {\\n                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\\n                                } else {\\n                                    newDefer[tuple[0] + \"With\"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);\\n                                }\\n                            });\\n                        });\\n                        fns = null;\\n                    }).promise();\\n                },\\n                // Get a promise for this deferred\\n                // If obj is provided, the promise aspect is added to the object\\n                promise: function promise(obj) {\\n                    return obj != null ? jQuery.extend(obj, _promise) : _promise;\\n                }\\n            },\\n                deferred = {};\\n\\n            // Keep pipe for back-compat\\n            _promise.pipe = _promise.then;\\n\\n            // Add list-specific methods\\n            jQuery.each(tuples, function (i, tuple) {\\n                var list = tuple[2],\\n                    stateString = tuple[3];\\n\\n                // promise[ done | fail | progress ] = list.add\\n                _promise[tuple[1]] = list.add;\\n\\n                // Handle state\\n                if (stateString) {\\n                    list.add(function () {\\n                        // state = [ resolved | rejected ]\\n                        _state = stateString;\\n\\n                        // [ reject_list | resolve_list ].disable; progress_list.lock\\n                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\\n                }\\n\\n                // deferred[ resolve | reject | notify ]\\n                deferred[tuple[0]] = function () {\\n                    deferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\\n                    return this;\\n                };\\n                deferred[tuple[0] + \"With\"] = list.fireWith;\\n            });\\n\\n            // Make the deferred a promise\\n            _promise.promise(deferred);\\n\\n            // Call given func if any\\n            if (func) {\\n                func.call(deferred, deferred);\\n            }\\n\\n            // All done!\\n            return deferred;\\n        },\\n\\n        // Deferred helper\\n        when: function when(subordinate /* , ..., subordinateN */) {\\n            var i = 0,\\n                resolveValues = _slice.call(arguments),\\n                length = resolveValues.length,\\n\\n\\n            // the count of uncompleted subordinates\\n            remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\\n\\n\\n            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\\n            deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\\n\\n\\n            // Update function for both resolve and progress values\\n            updateFunc = function updateFunc(i, contexts, values) {\\n                return function (value) {\\n                    contexts[i] = this;\\n                    values[i] = arguments.length > 1 ? _slice.call(arguments) : value;\\n                    if (values === progressValues) {\\n                        deferred.notifyWith(contexts, values);\\n                    } else if (! --remaining) {\\n                        deferred.resolveWith(contexts, values);\\n                    }\\n                };\\n            },\\n                progressValues,\\n                progressContexts,\\n                resolveContexts;\\n\\n            // add listeners to Deferred subordinates; treat others as resolved\\n            if (length > 1) {\\n                progressValues = new Array(length);\\n                progressContexts = new Array(length);\\n                resolveContexts = new Array(length);\\n                for (; i < length; i++) {\\n                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\\n                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\\n                    } else {\\n                        --remaining;\\n                    }\\n                }\\n            }\\n\\n            // if we\\'re not waiting on anything, resolve the master\\n            if (!remaining) {\\n                deferred.resolveWith(resolveContexts, resolveValues);\\n            }\\n\\n            return deferred.promise();\\n        }\\n    });\\n\\n    // The deferred used on DOM ready\\n    var readyList;\\n\\n    jQuery.fn.ready = function (fn) {\\n        // Add the callback\\n        jQuery.ready.promise().done(fn);\\n\\n        return this;\\n    };\\n\\n    jQuery.extend({\\n        // Is the DOM ready to be used? Set to true once it occurs.\\n        isReady: false,\\n\\n        // A counter to track how many items to wait for before\\n        // the ready event fires. See #6781\\n        readyWait: 1,\\n\\n        // Hold (or release) the ready event\\n        holdReady: function holdReady(hold) {\\n            if (hold) {\\n                jQuery.readyWait++;\\n            } else {\\n                jQuery.ready(true);\\n            }\\n        },\\n\\n        // Handle when the DOM is ready\\n        ready: function ready(wait) {\\n\\n            // Abort if there are pending holds or we\\'re already ready\\n            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\\n                return;\\n            }\\n\\n            // Remember that the DOM is ready\\n            jQuery.isReady = true;\\n\\n            // If a normal DOM Ready event fired, decrement, and wait if need be\\n            if (wait !== true && --jQuery.readyWait > 0) {\\n                return;\\n            }\\n\\n            // If there are functions bound, to execute\\n            readyList.resolveWith(document, [jQuery]);\\n\\n            // Trigger any bound ready events\\n            if (jQuery.fn.triggerHandler) {\\n                jQuery(document).triggerHandler(\"ready\");\\n                jQuery(document).off(\"ready\");\\n            }\\n        }\\n    });\\n\\n    /**\\r\\n     * The ready event handler and self cleanup method\\r\\n     */\\n    function completed() {\\n        document.removeEventListener(\"DOMContentLoaded\", completed, false);\\n        window.removeEventListener(\"load\", completed, false);\\n        jQuery.ready();\\n    }\\n\\n    jQuery.ready.promise = function (obj) {\\n        if (!readyList) {\\n\\n            readyList = jQuery.Deferred();\\n\\n            // Catch cases where $(document).ready() is called after the browser event has already occurred.\\n            // we once tried to use readyState \"interactive\" here, but it caused issues like the one\\n            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\\n            if (document.readyState === \"complete\") {\\n                // Handle it asynchronously to allow scripts the opportunity to delay ready\\n                setTimeout(jQuery.ready);\\n            } else {\\n\\n                // Use the handy event callback\\n                document.addEventListener(\"DOMContentLoaded\", completed, false);\\n\\n                // A fallback to window.onload, that will always work\\n                window.addEventListener(\"load\", completed, false);\\n            }\\n        }\\n        return readyList.promise(obj);\\n    };\\n\\n    // Kick off the DOM ready check even if the user does not\\n    jQuery.ready.promise();\\n\\n    // Multifunctional method to get and set values of a collection\\n    // The value/s can optionally be executed if it\\'s a function\\n    var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {\\n        var i = 0,\\n            len = elems.length,\\n            bulk = key == null;\\n\\n        // Sets many values\\n        if (jQuery.type(key) === \"object\") {\\n            chainable = true;\\n            for (i in key) {\\n                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\\n            }\\n\\n            // Sets one value\\n        } else if (value !== undefined) {\\n            chainable = true;\\n\\n            if (!jQuery.isFunction(value)) {\\n                raw = true;\\n            }\\n\\n            if (bulk) {\\n                // Bulk operations run against the entire set\\n                if (raw) {\\n                    fn.call(elems, value);\\n                    fn = null;\\n\\n                    // ...except when executing function values\\n                } else {\\n                    bulk = fn;\\n                    fn = function fn(elem, key, value) {\\n                        return bulk.call(jQuery(elem), value);\\n                    };\\n                }\\n            }\\n\\n            if (fn) {\\n                for (; i < len; i++) {\\n                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\\n                }\\n            }\\n        }\\n\\n        return chainable ? elems :\\n\\n        // Gets\\n        bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;\\n    };\\n\\n    /**\\r\\n     * Determines whether an object can have data\\r\\n     */\\n    jQuery.acceptData = function (owner) {\\n        // Accepts only:\\n        //  - Node\\n        //    - Node.ELEMENT_NODE\\n        //    - Node.DOCUMENT_NODE\\n        //  - Object\\n        //    - Any\\n        /* jshint -W018 */\\n        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\\n    };\\n\\n    function Data() {\\n        // Support: Android < 4,\\n        // Old WebKit does not have Object.preventExtensions/freeze method,\\n        // return new empty object instead with no [[set]] accessor\\n        Object.defineProperty(this.cache = {}, 0, {\\n            get: function get() {\\n                return {};\\n            }\\n        });\\n\\n        this.expando = jQuery.expando + Math.random();\\n    }\\n\\n    Data.uid = 1;\\n    Data.accepts = jQuery.acceptData;\\n\\n    Data.prototype = {\\n        key: function key(owner) {\\n            // We can accept data for non-element nodes in modern browsers,\\n            // but we should not, see #8335.\\n            // Always return the key for a frozen object.\\n            if (!Data.accepts(owner)) {\\n                return 0;\\n            }\\n\\n            var descriptor = {},\\n\\n            // Check if the owner object already has a cache key\\n            unlock = owner[this.expando];\\n\\n            // If not, create one\\n            if (!unlock) {\\n                unlock = Data.uid++;\\n\\n                // Secure it in a non-enumerable, non-writable property\\n                try {\\n                    descriptor[this.expando] = { value: unlock };\\n                    Object.defineProperties(owner, descriptor);\\n\\n                    // Support: Android < 4\\n                    // Fallback to a less secure definition\\n                } catch (e) {\\n                    descriptor[this.expando] = unlock;\\n                    jQuery.extend(owner, descriptor);\\n                }\\n            }\\n\\n            // Ensure the cache object\\n            if (!this.cache[unlock]) {\\n                this.cache[unlock] = {};\\n            }\\n\\n            return unlock;\\n        },\\n        set: function set(owner, data, value) {\\n            var prop,\\n\\n            // There may be an unlock assigned to this node,\\n            // if there is no entry for this \"owner\", create one inline\\n            // and set the unlock as though an owner entry had always existed\\n            unlock = this.key(owner),\\n                cache = this.cache[unlock];\\n\\n            // Handle: [ owner, key, value ] args\\n            if (typeof data === \"string\") {\\n                cache[data] = value;\\n\\n                // Handle: [ owner, { properties } ] args\\n            } else {\\n                // Fresh assignments by object are shallow copied\\n                if (jQuery.isEmptyObject(cache)) {\\n                    jQuery.extend(this.cache[unlock], data);\\n                    // Otherwise, copy the properties one-by-one to the cache object\\n                } else {\\n                    for (prop in data) {\\n                        cache[prop] = data[prop];\\n                    }\\n                }\\n            }\\n            return cache;\\n        },\\n        get: function get(owner, key) {\\n            // Either a valid cache is found, or will be created.\\n            // New caches will be created and the unlock returned,\\n            // allowing direct access to the newly created\\n            // empty data object. A valid owner object must be provided.\\n            var cache = this.cache[this.key(owner)];\\n\\n            return key === undefined ? cache : cache[key];\\n        },\\n        access: function access(owner, key, value) {\\n            var stored;\\n            // In cases where either:\\n            //\\n            //   1. No key was specified\\n            //   2. A string key was specified, but no value provided\\n            //\\n            // Take the \"read\" path and allow the get method to determine\\n            // which value to return, respectively either:\\n            //\\n            //   1. The entire cache object\\n            //   2. The data stored at the key\\n            //\\n            if (key === undefined || key && typeof key === \"string\" && value === undefined) {\\n\\n                stored = this.get(owner, key);\\n\\n                return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));\\n            }\\n\\n            // [*]When the key is not a string, or both a key and value\\n            // are specified, set or extend (existing objects) with either:\\n            //\\n            //   1. An object of properties\\n            //   2. A key and value\\n            //\\n            this.set(owner, key, value);\\n\\n            // Since the \"set\" path can have two possible entry points\\n            // return the expected data based on which path was taken[*]\\n            return value !== undefined ? value : key;\\n        },\\n        remove: function remove(owner, key) {\\n            var i,\\n                name,\\n                camel,\\n                unlock = this.key(owner),\\n                cache = this.cache[unlock];\\n\\n            if (key === undefined) {\\n                this.cache[unlock] = {};\\n            } else {\\n                // Support array or space separated string of keys\\n                if (jQuery.isArray(key)) {\\n                    // If \"name\" is an array of keys...\\n                    // When data is initially created, via (\"key\", \"val\") signature,\\n                    // keys will be converted to camelCase.\\n                    // Since there is no way to tell _how_ a key was added, remove\\n                    // both plain key and camelCase key. #12786\\n                    // This will only penalize the array argument path.\\n                    name = key.concat(key.map(jQuery.camelCase));\\n                } else {\\n                    camel = jQuery.camelCase(key);\\n                    // Try the string as a key before any manipulation\\n                    if (key in cache) {\\n                        name = [key, camel];\\n                    } else {\\n                        // If a key with the spaces exists, use it.\\n                        // Otherwise, create an array by matching non-whitespace\\n                        name = camel;\\n                        name = name in cache ? [name] : name.match(rnotwhite) || [];\\n                    }\\n                }\\n\\n                i = name.length;\\n                while (i--) {\\n                    delete cache[name[i]];\\n                }\\n            }\\n        },\\n        hasData: function hasData(owner) {\\n            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});\\n        },\\n        discard: function discard(owner) {\\n            if (owner[this.expando]) {\\n                delete this.cache[owner[this.expando]];\\n            }\\n        }\\n    };\\n    var data_priv = new Data();\\n\\n    var data_user = new Data();\\n\\n    /*\\r\\n    \\tImplementation Summary\\r\\n      \\t1. Enforce API surface and semantic compatibility with 1.9.x branch\\r\\n    \\t2. Improve the module\\'s maintainability by reducing the storage\\r\\n    \\t\\tpaths to a single mechanism.\\r\\n    \\t3. Use the same single mechanism to support \"private\" and \"user\" data.\\r\\n    \\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\\r\\n    \\t5. Avoid exposing implementation details on user objects (eg. expando properties)\\r\\n    \\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\\r\\n    */\\n    var rbrace = /^(?:\\\\{[\\\\w\\\\W]*\\\\}|\\\\[[\\\\w\\\\W]*\\\\])$/,\\n        rmultiDash = /([A-Z])/g;\\n\\n    function dataAttr(elem, key, data) {\\n        var name;\\n\\n        // If nothing was found internally, try to fetch any\\n        // data from the HTML5 data-* attribute\\n        if (data === undefined && elem.nodeType === 1) {\\n            name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\\n            data = elem.getAttribute(name);\\n\\n            if (typeof data === \"string\") {\\n                try {\\n                    data = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null :\\n                    // Only convert to a number if it doesn\\'t change the string\\n                    +data + \"\" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\\n                } catch (e) {}\\n\\n                // Make sure we set the data so it isn\\'t changed later\\n                data_user.set(elem, key, data);\\n            } else {\\n                data = undefined;\\n            }\\n        }\\n        return data;\\n    }\\n\\n    jQuery.extend({\\n        hasData: function hasData(elem) {\\n            return data_user.hasData(elem) || data_priv.hasData(elem);\\n        },\\n\\n        data: function data(elem, name, _data) {\\n            return data_user.access(elem, name, _data);\\n        },\\n\\n        removeData: function removeData(elem, name) {\\n            data_user.remove(elem, name);\\n        },\\n\\n        // TODO: Now that all calls to _data and _removeData have been replaced\\n        // with direct calls to data_priv methods, these can be deprecated.\\n        _data: function _data(elem, name, data) {\\n            return data_priv.access(elem, name, data);\\n        },\\n\\n        _removeData: function _removeData(elem, name) {\\n            data_priv.remove(elem, name);\\n        }\\n    });\\n\\n    jQuery.fn.extend({\\n        data: function data(key, value) {\\n            var i,\\n                name,\\n                data,\\n                elem = this[0],\\n                attrs = elem && elem.attributes;\\n\\n            // Gets all values\\n            if (key === undefined) {\\n                if (this.length) {\\n                    data = data_user.get(elem);\\n\\n                    if (elem.nodeType === 1 && !data_priv.get(elem, \"hasDataAttrs\")) {\\n                        i = attrs.length;\\n                        while (i--) {\\n\\n                            // Support: IE11+\\n                            // The attrs elements can be null (#14894)\\n                            if (attrs[i]) {\\n                                name = attrs[i].name;\\n                                if (name.indexOf(\"data-\") === 0) {\\n                                    name = jQuery.camelCase(name.slice(5));\\n                                    dataAttr(elem, name, data[name]);\\n                                }\\n                            }\\n                        }\\n                        data_priv.set(elem, \"hasDataAttrs\", true);\\n                    }\\n                }\\n\\n                return data;\\n            }\\n\\n            // Sets multiple values\\n            if ((typeof key === \"undefined\" ? \"undefined\" : _typeof(key)) === \"object\") {\\n                return this.each(function () {\\n                    data_user.set(this, key);\\n                });\\n            }\\n\\n            return access(this, function (value) {\\n                var data,\\n                    camelKey = jQuery.camelCase(key);\\n\\n                // The calling jQuery object (element matches) is not empty\\n                // (and therefore has an element appears at this[ 0 ]) and the\\n                // `value` parameter was not undefined. An empty jQuery object\\n                // will result in `undefined` for elem = this[ 0 ] which will\\n                // throw an exception if an attempt to read a data cache is made.\\n                if (elem && value === undefined) {\\n                    // Attempt to get data from the cache\\n                    // with the key as-is\\n                    data = data_user.get(elem, key);\\n                    if (data !== undefined) {\\n                        return data;\\n                    }\\n\\n                    // Attempt to get data from the cache\\n                    // with the key camelized\\n                    data = data_user.get(elem, camelKey);\\n                    if (data !== undefined) {\\n                        return data;\\n                    }\\n\\n                    // Attempt to \"discover\" the data in\\n                    // HTML5 custom data-* attrs\\n                    data = dataAttr(elem, camelKey, undefined);\\n                    if (data !== undefined) {\\n                        return data;\\n                    }\\n\\n                    // We tried really hard, but the data doesn\\'t exist.\\n                    return;\\n                }\\n\\n                // Set the data...\\n                this.each(function () {\\n                    // First, attempt to store a copy or reference of any\\n                    // data that might\\'ve been store with a camelCased key.\\n                    var data = data_user.get(this, camelKey);\\n\\n                    // For HTML5 data-* attribute interop, we have to\\n                    // store property names with dashes in a camelCase form.\\n                    // This might not apply to all properties...*\\n                    data_user.set(this, camelKey, value);\\n\\n                    // *... In the case of properties that might _actually_\\n                    // have dashes, we need to also store a copy of that\\n                    // unchanged property.\\n                    if (key.indexOf(\"-\") !== -1 && data !== undefined) {\\n                        data_user.set(this, key, value);\\n                    }\\n                });\\n            }, null, value, arguments.length > 1, null, true);\\n        },\\n\\n        removeData: function removeData(key) {\\n            return this.each(function () {\\n                data_user.remove(this, key);\\n            });\\n        }\\n    });\\n\\n    jQuery.extend({\\n        queue: function queue(elem, type, data) {\\n            var queue;\\n\\n            if (elem) {\\n                type = (type || \"fx\") + \"queue\";\\n                queue = data_priv.get(elem, type);\\n\\n                // Speed up dequeue by getting out quickly if this is just a lookup\\n                if (data) {\\n                    if (!queue || jQuery.isArray(data)) {\\n                        queue = data_priv.access(elem, type, jQuery.makeArray(data));\\n                    } else {\\n                        queue.push(data);\\n                    }\\n                }\\n                return queue || [];\\n            }\\n        },\\n\\n        dequeue: function dequeue(elem, type) {\\n            type = type || \"fx\";\\n\\n            var queue = jQuery.queue(elem, type),\\n                startLength = queue.length,\\n                fn = queue.shift(),\\n                hooks = jQuery._queueHooks(elem, type),\\n                next = function next() {\\n                jQuery.dequeue(elem, type);\\n            };\\n\\n            // If the fx queue is dequeued, always remove the progress sentinel\\n            if (fn === \"inprogress\") {\\n                fn = queue.shift();\\n                startLength--;\\n            }\\n\\n            if (fn) {\\n\\n                // Add a progress sentinel to prevent the fx queue from being\\n                // automatically dequeued\\n                if (type === \"fx\") {\\n                    queue.unshift(\"inprogress\");\\n                }\\n\\n                // clear up the last queue stop function\\n                delete hooks.stop;\\n                fn.call(elem, next, hooks);\\n            }\\n\\n            if (!startLength && hooks) {\\n                hooks.empty.fire();\\n            }\\n        },\\n\\n        // not intended for public consumption - generates a queueHooks object, or returns the current one\\n        _queueHooks: function _queueHooks(elem, type) {\\n            var key = type + \"queueHooks\";\\n            return data_priv.get(elem, key) || data_priv.access(elem, key, {\\n                empty: jQuery.Callbacks(\"once memory\").add(function () {\\n                    data_priv.remove(elem, [type + \"queue\", key]);\\n                })\\n            });\\n        }\\n    });\\n\\n    jQuery.fn.extend({\\n        queue: function queue(type, data) {\\n            var setter = 2;\\n\\n            if (typeof type !== \"string\") {\\n                data = type;\\n                type = \"fx\";\\n                setter--;\\n            }\\n\\n            if (arguments.length < setter) {\\n                return jQuery.queue(this[0], type);\\n            }\\n\\n            return data === undefined ? this : this.each(function () {\\n                var queue = jQuery.queue(this, type, data);\\n\\n                // ensure a hooks for this queue\\n                jQuery._queueHooks(this, type);\\n\\n                if (type === \"fx\" && queue[0] !== \"inprogress\") {\\n                    jQuery.dequeue(this, type);\\n                }\\n            });\\n        },\\n        dequeue: function dequeue(type) {\\n            return this.each(function () {\\n                jQuery.dequeue(this, type);\\n            });\\n        },\\n        clearQueue: function clearQueue(type) {\\n            return this.queue(type || \"fx\", []);\\n        },\\n        // Get a promise resolved when queues of a certain type\\n        // are emptied (fx is the type by default)\\n        promise: function promise(type, obj) {\\n            var tmp,\\n                count = 1,\\n                defer = jQuery.Deferred(),\\n                elements = this,\\n                i = this.length,\\n                resolve = function resolve() {\\n                if (! --count) {\\n                    defer.resolveWith(elements, [elements]);\\n                }\\n            };\\n\\n            if (typeof type !== \"string\") {\\n                obj = type;\\n                type = undefined;\\n            }\\n            type = type || \"fx\";\\n\\n            while (i--) {\\n                tmp = data_priv.get(elements[i], type + \"queueHooks\");\\n                if (tmp && tmp.empty) {\\n                    count++;\\n                    tmp.empty.add(resolve);\\n                }\\n            }\\n            resolve();\\n            return defer.promise(obj);\\n        }\\n    });\\n    var pnum = /[+-]?(?:\\\\d*\\\\.|)\\\\d+(?:[eE][+-]?\\\\d+|)/.source;\\n\\n    var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\\n\\n    var isHidden = function isHidden(elem, el) {\\n        // isHidden might be called from jQuery#filter function;\\n        // in that case, element will be second argument\\n        elem = el || elem;\\n        return jQuery.css(elem, \"display\") === \"none\" || !jQuery.contains(elem.ownerDocument, elem);\\n    };\\n\\n    var rcheckableType = /^(?:checkbox|radio)$/i;\\n\\n    (function () {\\n        var fragment = document.createDocumentFragment(),\\n            div = fragment.appendChild(document.createElement(\"div\")),\\n            input = document.createElement(\"input\");\\n\\n        // #11217 - WebKit loses check when the name is after the checked attribute\\n        // Support: Windows Web Apps (WWA)\\n        // `name` and `type` need .setAttribute for WWA\\n        input.setAttribute(\"type\", \"radio\");\\n        input.setAttribute(\"checked\", \"checked\");\\n        input.setAttribute(\"name\", \"t\");\\n\\n        div.appendChild(input);\\n\\n        // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3\\n        // old WebKit doesn\\'t clone checked state correctly in fragments\\n        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\\n\\n        // Make sure textarea (and checkbox) defaultValue is properly cloned\\n        // Support: IE9-IE11+\\n        div.innerHTML = \"<textarea>x</textarea>\";\\n        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\\n    })();\\n    var strundefined =  true ? \"undefined\" : undefined;\\n\\n    support.focusinBubbles = \"onfocusin\" in window;\\n\\n    var rkeyEvent = /^key/,\\n        rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\\n        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\\n        rtypenamespace = /^([^.]*)(?:\\\\.(.+)|)$/;\\n\\n    function returnTrue() {\\n        return true;\\n    }\\n\\n    function returnFalse() {\\n        return false;\\n    }\\n\\n    function safeActiveElement() {\\n        try {\\n            return document.activeElement;\\n        } catch (err) {}\\n    }\\n\\n    /*\\r\\n     * Helper functions for managing events -- not part of the public interface.\\r\\n     * Props to Dean Edwards\\' addEvent library for many of the ideas.\\r\\n     */\\n    jQuery.event = {\\n\\n        global: {},\\n\\n        add: function add(elem, types, handler, data, selector) {\\n\\n            var handleObjIn,\\n                eventHandle,\\n                tmp,\\n                events,\\n                t,\\n                handleObj,\\n                special,\\n                handlers,\\n                type,\\n                namespaces,\\n                origType,\\n                elemData = data_priv.get(elem);\\n\\n            // Don\\'t attach events to noData or text/comment nodes (but allow plain objects)\\n            if (!elemData) {\\n                return;\\n            }\\n\\n            // Caller can pass in an object of custom data in lieu of the handler\\n            if (handler.handler) {\\n                handleObjIn = handler;\\n                handler = handleObjIn.handler;\\n                selector = handleObjIn.selector;\\n            }\\n\\n            // Make sure that the handler has a unique ID, used to find/remove it later\\n            if (!handler.guid) {\\n                handler.guid = jQuery.guid++;\\n            }\\n\\n            // Init the element\\'s event structure and main handler, if this is the first\\n            if (!(events = elemData.events)) {\\n                events = elemData.events = {};\\n            }\\n            if (!(eventHandle = elemData.handle)) {\\n                eventHandle = elemData.handle = function (e) {\\n                    // Discard the second event of a jQuery.event.trigger() and\\n                    // when an event is called after a page has unloaded\\n                    return (typeof jQuery === \"undefined\" ? \"undefined\" : _typeof(jQuery)) !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\\n                };\\n            }\\n\\n            // Handle multiple events separated by a space\\n            types = (types || \"\").match(rnotwhite) || [\"\"];\\n            t = types.length;\\n            while (t--) {\\n                tmp = rtypenamespace.exec(types[t]) || [];\\n                type = origType = tmp[1];\\n                namespaces = (tmp[2] || \"\").split(\".\").sort();\\n\\n                // There *must* be a type, no attaching namespace-only handlers\\n                if (!type) {\\n                    continue;\\n                }\\n\\n                // If event changes its type, use the special event handlers for the changed type\\n                special = jQuery.event.special[type] || {};\\n\\n                // If selector defined, determine special event api type, otherwise given type\\n                type = (selector ? special.delegateType : special.bindType) || type;\\n\\n                // Update special based on newly reset type\\n                special = jQuery.event.special[type] || {};\\n\\n                // handleObj is passed to all event handlers\\n                handleObj = jQuery.extend({\\n                    type: type,\\n                    origType: origType,\\n                    data: data,\\n                    handler: handler,\\n                    guid: handler.guid,\\n                    selector: selector,\\n                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),\\n                    namespace: namespaces.join(\".\")\\n                }, handleObjIn);\\n\\n                // Init the event handler queue if we\\'re the first\\n                if (!(handlers = events[type])) {\\n                    handlers = events[type] = [];\\n                    handlers.delegateCount = 0;\\n\\n                    // Only use addEventListener if the special events handler returns false\\n                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\\n                        if (elem.addEventListener) {\\n                            elem.addEventListener(type, eventHandle, false);\\n                        }\\n                    }\\n                }\\n\\n                if (special.add) {\\n                    special.add.call(elem, handleObj);\\n\\n                    if (!handleObj.handler.guid) {\\n                        handleObj.handler.guid = handler.guid;\\n                    }\\n                }\\n\\n                // Add to the element\\'s handler list, delegates in front\\n                if (selector) {\\n                    handlers.splice(handlers.delegateCount++, 0, handleObj);\\n                } else {\\n                    handlers.push(handleObj);\\n                }\\n\\n                // Keep track of which events have ever been used, for event optimization\\n                jQuery.event.global[type] = true;\\n            }\\n        },\\n\\n        // Detach an event or set of events from an element\\n        remove: function remove(elem, types, handler, selector, mappedTypes) {\\n\\n            var j,\\n                origCount,\\n                tmp,\\n                events,\\n                t,\\n                handleObj,\\n                special,\\n                handlers,\\n                type,\\n                namespaces,\\n                origType,\\n                elemData = data_priv.hasData(elem) && data_priv.get(elem);\\n\\n            if (!elemData || !(events = elemData.events)) {\\n                return;\\n            }\\n\\n            // Once for each type.namespace in types; type may be omitted\\n            types = (types || \"\").match(rnotwhite) || [\"\"];\\n            t = types.length;\\n            while (t--) {\\n                tmp = rtypenamespace.exec(types[t]) || [];\\n                type = origType = tmp[1];\\n                namespaces = (tmp[2] || \"\").split(\".\").sort();\\n\\n                // Unbind all events (on this namespace, if provided) for the element\\n                if (!type) {\\n                    for (type in events) {\\n                        jQuery.event.remove(elem, type + types[t], handler, selector, true);\\n                    }\\n                    continue;\\n                }\\n\\n                special = jQuery.event.special[type] || {};\\n                type = (selector ? special.delegateType : special.bindType) || type;\\n                handlers = events[type] || [];\\n                tmp = tmp[2] && new RegExp(\"(^|\\\\\\\\.)\" + namespaces.join(\"\\\\\\\\.(?:.*\\\\\\\\.|)\") + \"(\\\\\\\\.|$)\");\\n\\n                // Remove matching events\\n                origCount = j = handlers.length;\\n                while (j--) {\\n                    handleObj = handlers[j];\\n\\n                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\\n                        handlers.splice(j, 1);\\n\\n                        if (handleObj.selector) {\\n                            handlers.delegateCount--;\\n                        }\\n                        if (special.remove) {\\n                            special.remove.call(elem, handleObj);\\n                        }\\n                    }\\n                }\\n\\n                // Remove generic event handler if we removed something and no more handlers exist\\n                // (avoids potential for endless recursion during removal of special event handlers)\\n                if (origCount && !handlers.length) {\\n                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\\n                        jQuery.removeEvent(elem, type, elemData.handle);\\n                    }\\n\\n                    delete events[type];\\n                }\\n            }\\n\\n            // Remove the expando if it\\'s no longer used\\n            if (jQuery.isEmptyObject(events)) {\\n                delete elemData.handle;\\n                data_priv.remove(elem, \"events\");\\n            }\\n        },\\n\\n        trigger: function trigger(event, data, elem, onlyHandlers) {\\n\\n            var i,\\n                cur,\\n                tmp,\\n                bubbleType,\\n                ontype,\\n                handle,\\n                special,\\n                eventPath = [elem || document],\\n                type = hasOwn.call(event, \"type\") ? event.type : event,\\n                namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\\n\\n            cur = tmp = elem = elem || document;\\n\\n            // Don\\'t do events on text and comment nodes\\n            if (elem.nodeType === 3 || elem.nodeType === 8) {\\n                return;\\n            }\\n\\n            // focus/blur morphs to focusin/out; ensure we\\'re not firing them right now\\n            if (rfocusMorph.test(type + jQuery.event.triggered)) {\\n                return;\\n            }\\n\\n            if (type.indexOf(\".\") >= 0) {\\n                // Namespaced trigger; create a regexp to match event type in handle()\\n                namespaces = type.split(\".\");\\n                type = namespaces.shift();\\n                namespaces.sort();\\n            }\\n            ontype = type.indexOf(\":\") < 0 && \"on\" + type;\\n\\n            // Caller can pass in a jQuery.Event object, Object, or just an event type string\\n            event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === \"undefined\" ? \"undefined\" : _typeof(event)) === \"object\" && event);\\n\\n            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\\n            event.isTrigger = onlyHandlers ? 2 : 3;\\n            event.namespace = namespaces.join(\".\");\\n            event.namespace_re = event.namespace ? new RegExp(\"(^|\\\\\\\\.)\" + namespaces.join(\"\\\\\\\\.(?:.*\\\\\\\\.|)\") + \"(\\\\\\\\.|$)\") : null;\\n\\n            // Clean up the event in case it is being reused\\n            event.result = undefined;\\n            if (!event.target) {\\n                event.target = elem;\\n            }\\n\\n            // Clone any incoming data and prepend the event, creating the handler arg list\\n            data = data == null ? [event] : jQuery.makeArray(data, [event]);\\n\\n            // Allow special events to draw outside the lines\\n            special = jQuery.event.special[type] || {};\\n            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\\n                return;\\n            }\\n\\n            // Determine event propagation path in advance, per W3C events spec (#9951)\\n            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\\n            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\\n\\n                bubbleType = special.delegateType || type;\\n                if (!rfocusMorph.test(bubbleType + type)) {\\n                    cur = cur.parentNode;\\n                }\\n                for (; cur; cur = cur.parentNode) {\\n                    eventPath.push(cur);\\n                    tmp = cur;\\n                }\\n\\n                // Only add window if we got to document (e.g., not plain obj or detached DOM)\\n                if (tmp === (elem.ownerDocument || document)) {\\n                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);\\n                }\\n            }\\n\\n            // Fire handlers on the event path\\n            i = 0;\\n            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\\n\\n                event.type = i > 1 ? bubbleType : special.bindType || type;\\n\\n                // jQuery handler\\n                handle = (data_priv.get(cur, \"events\") || {})[event.type] && data_priv.get(cur, \"handle\");\\n                if (handle) {\\n                    handle.apply(cur, data);\\n                }\\n\\n                // Native handler\\n                handle = ontype && cur[ontype];\\n                if (handle && handle.apply && jQuery.acceptData(cur)) {\\n                    event.result = handle.apply(cur, data);\\n                    if (event.result === false) {\\n                        event.preventDefault();\\n                    }\\n                }\\n            }\\n            event.type = type;\\n\\n            // If nobody prevented the default action, do it now\\n            if (!onlyHandlers && !event.isDefaultPrevented()) {\\n\\n                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {\\n\\n                    // Call a native DOM method on the target with the same name name as the event.\\n                    // Don\\'t do default actions on window, that\\'s where global variables be (#6170)\\n                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {\\n\\n                        // Don\\'t re-trigger an onFOO event when we call its FOO() method\\n                        tmp = elem[ontype];\\n\\n                        if (tmp) {\\n                            elem[ontype] = null;\\n                        }\\n\\n                        // Prevent re-triggering of the same event, since we already bubbled it above\\n                        jQuery.event.triggered = type;\\n                        elem[type]();\\n                        jQuery.event.triggered = undefined;\\n\\n                        if (tmp) {\\n                            elem[ontype] = tmp;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return event.result;\\n        },\\n\\n        dispatch: function dispatch(event) {\\n\\n            // Make a writable jQuery.Event from the native event object\\n            event = jQuery.event.fix(event);\\n\\n            var i,\\n                j,\\n                ret,\\n                matched,\\n                handleObj,\\n                handlerQueue = [],\\n                args = _slice.call(arguments),\\n                handlers = (data_priv.get(this, \"events\") || {})[event.type] || [],\\n                special = jQuery.event.special[event.type] || {};\\n\\n            // Use the fix-ed jQuery.Event rather than the (read-only) native event\\n            args[0] = event;\\n            event.delegateTarget = this;\\n\\n            // Call the preDispatch hook for the mapped type, and let it bail if desired\\n            if (special.preDispatch && special.preDispatch.call(this, event) === false) {\\n                return;\\n            }\\n\\n            // Determine handlers\\n            handlerQueue = jQuery.event.handlers.call(this, event, handlers);\\n\\n            // Run delegates first; they may want to stop propagation beneath us\\n            i = 0;\\n            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\\n                event.currentTarget = matched.elem;\\n\\n                j = 0;\\n                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\\n\\n                    // Triggered event must either 1) have no namespace, or\\n                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\\n                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\\n\\n                        event.handleObj = handleObj;\\n                        event.data = handleObj.data;\\n\\n                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\\n\\n                        if (ret !== undefined) {\\n                            if ((event.result = ret) === false) {\\n                                event.preventDefault();\\n                                event.stopPropagation();\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // Call the postDispatch hook for the mapped type\\n            if (special.postDispatch) {\\n                special.postDispatch.call(this, event);\\n            }\\n\\n            return event.result;\\n        },\\n\\n        handlers: function handlers(event, _handlers) {\\n            var i,\\n                matches,\\n                sel,\\n                handleObj,\\n                handlerQueue = [],\\n                delegateCount = _handlers.delegateCount,\\n                cur = event.target;\\n\\n            // Find delegate handlers\\n            // Black-hole SVG <use> instance trees (#13180)\\n            // Avoid non-left-click bubbling in Firefox (#3861)\\n            if (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\\n\\n                for (; cur !== this; cur = cur.parentNode || this) {\\n\\n                    // Don\\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\\n                    if (cur.disabled !== true || event.type !== \"click\") {\\n                        matches = [];\\n                        for (i = 0; i < delegateCount; i++) {\\n                            handleObj = _handlers[i];\\n\\n                            // Don\\'t conflict with Object.prototype properties (#13203)\\n                            sel = handleObj.selector + \" \";\\n\\n                            if (matches[sel] === undefined) {\\n                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\\n                            }\\n                            if (matches[sel]) {\\n                                matches.push(handleObj);\\n                            }\\n                        }\\n                        if (matches.length) {\\n                            handlerQueue.push({ elem: cur, handlers: matches });\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // Add the remaining (directly-bound) handlers\\n            if (delegateCount < _handlers.length) {\\n                handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });\\n            }\\n\\n            return handlerQueue;\\n        },\\n\\n        // Includes some event props shared by KeyEvent and MouseEvent\\n        props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\\n\\n        fixHooks: {},\\n\\n        keyHooks: {\\n            props: \"char charCode key keyCode\".split(\" \"),\\n            filter: function filter(event, original) {\\n\\n                // Add which for key events\\n                if (event.which == null) {\\n                    event.which = original.charCode != null ? original.charCode : original.keyCode;\\n                }\\n\\n                return event;\\n            }\\n        },\\n\\n        mouseHooks: {\\n            props: \"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\\n            filter: function filter(event, original) {\\n                var eventDoc,\\n                    doc,\\n                    body,\\n                    button = original.button;\\n\\n                // Calculate pageX/Y if missing and clientX/Y available\\n                if (event.pageX == null && original.clientX != null) {\\n                    eventDoc = event.target.ownerDocument || document;\\n                    doc = eventDoc.documentElement;\\n                    body = eventDoc.body;\\n\\n                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\\n                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\\n                }\\n\\n                // Add which for click: 1 === left; 2 === middle; 3 === right\\n                // Note: button is not normalized, so don\\'t use it\\n                if (!event.which && button !== undefined) {\\n                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\\n                }\\n\\n                return event;\\n            }\\n        },\\n\\n        fix: function fix(event) {\\n            if (event[jQuery.expando]) {\\n                return event;\\n            }\\n\\n            // Create a writable copy of the event object and normalize some properties\\n            var i,\\n                prop,\\n                copy,\\n                type = event.type,\\n                originalEvent = event,\\n                fixHook = this.fixHooks[type];\\n\\n            if (!fixHook) {\\n                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\\n            }\\n            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\\n\\n            event = new jQuery.Event(originalEvent);\\n\\n            i = copy.length;\\n            while (i--) {\\n                prop = copy[i];\\n                event[prop] = originalEvent[prop];\\n            }\\n\\n            // Support: Cordova 2.5 (WebKit) (#13255)\\n            // All events should have a target; Cordova deviceready doesn\\'t\\n            if (!event.target) {\\n                event.target = document;\\n            }\\n\\n            // Support: Safari 6.0+, Chrome < 28\\n            // Target should not be a text node (#504, #13143)\\n            if (event.target.nodeType === 3) {\\n                event.target = event.target.parentNode;\\n            }\\n\\n            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;\\n        },\\n\\n        special: {\\n            load: {\\n                // Prevent triggered image.load events from bubbling to window.load\\n                noBubble: true\\n            },\\n            focus: {\\n                // Fire native event if possible so blur/focus sequence is correct\\n                trigger: function trigger() {\\n                    if (this !== safeActiveElement() && this.focus) {\\n                        this.focus();\\n                        return false;\\n                    }\\n                },\\n                delegateType: \"focusin\"\\n            },\\n            blur: {\\n                trigger: function trigger() {\\n                    if (this === safeActiveElement() && this.blur) {\\n                        this.blur();\\n                        return false;\\n                    }\\n                },\\n                delegateType: \"focusout\"\\n            },\\n            click: {\\n                // For checkbox, fire native event so checked state will be right\\n                trigger: function trigger() {\\n                    if (this.type === \"checkbox\" && this.click && jQuery.nodeName(this, \"input\")) {\\n                        this.click();\\n                        return false;\\n                    }\\n                },\\n\\n                // For cross-browser consistency, don\\'t fire native .click() on links\\n                _default: function _default(event) {\\n                    return jQuery.nodeName(event.target, \"a\");\\n                }\\n            },\\n\\n            beforeunload: {\\n                postDispatch: function postDispatch(event) {\\n\\n                    // Support: Firefox 20+\\n                    // Firefox doesn\\'t alert if the returnValue field is not set.\\n                    if (event.result !== undefined && event.originalEvent) {\\n                        event.originalEvent.returnValue = event.result;\\n                    }\\n                }\\n            }\\n        },\\n\\n        simulate: function simulate(type, elem, event, bubble) {\\n            // Piggyback on a donor event to simulate a different one.\\n            // Fake originalEvent to avoid donor\\'s stopPropagation, but if the\\n            // simulated event prevents default then we do the same on the donor.\\n            var e = jQuery.extend(new jQuery.Event(), event, {\\n                type: type,\\n                isSimulated: true,\\n                originalEvent: {}\\n            });\\n            if (bubble) {\\n                jQuery.event.trigger(e, null, elem);\\n            } else {\\n                jQuery.event.dispatch.call(elem, e);\\n            }\\n            if (e.isDefaultPrevented()) {\\n                event.preventDefault();\\n            }\\n        }\\n    };\\n\\n    jQuery.removeEvent = function (elem, type, handle) {\\n        if (elem.removeEventListener) {\\n            elem.removeEventListener(type, handle, false);\\n        }\\n    };\\n\\n    jQuery.Event = function (src, props) {\\n        // Allow instantiation without the \\'new\\' keyword\\n        if (!(this instanceof jQuery.Event)) {\\n            return new jQuery.Event(src, props);\\n        }\\n\\n        // Event object\\n        if (src && src.type) {\\n            this.originalEvent = src;\\n            this.type = src.type;\\n\\n            // Events bubbling up the document may have been marked as prevented\\n            // by a handler lower down the tree; reflect the correct value.\\n            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\\n            // Support: Android < 4.0\\n            src.returnValue === false ? returnTrue : returnFalse;\\n\\n            // Event type\\n        } else {\\n            this.type = src;\\n        }\\n\\n        // Put explicitly provided properties onto the event object\\n        if (props) {\\n            jQuery.extend(this, props);\\n        }\\n\\n        // Create a timestamp if incoming event doesn\\'t have one\\n        this.timeStamp = src && src.timeStamp || jQuery.now();\\n\\n        // Mark it as fixed\\n        this[jQuery.expando] = true;\\n    };\\n\\n    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\\n    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\\n    jQuery.Event.prototype = {\\n        isDefaultPrevented: returnFalse,\\n        isPropagationStopped: returnFalse,\\n        isImmediatePropagationStopped: returnFalse,\\n\\n        preventDefault: function preventDefault() {\\n            var e = this.originalEvent;\\n\\n            this.isDefaultPrevented = returnTrue;\\n\\n            if (e && e.preventDefault) {\\n                e.preventDefault();\\n            }\\n        },\\n        stopPropagation: function stopPropagation() {\\n            var e = this.originalEvent;\\n\\n            this.isPropagationStopped = returnTrue;\\n\\n            if (e && e.stopPropagation) {\\n                e.stopPropagation();\\n            }\\n        },\\n        stopImmediatePropagation: function stopImmediatePropagation() {\\n            var e = this.originalEvent;\\n\\n            this.isImmediatePropagationStopped = returnTrue;\\n\\n            if (e && e.stopImmediatePropagation) {\\n                e.stopImmediatePropagation();\\n            }\\n\\n            this.stopPropagation();\\n        }\\n    };\\n\\n    // Create mouseenter/leave events using mouseover/out and event-time checks\\n    // Support: Chrome 15+\\n    jQuery.each({\\n        mouseenter: \"mouseover\",\\n        mouseleave: \"mouseout\",\\n        pointerenter: \"pointerover\",\\n        pointerleave: \"pointerout\"\\n    }, function (orig, fix) {\\n        jQuery.event.special[orig] = {\\n            delegateType: fix,\\n            bindType: fix,\\n\\n            handle: function handle(event) {\\n                var ret,\\n                    target = this,\\n                    related = event.relatedTarget,\\n                    handleObj = event.handleObj;\\n\\n                // For mousenter/leave call the handler if related is outside the target.\\n                // NB: No relatedTarget if the mouse left/entered the browser window\\n                if (!related || related !== target && !jQuery.contains(target, related)) {\\n                    event.type = handleObj.origType;\\n                    ret = handleObj.handler.apply(this, arguments);\\n                    event.type = fix;\\n                }\\n                return ret;\\n            }\\n        };\\n    });\\n\\n    // Create \"bubbling\" focus and blur events\\n    // Support: Firefox, Chrome, Safari\\n    if (!support.focusinBubbles) {\\n        jQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\\n\\n            // Attach a single capturing handler on the document while someone wants focusin/focusout\\n            var handler = function handler(event) {\\n                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\\n            };\\n\\n            jQuery.event.special[fix] = {\\n                setup: function setup() {\\n                    var doc = this.ownerDocument || this,\\n                        attaches = data_priv.access(doc, fix);\\n\\n                    if (!attaches) {\\n                        doc.addEventListener(orig, handler, true);\\n                    }\\n                    data_priv.access(doc, fix, (attaches || 0) + 1);\\n                },\\n                teardown: function teardown() {\\n                    var doc = this.ownerDocument || this,\\n                        attaches = data_priv.access(doc, fix) - 1;\\n\\n                    if (!attaches) {\\n                        doc.removeEventListener(orig, handler, true);\\n                        data_priv.remove(doc, fix);\\n                    } else {\\n                        data_priv.access(doc, fix, attaches);\\n                    }\\n                }\\n            };\\n        });\\n    }\\n\\n    jQuery.fn.extend({\\n\\n        on: function on(types, selector, data, fn, /*INTERNAL*/one) {\\n            var origFn, type;\\n\\n            // Types can be a map of types/handlers\\n            if ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\\n                // ( types-Object, selector, data )\\n                if (typeof selector !== \"string\") {\\n                    // ( types-Object, data )\\n                    data = data || selector;\\n                    selector = undefined;\\n                }\\n                for (type in types) {\\n                    this.on(type, selector, data, types[type], one);\\n                }\\n                return this;\\n            }\\n\\n            if (data == null && fn == null) {\\n                // ( types, fn )\\n                fn = selector;\\n                data = selector = undefined;\\n            } else if (fn == null) {\\n                if (typeof selector === \"string\") {\\n                    // ( types, selector, fn )\\n                    fn = data;\\n                    data = undefined;\\n                } else {\\n                    // ( types, data, fn )\\n                    fn = data;\\n                    data = selector;\\n                    selector = undefined;\\n                }\\n            }\\n            if (fn === false) {\\n                fn = returnFalse;\\n            } else if (!fn) {\\n                return this;\\n            }\\n\\n            if (one === 1) {\\n                origFn = fn;\\n                fn = function fn(event) {\\n                    // Can use an empty set, since event contains the info\\n                    jQuery().off(event);\\n                    return origFn.apply(this, arguments);\\n                };\\n                // Use same guid so caller can remove using origFn\\n                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\\n            }\\n            return this.each(function () {\\n                jQuery.event.add(this, types, fn, data, selector);\\n            });\\n        },\\n        one: function one(types, selector, data, fn) {\\n            return this.on(types, selector, data, fn, 1);\\n        },\\n        off: function off(types, selector, fn) {\\n            var handleObj, type;\\n            if (types && types.preventDefault && types.handleObj) {\\n                // ( event )  dispatched jQuery.Event\\n                handleObj = types.handleObj;\\n                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\\n                return this;\\n            }\\n            if ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\\n                // ( types-object [, selector] )\\n                for (type in types) {\\n                    this.off(type, selector, types[type]);\\n                }\\n                return this;\\n            }\\n            if (selector === false || typeof selector === \"function\") {\\n                // ( types [, fn] )\\n                fn = selector;\\n                selector = undefined;\\n            }\\n            if (fn === false) {\\n                fn = returnFalse;\\n            }\\n            return this.each(function () {\\n                jQuery.event.remove(this, types, fn, selector);\\n            });\\n        },\\n\\n        trigger: function trigger(type, data) {\\n            return this.each(function () {\\n                jQuery.event.trigger(type, data, this);\\n            });\\n        },\\n        triggerHandler: function triggerHandler(type, data) {\\n            var elem = this[0];\\n            if (elem) {\\n                return jQuery.event.trigger(type, data, elem, true);\\n            }\\n        }\\n    });\\n\\n    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\\\w:]+)[^>]*)\\\\/>/gi,\\n        rtagName = /<([\\\\w:]+)/,\\n        rhtml = /<|&#?\\\\w+;/,\\n        rnoInnerhtml = /<(?:script|style|link)/i,\\n\\n    // checked=\"checked\" or checked\\n    rchecked = /checked\\\\s*(?:[^=]|=\\\\s*.checked.)/i,\\n        rscriptType = /^$|\\\\/(?:java|ecma)script/i,\\n        rscriptTypeMasked = /^true\\\\/(.*)/,\\n        rcleanScript = /^\\\\s*<!(?:\\\\[CDATA\\\\[|--)|(?:\\\\]\\\\]|--)>\\\\s*$/g,\\n\\n\\n    // We have to close these tags to support XHTML (#13200)\\n    wrapMap = {\\n\\n        // Support: IE 9\\n        option: [1, \"<select multiple=\\'multiple\\'>\", \"</select>\"],\\n\\n        thead: [1, \"<table>\", \"</table>\"],\\n        col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\\n        tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\\n        td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\\n\\n        _default: [0, \"\", \"\"]\\n    };\\n\\n    // Support: IE 9\\n    wrapMap.optgroup = wrapMap.option;\\n\\n    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\\n    wrapMap.th = wrapMap.td;\\n\\n    // Support: 1.x compatibility\\n    // Manipulating tables requires a tbody\\n    function manipulationTarget(elem, content) {\\n        return jQuery.nodeName(elem, \"table\") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\") ? elem.getElementsByTagName(\"tbody\")[0] || elem.appendChild(elem.ownerDocument.createElement(\"tbody\")) : elem;\\n    }\\n\\n    // Replace/restore the type attribute of script elements for safe DOM manipulation\\n    function disableScript(elem) {\\n        elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\\n        return elem;\\n    }\\n\\n    function restoreScript(elem) {\\n        var match = rscriptTypeMasked.exec(elem.type);\\n\\n        if (match) {\\n            elem.type = match[1];\\n        } else {\\n            elem.removeAttribute(\"type\");\\n        }\\n\\n        return elem;\\n    }\\n\\n    // Mark scripts as having already been evaluated\\n    function setGlobalEval(elems, refElements) {\\n        var i = 0,\\n            l = elems.length;\\n\\n        for (; i < l; i++) {\\n            data_priv.set(elems[i], \"globalEval\", !refElements || data_priv.get(refElements[i], \"globalEval\"));\\n        }\\n    }\\n\\n    function cloneCopyEvent(src, dest) {\\n        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\\n\\n        if (dest.nodeType !== 1) {\\n            return;\\n        }\\n\\n        // 1. Copy private data: events, handlers, etc.\\n        if (data_priv.hasData(src)) {\\n            pdataOld = data_priv.access(src);\\n            pdataCur = data_priv.set(dest, pdataOld);\\n            events = pdataOld.events;\\n\\n            if (events) {\\n                delete pdataCur.handle;\\n                pdataCur.events = {};\\n\\n                for (type in events) {\\n                    for (i = 0, l = events[type].length; i < l; i++) {\\n                        jQuery.event.add(dest, type, events[type][i]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        // 2. Copy user data\\n        if (data_user.hasData(src)) {\\n            udataOld = data_user.access(src);\\n            udataCur = jQuery.extend({}, udataOld);\\n\\n            data_user.set(dest, udataCur);\\n        }\\n    }\\n\\n    function getAll(context, tag) {\\n        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || \"*\") : context.querySelectorAll ? context.querySelectorAll(tag || \"*\") : [];\\n\\n        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;\\n    }\\n\\n    // Support: IE >= 9\\n    function fixInput(src, dest) {\\n        var nodeName = dest.nodeName.toLowerCase();\\n\\n        // Fails to persist the checked state of a cloned checkbox or radio button.\\n        if (nodeName === \"input\" && rcheckableType.test(src.type)) {\\n            dest.checked = src.checked;\\n\\n            // Fails to return the selected option to the default selected state when cloning options\\n        } else if (nodeName === \"input\" || nodeName === \"textarea\") {\\n            dest.defaultValue = src.defaultValue;\\n        }\\n    }\\n\\n    jQuery.extend({\\n        clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\\n            var i,\\n                l,\\n                srcElements,\\n                destElements,\\n                clone = elem.cloneNode(true),\\n                inPage = jQuery.contains(elem.ownerDocument, elem);\\n\\n            // Support: IE >= 9\\n            // Fix Cloning issues\\n            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\\n\\n                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\\n                destElements = getAll(clone);\\n                srcElements = getAll(elem);\\n\\n                for (i = 0, l = srcElements.length; i < l; i++) {\\n                    fixInput(srcElements[i], destElements[i]);\\n                }\\n            }\\n\\n            // Copy the events from the original to the clone\\n            if (dataAndEvents) {\\n                if (deepDataAndEvents) {\\n                    srcElements = srcElements || getAll(elem);\\n                    destElements = destElements || getAll(clone);\\n\\n                    for (i = 0, l = srcElements.length; i < l; i++) {\\n                        cloneCopyEvent(srcElements[i], destElements[i]);\\n                    }\\n                } else {\\n                    cloneCopyEvent(elem, clone);\\n                }\\n            }\\n\\n            // Preserve script evaluation history\\n            destElements = getAll(clone, \"script\");\\n            if (destElements.length > 0) {\\n                setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\\n            }\\n\\n            // Return the cloned set\\n            return clone;\\n        },\\n\\n        buildFragment: function buildFragment(elems, context, scripts, selection) {\\n            var elem,\\n                tmp,\\n                tag,\\n                wrap,\\n                contains,\\n                j,\\n                fragment = context.createDocumentFragment(),\\n                nodes = [],\\n                i = 0,\\n                l = elems.length;\\n\\n            for (; i < l; i++) {\\n                elem = elems[i];\\n\\n                if (elem || elem === 0) {\\n\\n                    // Add nodes directly\\n                    if (jQuery.type(elem) === \"object\") {\\n                        // Support: QtWebKit\\n                        // jQuery.merge because push.apply(_, arraylike) throws\\n                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);\\n\\n                        // Convert non-html into a text node\\n                    } else if (!rhtml.test(elem)) {\\n                        nodes.push(context.createTextNode(elem));\\n\\n                        // Convert html into DOM nodes\\n                    } else {\\n                        tmp = tmp || fragment.appendChild(context.createElement(\"div\"));\\n\\n                        // Deserialize a standard representation\\n                        tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\\n                        wrap = wrapMap[tag] || wrapMap._default;\\n                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, \"<$1></$2>\") + wrap[2];\\n\\n                        // Descend through wrappers to the right content\\n                        j = wrap[0];\\n                        while (j--) {\\n                            tmp = tmp.lastChild;\\n                        }\\n\\n                        // Support: QtWebKit\\n                        // jQuery.merge because push.apply(_, arraylike) throws\\n                        jQuery.merge(nodes, tmp.childNodes);\\n\\n                        // Remember the top-level container\\n                        tmp = fragment.firstChild;\\n\\n                        // Fixes #12346\\n                        // Support: Webkit, IE\\n                        tmp.textContent = \"\";\\n                    }\\n                }\\n            }\\n\\n            // Remove wrapper from fragment\\n            fragment.textContent = \"\";\\n\\n            i = 0;\\n            while (elem = nodes[i++]) {\\n\\n                // #4087 - If origin and destination elements are the same, and this is\\n                // that element, do not do anything\\n                if (selection && jQuery.inArray(elem, selection) !== -1) {\\n                    continue;\\n                }\\n\\n                contains = jQuery.contains(elem.ownerDocument, elem);\\n\\n                // Append to fragment\\n                tmp = getAll(fragment.appendChild(elem), \"script\");\\n\\n                // Preserve script evaluation history\\n                if (contains) {\\n                    setGlobalEval(tmp);\\n                }\\n\\n                // Capture executables\\n                if (scripts) {\\n                    j = 0;\\n                    while (elem = tmp[j++]) {\\n                        if (rscriptType.test(elem.type || \"\")) {\\n                            scripts.push(elem);\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return fragment;\\n        },\\n\\n        cleanData: function cleanData(elems) {\\n            var data,\\n                elem,\\n                type,\\n                key,\\n                special = jQuery.event.special,\\n                i = 0;\\n\\n            for (; (elem = elems[i]) !== undefined; i++) {\\n                if (jQuery.acceptData(elem)) {\\n                    key = elem[data_priv.expando];\\n\\n                    if (key && (data = data_priv.cache[key])) {\\n                        if (data.events) {\\n                            for (type in data.events) {\\n                                if (special[type]) {\\n                                    jQuery.event.remove(elem, type);\\n\\n                                    // This is a shortcut to avoid jQuery.event.remove\\'s overhead\\n                                } else {\\n                                    jQuery.removeEvent(elem, type, data.handle);\\n                                }\\n                            }\\n                        }\\n                        if (data_priv.cache[key]) {\\n                            // Discard any remaining `private` data\\n                            delete data_priv.cache[key];\\n                        }\\n                    }\\n                }\\n                // Discard any remaining `user` data\\n                delete data_user.cache[elem[data_user.expando]];\\n            }\\n        }\\n    });\\n\\n    jQuery.fn.extend({\\n        text: function text(value) {\\n            return access(this, function (value) {\\n                return value === undefined ? jQuery.text(this) : this.empty().each(function () {\\n                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n                        this.textContent = value;\\n                    }\\n                });\\n            }, null, value, arguments.length);\\n        },\\n\\n        append: function append() {\\n            return this.domManip(arguments, function (elem) {\\n                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n                    var target = manipulationTarget(this, elem);\\n                    target.appendChild(elem);\\n                }\\n            });\\n        },\\n\\n        prepend: function prepend() {\\n            return this.domManip(arguments, function (elem) {\\n                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n                    var target = manipulationTarget(this, elem);\\n                    target.insertBefore(elem, target.firstChild);\\n                }\\n            });\\n        },\\n\\n        before: function before() {\\n            return this.domManip(arguments, function (elem) {\\n                if (this.parentNode) {\\n                    this.parentNode.insertBefore(elem, this);\\n                }\\n            });\\n        },\\n\\n        after: function after() {\\n            return this.domManip(arguments, function (elem) {\\n                if (this.parentNode) {\\n                    this.parentNode.insertBefore(elem, this.nextSibling);\\n                }\\n            });\\n        },\\n\\n        remove: function remove(selector, keepData /* Internal Use Only */) {\\n            var elem,\\n                elems = selector ? jQuery.filter(selector, this) : this,\\n                i = 0;\\n\\n            for (; (elem = elems[i]) != null; i++) {\\n                if (!keepData && elem.nodeType === 1) {\\n                    jQuery.cleanData(getAll(elem));\\n                }\\n\\n                if (elem.parentNode) {\\n                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {\\n                        setGlobalEval(getAll(elem, \"script\"));\\n                    }\\n                    elem.parentNode.removeChild(elem);\\n                }\\n            }\\n\\n            return this;\\n        },\\n\\n        empty: function empty() {\\n            var elem,\\n                i = 0;\\n\\n            for (; (elem = this[i]) != null; i++) {\\n                if (elem.nodeType === 1) {\\n\\n                    // Prevent memory leaks\\n                    jQuery.cleanData(getAll(elem, false));\\n\\n                    // Remove any remaining nodes\\n                    elem.textContent = \"\";\\n                }\\n            }\\n\\n            return this;\\n        },\\n\\n        clone: function clone(dataAndEvents, deepDataAndEvents) {\\n            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\\n            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\\n\\n            return this.map(function () {\\n                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\\n            });\\n        },\\n\\n        html: function html(value) {\\n            return access(this, function (value) {\\n                var elem = this[0] || {},\\n                    i = 0,\\n                    l = this.length;\\n\\n                if (value === undefined && elem.nodeType === 1) {\\n                    return elem.innerHTML;\\n                }\\n\\n                // See if we can take a shortcut and just use innerHTML\\n                if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\\n\\n                    value = value.replace(rxhtmlTag, \"<$1></$2>\");\\n\\n                    try {\\n                        for (; i < l; i++) {\\n                            elem = this[i] || {};\\n\\n                            // Remove element nodes and prevent memory leaks\\n                            if (elem.nodeType === 1) {\\n                                jQuery.cleanData(getAll(elem, false));\\n                                elem.innerHTML = value;\\n                            }\\n                        }\\n\\n                        elem = 0;\\n\\n                        // If using innerHTML throws an exception, use the fallback method\\n                    } catch (e) {}\\n                }\\n\\n                if (elem) {\\n                    this.empty().append(value);\\n                }\\n            }, null, value, arguments.length);\\n        },\\n\\n        replaceWith: function replaceWith() {\\n            var arg = arguments[0];\\n\\n            // Make the changes, replacing each context element with the new content\\n            this.domManip(arguments, function (elem) {\\n                arg = this.parentNode;\\n\\n                jQuery.cleanData(getAll(this));\\n\\n                if (arg) {\\n                    arg.replaceChild(elem, this);\\n                }\\n            });\\n\\n            // Force removal if there was no new content (e.g., from empty arguments)\\n            return arg && (arg.length || arg.nodeType) ? this : this.remove();\\n        },\\n\\n        detach: function detach(selector) {\\n            return this.remove(selector, true);\\n        },\\n\\n        domManip: function domManip(args, callback) {\\n\\n            // Flatten any nested arrays\\n            args = concat.apply([], args);\\n\\n            var fragment,\\n                first,\\n                scripts,\\n                hasScripts,\\n                node,\\n                doc,\\n                i = 0,\\n                l = this.length,\\n                set = this,\\n                iNoClone = l - 1,\\n                value = args[0],\\n                isFunction = jQuery.isFunction(value);\\n\\n            // We can\\'t cloneNode fragments that contain checked, in WebKit\\n            if (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\\n                return this.each(function (index) {\\n                    var self = set.eq(index);\\n                    if (isFunction) {\\n                        args[0] = value.call(this, index, self.html());\\n                    }\\n                    self.domManip(args, callback);\\n                });\\n            }\\n\\n            if (l) {\\n                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\\n                first = fragment.firstChild;\\n\\n                if (fragment.childNodes.length === 1) {\\n                    fragment = first;\\n                }\\n\\n                if (first) {\\n                    scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\\n                    hasScripts = scripts.length;\\n\\n                    // Use the original fragment for the last item instead of the first because it can end up\\n                    // being emptied incorrectly in certain situations (#8070).\\n                    for (; i < l; i++) {\\n                        node = fragment;\\n\\n                        if (i !== iNoClone) {\\n                            node = jQuery.clone(node, true, true);\\n\\n                            // Keep references to cloned scripts for later restoration\\n                            if (hasScripts) {\\n                                // Support: QtWebKit\\n                                // jQuery.merge because push.apply(_, arraylike) throws\\n                                jQuery.merge(scripts, getAll(node, \"script\"));\\n                            }\\n                        }\\n\\n                        callback.call(this[i], node, i);\\n                    }\\n\\n                    if (hasScripts) {\\n                        doc = scripts[scripts.length - 1].ownerDocument;\\n\\n                        // Reenable scripts\\n                        jQuery.map(scripts, restoreScript);\\n\\n                        // Evaluate executable scripts on first document insertion\\n                        for (i = 0; i < hasScripts; i++) {\\n                            node = scripts[i];\\n                            if (rscriptType.test(node.type || \"\") && !data_priv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\\n\\n                                if (node.src) {\\n                                    // Optional AJAX dependency, but won\\'t run scripts if not present\\n                                    if (jQuery._evalUrl) {\\n                                        jQuery._evalUrl(node.src);\\n                                    }\\n                                } else {\\n                                    jQuery.globalEval(node.textContent.replace(rcleanScript, \"\"));\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return this;\\n        }\\n    });\\n\\n    jQuery.each({\\n        appendTo: \"append\",\\n        prependTo: \"prepend\",\\n        insertBefore: \"before\",\\n        insertAfter: \"after\",\\n        replaceAll: \"replaceWith\"\\n    }, function (name, original) {\\n        jQuery.fn[name] = function (selector) {\\n            var elems,\\n                ret = [],\\n                insert = jQuery(selector),\\n                last = insert.length - 1,\\n                i = 0;\\n\\n            for (; i <= last; i++) {\\n                elems = i === last ? this : this.clone(true);\\n                jQuery(insert[i])[original](elems);\\n\\n                // Support: QtWebKit\\n                // .get() because push.apply(_, arraylike) throws\\n                push.apply(ret, elems.get());\\n            }\\n\\n            return this.pushStack(ret);\\n        };\\n    });\\n\\n    var iframe,\\n        elemdisplay = {};\\n\\n    /**\\r\\n     * Retrieve the actual display of a element\\r\\n     * @param {String} name nodeName of the element\\r\\n     * @param {Object} doc Document object\\r\\n     */\\n    // Called only from within defaultDisplay\\n    function actualDisplay(name, doc) {\\n        var style,\\n            elem = jQuery(doc.createElement(name)).appendTo(doc.body),\\n\\n\\n        // getDefaultComputedStyle might be reliably used only on attached element\\n        display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?\\n\\n        // Use of this method is a temporary fix (more like optmization) until something better comes along,\\n        // since it was removed from specification and supported only in FF\\n        style.display : jQuery.css(elem[0], \"display\");\\n\\n        // We don\\'t have any data stored on the element,\\n        // so use \"detach\" method as fast way to get rid of the element\\n        elem.detach();\\n\\n        return display;\\n    }\\n\\n    /**\\r\\n     * Try to determine the default display value of an element\\r\\n     * @param {String} nodeName\\r\\n     */\\n    function defaultDisplay(nodeName) {\\n        var doc = document,\\n            display = elemdisplay[nodeName];\\n\\n        if (!display) {\\n            display = actualDisplay(nodeName, doc);\\n\\n            // If the simple way fails, read from inside an iframe\\n            if (display === \"none\" || !display) {\\n\\n                // Use the already-created iframe if possible\\n                iframe = (iframe || jQuery(\"<iframe frameborder=\\'0\\' width=\\'0\\' height=\\'0\\'/>\")).appendTo(doc.documentElement);\\n\\n                // Always write a new HTML skeleton so Webkit and Firefox don\\'t choke on reuse\\n                doc = iframe[0].contentDocument;\\n\\n                // Support: IE\\n                doc.write();\\n                doc.close();\\n\\n                display = actualDisplay(nodeName, doc);\\n                iframe.detach();\\n            }\\n\\n            // Store the correct default display\\n            elemdisplay[nodeName] = display;\\n        }\\n\\n        return display;\\n    }\\n    var rmargin = /^margin/;\\n\\n    var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\\n\\n    var getStyles = function getStyles(elem) {\\n        return elem.ownerDocument.defaultView.getComputedStyle(elem, null);\\n    };\\n\\n    function curCSS(elem, name, computed) {\\n        var width,\\n            minWidth,\\n            maxWidth,\\n            ret,\\n            style = elem.style;\\n\\n        computed = computed || getStyles(elem);\\n\\n        // Support: IE9\\n        // getPropertyValue is only needed for .css(\\'filter\\') in IE9, see #12537\\n        if (computed) {\\n            ret = computed.getPropertyValue(name) || computed[name];\\n        }\\n\\n        if (computed) {\\n\\n            if (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\\n                ret = jQuery.style(elem, name);\\n            }\\n\\n            // Support: iOS < 6\\n            // A tribute to the \"awesome hack by Dean Edwards\"\\n            // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\\n            // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\\n            if (rnumnonpx.test(ret) && rmargin.test(name)) {\\n\\n                // Remember the original values\\n                width = style.width;\\n                minWidth = style.minWidth;\\n                maxWidth = style.maxWidth;\\n\\n                // Put in the new values to get a computed value out\\n                style.minWidth = style.maxWidth = style.width = ret;\\n                ret = computed.width;\\n\\n                // Revert the changed values\\n                style.width = width;\\n                style.minWidth = minWidth;\\n                style.maxWidth = maxWidth;\\n            }\\n        }\\n\\n        return ret !== undefined ?\\n        // Support: IE\\n        // IE returns zIndex value as an integer.\\n        ret + \"\" : ret;\\n    }\\n\\n    function addGetHookIf(conditionFn, hookFn) {\\n        // Define the hook, we\\'ll check on the first run if it\\'s really needed.\\n        return {\\n            get: function get() {\\n                if (conditionFn()) {\\n                    // Hook not needed (or it\\'s not possible to use it due to missing dependency),\\n                    // remove it.\\n                    // Since there are no other hooks for marginRight, remove the whole object.\\n                    delete this.get;\\n                    return;\\n                }\\n\\n                // Hook needed; redefine it so that the support test is not executed again.\\n\\n                return (this.get = hookFn).apply(this, arguments);\\n            }\\n        };\\n    }\\n\\n    (function () {\\n        var pixelPositionVal,\\n            boxSizingReliableVal,\\n            docElem = document.documentElement,\\n            container = document.createElement(\"div\"),\\n            div = document.createElement(\"div\");\\n\\n        if (!div.style) {\\n            return;\\n        }\\n\\n        div.style.backgroundClip = \"content-box\";\\n        div.cloneNode(true).style.backgroundClip = \"\";\\n        support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\\n\\n        container.style.cssText = \"border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;\" + \"position:absolute\";\\n        container.appendChild(div);\\n\\n        // Executing both pixelPosition & boxSizingReliable tests require only one layout\\n        // so they\\'re executed at the same time to save the second computation.\\n        function computePixelPositionAndBoxSizingReliable() {\\n            div.style.cssText =\\n            // Support: Firefox<29, Android 2.3\\n            // Vendor-prefix box-sizing\\n            \"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" + \"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" + \"border:1px;padding:1px;width:4px;position:absolute\";\\n            div.innerHTML = \"\";\\n            docElem.appendChild(container);\\n\\n            var divStyle = window.getComputedStyle(div, null);\\n            pixelPositionVal = divStyle.top !== \"1%\";\\n            boxSizingReliableVal = divStyle.width === \"4px\";\\n\\n            docElem.removeChild(container);\\n        }\\n\\n        // Support: node.js jsdom\\n        // Don\\'t assume that getComputedStyle is a property of the global object\\n        if (window.getComputedStyle) {\\n            jQuery.extend(support, {\\n                pixelPosition: function pixelPosition() {\\n                    // This test is executed only once but we still do memoizing\\n                    // since we can use the boxSizingReliable pre-computing.\\n                    // No need to check if the test was already performed, though.\\n                    computePixelPositionAndBoxSizingReliable();\\n                    return pixelPositionVal;\\n                },\\n                boxSizingReliable: function boxSizingReliable() {\\n                    if (boxSizingReliableVal == null) {\\n                        computePixelPositionAndBoxSizingReliable();\\n                    }\\n                    return boxSizingReliableVal;\\n                },\\n                reliableMarginRight: function reliableMarginRight() {\\n                    // Support: Android 2.3\\n                    // Check if div with explicit width and no margin-right incorrectly\\n                    // gets computed margin-right based on width of container. (#3333)\\n                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\\n                    // This support function is only executed once so no memoizing is needed.\\n                    var ret,\\n                        marginDiv = div.appendChild(document.createElement(\"div\"));\\n\\n                    // Reset CSS: box-sizing; display; margin; border; padding\\n                    marginDiv.style.cssText = div.style.cssText =\\n                    // Support: Firefox<29, Android 2.3\\n                    // Vendor-prefix box-sizing\\n                    \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" + \"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\\n                    marginDiv.style.marginRight = marginDiv.style.width = \"0\";\\n                    div.style.width = \"1px\";\\n                    docElem.appendChild(container);\\n\\n                    ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);\\n\\n                    docElem.removeChild(container);\\n\\n                    return ret;\\n                }\\n            });\\n        }\\n    })();\\n\\n    // A method for quickly swapping in/out CSS properties to get correct calculations.\\n    jQuery.swap = function (elem, options, callback, args) {\\n        var ret,\\n            name,\\n            old = {};\\n\\n        // Remember the old values, and insert the new ones\\n        for (name in options) {\\n            old[name] = elem.style[name];\\n            elem.style[name] = options[name];\\n        }\\n\\n        ret = callback.apply(elem, args || []);\\n\\n        // Revert the old values\\n        for (name in options) {\\n            elem.style[name] = old[name];\\n        }\\n\\n        return ret;\\n    };\\n\\n    var\\n    // swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\\n    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\\n    rdisplayswap = /^(none|table(?!-c[ea]).+)/,\\n        rnumsplit = new RegExp(\"^(\" + pnum + \")(.*)$\", \"i\"),\\n        rrelNum = new RegExp(\"^([+-])=(\" + pnum + \")\", \"i\"),\\n        cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\\n        cssNormalTransform = {\\n        letterSpacing: \"0\",\\n        fontWeight: \"400\"\\n    },\\n        cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\\n\\n    // return a css property mapped to a potentially vendor prefixed property\\n    function vendorPropName(style, name) {\\n\\n        // shortcut for names that are not vendor prefixed\\n        if (name in style) {\\n            return name;\\n        }\\n\\n        // check for vendor prefixed names\\n        var capName = name[0].toUpperCase() + name.slice(1),\\n            origName = name,\\n            i = cssPrefixes.length;\\n\\n        while (i--) {\\n            name = cssPrefixes[i] + capName;\\n            if (name in style) {\\n                return name;\\n            }\\n        }\\n\\n        return origName;\\n    }\\n\\n    function setPositiveNumber(elem, value, subtract) {\\n        var matches = rnumsplit.exec(value);\\n        return matches ?\\n        // Guard against undefined \"subtract\", e.g., when used as in cssHooks\\n        Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\\n    }\\n\\n    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\\n        var i = extra === (isBorderBox ? \"border\" : \"content\") ?\\n        // If we already have the right measurement, avoid augmentation\\n        4 :\\n        // Otherwise initialize for horizontal or vertical properties\\n        name === \"width\" ? 1 : 0,\\n            val = 0;\\n\\n        for (; i < 4; i += 2) {\\n            // both box models exclude margin, so add it if we want it\\n            if (extra === \"margin\") {\\n                val += jQuery.css(elem, extra + cssExpand[i], true, styles);\\n            }\\n\\n            if (isBorderBox) {\\n                // border-box includes padding, so remove it if we want content\\n                if (extra === \"content\") {\\n                    val -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\\n                }\\n\\n                // at this point, extra isn\\'t border nor margin, so remove border\\n                if (extra !== \"margin\") {\\n                    val -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\\n                }\\n            } else {\\n                // at this point, extra isn\\'t content, so add padding\\n                val += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\\n\\n                // at this point, extra isn\\'t content nor padding, so add border\\n                if (extra !== \"padding\") {\\n                    val += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\\n                }\\n            }\\n        }\\n\\n        return val;\\n    }\\n\\n    function getWidthOrHeight(elem, name, extra) {\\n\\n        // Start with offset property, which is equivalent to the border-box value\\n        var valueIsBorderBox = true,\\n            val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\\n            styles = getStyles(elem),\\n            isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\\n\\n        // some non-html elements return undefined for offsetWidth, so check for null/undefined\\n        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\\n        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\\n        if (val <= 0 || val == null) {\\n            // Fall back to computed then uncomputed css if necessary\\n            val = curCSS(elem, name, styles);\\n            if (val < 0 || val == null) {\\n                val = elem.style[name];\\n            }\\n\\n            // Computed unit is not pixels. Stop here and return.\\n            if (rnumnonpx.test(val)) {\\n                return val;\\n            }\\n\\n            // we need the check for style in case a browser which returns unreliable values\\n            // for getComputedStyle silently falls back to the reliable elem.style\\n            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);\\n\\n            // Normalize \"\", auto, and prepare for extra\\n            val = parseFloat(val) || 0;\\n        }\\n\\n        // use the active box-sizing model to add/subtract irrelevant styles\\n        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\\n    }\\n\\n    function showHide(elements, show) {\\n        var display,\\n            elem,\\n            hidden,\\n            values = [],\\n            index = 0,\\n            length = elements.length;\\n\\n        for (; index < length; index++) {\\n            elem = elements[index];\\n            if (!elem.style) {\\n                continue;\\n            }\\n\\n            values[index] = data_priv.get(elem, \"olddisplay\");\\n            display = elem.style.display;\\n            if (show) {\\n                // Reset the inline display of this element to learn if it is\\n                // being hidden by cascaded rules or not\\n                if (!values[index] && display === \"none\") {\\n                    elem.style.display = \"\";\\n                }\\n\\n                // Set elements which have been overridden with display: none\\n                // in a stylesheet to whatever the default browser style is\\n                // for such an element\\n                if (elem.style.display === \"\" && isHidden(elem)) {\\n                    values[index] = data_priv.access(elem, \"olddisplay\", defaultDisplay(elem.nodeName));\\n                }\\n            } else {\\n                hidden = isHidden(elem);\\n\\n                if (display !== \"none\" || !hidden) {\\n                    data_priv.set(elem, \"olddisplay\", hidden ? display : jQuery.css(elem, \"display\"));\\n                }\\n            }\\n        }\\n\\n        // Set the display of most of the elements in a second loop\\n        // to avoid the constant reflow\\n        for (index = 0; index < length; index++) {\\n            elem = elements[index];\\n            if (!elem.style) {\\n                continue;\\n            }\\n            if (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\\n                elem.style.display = show ? values[index] || \"\" : \"none\";\\n            }\\n        }\\n\\n        return elements;\\n    }\\n\\n    jQuery.extend({\\n        // Add in style property hooks for overriding the default\\n        // behavior of getting and setting a style property\\n        cssHooks: {\\n            opacity: {\\n                get: function get(elem, computed) {\\n                    if (computed) {\\n                        // We should always get a number back from opacity\\n                        var ret = curCSS(elem, \"opacity\");\\n                        return ret === \"\" ? \"1\" : ret;\\n                    }\\n                }\\n            }\\n        },\\n\\n        // Don\\'t automatically add \"px\" to these possibly-unitless properties\\n        cssNumber: {\\n            \"columnCount\": true,\\n            \"fillOpacity\": true,\\n            \"flexGrow\": true,\\n            \"flexShrink\": true,\\n            \"fontWeight\": true,\\n            \"lineHeight\": true,\\n            \"opacity\": true,\\n            \"order\": true,\\n            \"orphans\": true,\\n            \"widows\": true,\\n            \"zIndex\": true,\\n            \"zoom\": true\\n        },\\n\\n        // Add in properties whose names you wish to fix before\\n        // setting or getting the value\\n        cssProps: {\\n            // normalize float css property\\n            \"float\": \"cssFloat\"\\n        },\\n\\n        // Get and set the style property on a DOM Node\\n        style: function style(elem, name, value, extra) {\\n            // Don\\'t set styles on text and comment nodes\\n            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\\n                return;\\n            }\\n\\n            // Make sure that we\\'re working with the right name\\n            var ret,\\n                type,\\n                hooks,\\n                origName = jQuery.camelCase(name),\\n                style = elem.style;\\n\\n            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));\\n\\n            // gets hook for the prefixed version\\n            // followed by the unprefixed version\\n            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\\n\\n            // Check if we\\'re setting a value\\n            if (value !== undefined) {\\n                type = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\\n\\n                // convert relative number strings (+= or -=) to relative numbers. #7345\\n                if (type === \"string\" && (ret = rrelNum.exec(value))) {\\n                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));\\n                    // Fixes bug #9237\\n                    type = \"number\";\\n                }\\n\\n                // Make sure that null and NaN values aren\\'t set. See: #7116\\n                if (value == null || value !== value) {\\n                    return;\\n                }\\n\\n                // If a number was passed in, add \\'px\\' to the (except for certain CSS properties)\\n                if (type === \"number\" && !jQuery.cssNumber[origName]) {\\n                    value += \"px\";\\n                }\\n\\n                // Fixes #8908, it can be done more correctly by specifying setters in cssHooks,\\n                // but it would mean to define eight (for every problematic property) identical functions\\n                if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\\n                    style[name] = \"inherit\";\\n                }\\n\\n                // If a hook was provided, use that value, otherwise just set the specified value\\n                if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\\n                    style[name] = value;\\n                }\\n            } else {\\n                // If a hook was provided get the non-computed value from there\\n                if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\\n                    return ret;\\n                }\\n\\n                // Otherwise just get the value from the style object\\n                return style[name];\\n            }\\n        },\\n\\n        css: function css(elem, name, extra, styles) {\\n            var val,\\n                num,\\n                hooks,\\n                origName = jQuery.camelCase(name);\\n\\n            // Make sure that we\\'re working with the right name\\n            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));\\n\\n            // gets hook for the prefixed version\\n            // followed by the unprefixed version\\n            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\\n\\n            // If a hook was provided get the computed value from there\\n            if (hooks && \"get\" in hooks) {\\n                val = hooks.get(elem, true, extra);\\n            }\\n\\n            // Otherwise, if a way to get the computed value exists, use that\\n            if (val === undefined) {\\n                val = curCSS(elem, name, styles);\\n            }\\n\\n            //convert \"normal\" to computed value\\n            if (val === \"normal\" && name in cssNormalTransform) {\\n                val = cssNormalTransform[name];\\n            }\\n\\n            // Return, converting to number if forced or a qualifier was provided and val looks numeric\\n            if (extra === \"\" || extra) {\\n                num = parseFloat(val);\\n                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;\\n            }\\n            return val;\\n        }\\n    });\\n\\n    jQuery.each([\"height\", \"width\"], function (i, name) {\\n        jQuery.cssHooks[name] = {\\n            get: function get(elem, computed, extra) {\\n                if (computed) {\\n                    // certain elements can have dimension info if we invisibly show them\\n                    // however, it must have a current display style that would benefit from this\\n                    return rdisplayswap.test(jQuery.css(elem, \"display\")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {\\n                        return getWidthOrHeight(elem, name, extra);\\n                    }) : getWidthOrHeight(elem, name, extra);\\n                }\\n            },\\n\\n            set: function set(elem, value, extra) {\\n                var styles = extra && getStyles(elem);\\n                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles) : 0);\\n            }\\n        };\\n    });\\n\\n    // Support: Android 2.3\\n    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {\\n        if (computed) {\\n            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\\n            // Work around by temporarily setting element display to inline-block\\n            return jQuery.swap(elem, { \"display\": \"inline-block\" }, curCSS, [elem, \"marginRight\"]);\\n        }\\n    });\\n\\n    // These hooks are used by animate to expand properties\\n    jQuery.each({\\n        margin: \"\",\\n        padding: \"\",\\n        border: \"Width\"\\n    }, function (prefix, suffix) {\\n        jQuery.cssHooks[prefix + suffix] = {\\n            expand: function expand(value) {\\n                var i = 0,\\n                    expanded = {},\\n\\n\\n                // assumes a single number if not a string\\n                parts = typeof value === \"string\" ? value.split(\" \") : [value];\\n\\n                for (; i < 4; i++) {\\n                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\\n                }\\n\\n                return expanded;\\n            }\\n        };\\n\\n        if (!rmargin.test(prefix)) {\\n            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\\n        }\\n    });\\n\\n    jQuery.fn.extend({\\n        css: function css(name, value) {\\n            return access(this, function (elem, name, value) {\\n                var styles,\\n                    len,\\n                    map = {},\\n                    i = 0;\\n\\n                if (jQuery.isArray(name)) {\\n                    styles = getStyles(elem);\\n                    len = name.length;\\n\\n                    for (; i < len; i++) {\\n                        map[name[i]] = jQuery.css(elem, name[i], false, styles);\\n                    }\\n\\n                    return map;\\n                }\\n\\n                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\\n            }, name, value, arguments.length > 1);\\n        },\\n        show: function show() {\\n            return showHide(this, true);\\n        },\\n        hide: function hide() {\\n            return showHide(this);\\n        },\\n        toggle: function toggle(state) {\\n            if (typeof state === \"boolean\") {\\n                return state ? this.show() : this.hide();\\n            }\\n\\n            return this.each(function () {\\n                if (isHidden(this)) {\\n                    jQuery(this).show();\\n                } else {\\n                    jQuery(this).hide();\\n                }\\n            });\\n        }\\n    });\\n\\n    function Tween(elem, options, prop, end, easing) {\\n        return new Tween.prototype.init(elem, options, prop, end, easing);\\n    }\\n    jQuery.Tween = Tween;\\n\\n    Tween.prototype = {\\n        constructor: Tween,\\n        init: function init(elem, options, prop, end, easing, unit) {\\n            this.elem = elem;\\n            this.prop = prop;\\n            this.easing = easing || \"swing\";\\n            this.options = options;\\n            this.start = this.now = this.cur();\\n            this.end = end;\\n            this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\\n        },\\n        cur: function cur() {\\n            var hooks = Tween.propHooks[this.prop];\\n\\n            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\\n        },\\n        run: function run(percent) {\\n            var eased,\\n                hooks = Tween.propHooks[this.prop];\\n\\n            if (this.options.duration) {\\n                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\\n            } else {\\n                this.pos = eased = percent;\\n            }\\n            this.now = (this.end - this.start) * eased + this.start;\\n\\n            if (this.options.step) {\\n                this.options.step.call(this.elem, this.now, this);\\n            }\\n\\n            if (hooks && hooks.set) {\\n                hooks.set(this);\\n            } else {\\n                Tween.propHooks._default.set(this);\\n            }\\n            return this;\\n        }\\n    };\\n\\n    Tween.prototype.init.prototype = Tween.prototype;\\n\\n    Tween.propHooks = {\\n        _default: {\\n            get: function get(tween) {\\n                var result;\\n\\n                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\\n                    return tween.elem[tween.prop];\\n                }\\n\\n                // passing an empty string as a 3rd parameter to .css will automatically\\n                // attempt a parseFloat and fallback to a string if the parse fails\\n                // so, simple values such as \"10px\" are parsed to Float.\\n                // complex values such as \"rotate(1rad)\" are returned as is.\\n                result = jQuery.css(tween.elem, tween.prop, \"\");\\n                // Empty strings, null, undefined and \"auto\" are converted to 0.\\n                return !result || result === \"auto\" ? 0 : result;\\n            },\\n            set: function set(tween) {\\n                // use step hook for back compat - use cssHook if its there - use .style if its\\n                // available and use plain properties where available\\n                if (jQuery.fx.step[tween.prop]) {\\n                    jQuery.fx.step[tween.prop](tween);\\n                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\\n                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\\n                } else {\\n                    tween.elem[tween.prop] = tween.now;\\n                }\\n            }\\n        }\\n    };\\n\\n    // Support: IE9\\n    // Panic based approach to setting things on disconnected nodes\\n\\n    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\\n        set: function set(tween) {\\n            if (tween.elem.nodeType && tween.elem.parentNode) {\\n                tween.elem[tween.prop] = tween.now;\\n            }\\n        }\\n    };\\n\\n    jQuery.easing = {\\n        linear: function linear(p) {\\n            return p;\\n        },\\n        swing: function swing(p) {\\n            return 0.5 - Math.cos(p * Math.PI) / 2;\\n        }\\n    };\\n\\n    jQuery.fx = Tween.prototype.init;\\n\\n    // Back Compat <1.8 extension point\\n    jQuery.fx.step = {};\\n\\n    var fxNow,\\n        timerId,\\n        rfxtypes = /^(?:toggle|show|hide)$/,\\n        rfxnum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\"),\\n        rrun = /queueHooks$/,\\n        animationPrefilters = [defaultPrefilter],\\n        tweeners = {\\n        \"*\": [function (prop, value) {\\n            var tween = this.createTween(prop, value),\\n                target = tween.cur(),\\n                parts = rfxnum.exec(value),\\n                unit = parts && parts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\\n\\n\\n            // Starting value computation is required for potential unit mismatches\\n            start = (jQuery.cssNumber[prop] || unit !== \"px\" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),\\n                scale = 1,\\n                maxIterations = 20;\\n\\n            if (start && start[3] !== unit) {\\n                // Trust units reported by jQuery.css\\n                unit = unit || start[3];\\n\\n                // Make sure we update the tween properties later on\\n                parts = parts || [];\\n\\n                // Iteratively approximate from a nonzero starting point\\n                start = +target || 1;\\n\\n                do {\\n                    // If previous iteration zeroed out, double until we get *something*\\n                    // Use a string for doubling factor so we don\\'t accidentally see scale as unchanged below\\n                    scale = scale || \".5\";\\n\\n                    // Adjust and apply\\n                    start = start / scale;\\n                    jQuery.style(tween.elem, prop, start + unit);\\n\\n                    // Update scale, tolerating zero or NaN from tween.cur()\\n                    // And breaking the loop if scale is unchanged or perfect, or if we\\'ve just had enough\\n                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\\n            }\\n\\n            // Update tween properties\\n            if (parts) {\\n                start = tween.start = +start || +target || 0;\\n                tween.unit = unit;\\n                // If a +=/-= token was provided, we\\'re doing a relative animation\\n                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];\\n            }\\n\\n            return tween;\\n        }]\\n    };\\n\\n    // Animations created synchronously will run synchronously\\n    function createFxNow() {\\n        setTimeout(function () {\\n            fxNow = undefined;\\n        });\\n        return fxNow = jQuery.now();\\n    }\\n\\n    // Generate parameters to create a standard animation\\n    function genFx(type, includeWidth) {\\n        var which,\\n            i = 0,\\n            attrs = { height: type };\\n\\n        // if we include width, step value is 1 to do all cssExpand values,\\n        // if we don\\'t include width, step value is 2 to skip over Left and Right\\n        includeWidth = includeWidth ? 1 : 0;\\n        for (; i < 4; i += 2 - includeWidth) {\\n            which = cssExpand[i];\\n            attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\\n        }\\n\\n        if (includeWidth) {\\n            attrs.opacity = attrs.width = type;\\n        }\\n\\n        return attrs;\\n    }\\n\\n    function createTween(value, prop, animation) {\\n        var tween,\\n            collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\\n            index = 0,\\n            length = collection.length;\\n        for (; index < length; index++) {\\n            if (tween = collection[index].call(animation, prop, value)) {\\n\\n                // we\\'re done with this property\\n                return tween;\\n            }\\n        }\\n    }\\n\\n    function defaultPrefilter(elem, props, opts) {\\n        /* jshint validthis: true */\\n        var prop,\\n            value,\\n            toggle,\\n            tween,\\n            hooks,\\n            oldfire,\\n            display,\\n            checkDisplay,\\n            anim = this,\\n            orig = {},\\n            style = elem.style,\\n            hidden = elem.nodeType && isHidden(elem),\\n            dataShow = data_priv.get(elem, \"fxshow\");\\n\\n        // handle queue: false promises\\n        if (!opts.queue) {\\n            hooks = jQuery._queueHooks(elem, \"fx\");\\n            if (hooks.unqueued == null) {\\n                hooks.unqueued = 0;\\n                oldfire = hooks.empty.fire;\\n                hooks.empty.fire = function () {\\n                    if (!hooks.unqueued) {\\n                        oldfire();\\n                    }\\n                };\\n            }\\n            hooks.unqueued++;\\n\\n            anim.always(function () {\\n                // doing this makes sure that the complete handler will be called\\n                // before this completes\\n                anim.always(function () {\\n                    hooks.unqueued--;\\n                    if (!jQuery.queue(elem, \"fx\").length) {\\n                        hooks.empty.fire();\\n                    }\\n                });\\n            });\\n        }\\n\\n        // height/width overflow pass\\n        if (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\\n            // Make sure that nothing sneaks out\\n            // Record all 3 overflow attributes because IE9-10 do not\\n            // change the overflow attribute when overflowX and\\n            // overflowY are set to the same value\\n            opts.overflow = [style.overflow, style.overflowX, style.overflowY];\\n\\n            // Set display property to inline-block for height/width\\n            // animations on inline elements that are having width/height animated\\n            display = jQuery.css(elem, \"display\");\\n\\n            // Test default display if display is currently \"none\"\\n            checkDisplay = display === \"none\" ? data_priv.get(elem, \"olddisplay\") || defaultDisplay(elem.nodeName) : display;\\n\\n            if (checkDisplay === \"inline\" && jQuery.css(elem, \"float\") === \"none\") {\\n                style.display = \"inline-block\";\\n            }\\n        }\\n\\n        if (opts.overflow) {\\n            style.overflow = \"hidden\";\\n            anim.always(function () {\\n                style.overflow = opts.overflow[0];\\n                style.overflowX = opts.overflow[1];\\n                style.overflowY = opts.overflow[2];\\n            });\\n        }\\n\\n        // show/hide pass\\n        for (prop in props) {\\n            value = props[prop];\\n            if (rfxtypes.exec(value)) {\\n                delete props[prop];\\n                toggle = toggle || value === \"toggle\";\\n                if (value === (hidden ? \"hide\" : \"show\")) {\\n\\n                    // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\\n                    if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\\n                        hidden = true;\\n                    } else {\\n                        continue;\\n                    }\\n                }\\n                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\\n\\n                // Any non-fx value stops us from restoring the original display value\\n            } else {\\n                display = undefined;\\n            }\\n        }\\n\\n        if (!jQuery.isEmptyObject(orig)) {\\n            if (dataShow) {\\n                if (\"hidden\" in dataShow) {\\n                    hidden = dataShow.hidden;\\n                }\\n            } else {\\n                dataShow = data_priv.access(elem, \"fxshow\", {});\\n            }\\n\\n            // store state if its toggle - enables .stop().toggle() to \"reverse\"\\n            if (toggle) {\\n                dataShow.hidden = !hidden;\\n            }\\n            if (hidden) {\\n                jQuery(elem).show();\\n            } else {\\n                anim.done(function () {\\n                    jQuery(elem).hide();\\n                });\\n            }\\n            anim.done(function () {\\n                var prop;\\n\\n                data_priv.remove(elem, \"fxshow\");\\n                for (prop in orig) {\\n                    jQuery.style(elem, prop, orig[prop]);\\n                }\\n            });\\n            for (prop in orig) {\\n                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\\n\\n                if (!(prop in dataShow)) {\\n                    dataShow[prop] = tween.start;\\n                    if (hidden) {\\n                        tween.end = tween.start;\\n                        tween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\\n                    }\\n                }\\n            }\\n\\n            // If this is a noop like .hide().hide(), restore an overwritten display value\\n        } else if ((display === \"none\" ? defaultDisplay(elem.nodeName) : display) === \"inline\") {\\n            style.display = display;\\n        }\\n    }\\n\\n    function propFilter(props, specialEasing) {\\n        var index, name, easing, value, hooks;\\n\\n        // camelCase, specialEasing and expand cssHook pass\\n        for (index in props) {\\n            name = jQuery.camelCase(index);\\n            easing = specialEasing[name];\\n            value = props[index];\\n            if (jQuery.isArray(value)) {\\n                easing = value[1];\\n                value = props[index] = value[0];\\n            }\\n\\n            if (index !== name) {\\n                props[name] = value;\\n                delete props[index];\\n            }\\n\\n            hooks = jQuery.cssHooks[name];\\n            if (hooks && \"expand\" in hooks) {\\n                value = hooks.expand(value);\\n                delete props[name];\\n\\n                // not quite $.extend, this wont overwrite keys already present.\\n                // also - reusing \\'index\\' from above because we have the correct \"name\"\\n                for (index in value) {\\n                    if (!(index in props)) {\\n                        props[index] = value[index];\\n                        specialEasing[index] = easing;\\n                    }\\n                }\\n            } else {\\n                specialEasing[name] = easing;\\n            }\\n        }\\n    }\\n\\n    function Animation(elem, properties, options) {\\n        var result,\\n            stopped,\\n            index = 0,\\n            length = animationPrefilters.length,\\n            deferred = jQuery.Deferred().always(function () {\\n            // don\\'t match elem in the :animated selector\\n            delete tick.elem;\\n        }),\\n            tick = function tick() {\\n            if (stopped) {\\n                return false;\\n            }\\n            var currentTime = fxNow || createFxNow(),\\n                remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\\n\\n            // archaic crash bug won\\'t allow us to use 1 - ( 0.5 || 0 ) (#12497)\\n            temp = remaining / animation.duration || 0,\\n                percent = 1 - temp,\\n                index = 0,\\n                length = animation.tweens.length;\\n\\n            for (; index < length; index++) {\\n                animation.tweens[index].run(percent);\\n            }\\n\\n            deferred.notifyWith(elem, [animation, percent, remaining]);\\n\\n            if (percent < 1 && length) {\\n                return remaining;\\n            } else {\\n                deferred.resolveWith(elem, [animation]);\\n                return false;\\n            }\\n        },\\n            animation = deferred.promise({\\n            elem: elem,\\n            props: jQuery.extend({}, properties),\\n            opts: jQuery.extend(true, { specialEasing: {} }, options),\\n            originalProperties: properties,\\n            originalOptions: options,\\n            startTime: fxNow || createFxNow(),\\n            duration: options.duration,\\n            tweens: [],\\n            createTween: function createTween(prop, end) {\\n                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\\n                animation.tweens.push(tween);\\n                return tween;\\n            },\\n            stop: function stop(gotoEnd) {\\n                var index = 0,\\n\\n                // if we are going to the end, we want to run all the tweens\\n                // otherwise we skip this part\\n                length = gotoEnd ? animation.tweens.length : 0;\\n                if (stopped) {\\n                    return this;\\n                }\\n                stopped = true;\\n                for (; index < length; index++) {\\n                    animation.tweens[index].run(1);\\n                }\\n\\n                // resolve when we played the last frame\\n                // otherwise, reject\\n                if (gotoEnd) {\\n                    deferred.resolveWith(elem, [animation, gotoEnd]);\\n                } else {\\n                    deferred.rejectWith(elem, [animation, gotoEnd]);\\n                }\\n                return this;\\n            }\\n        }),\\n            props = animation.props;\\n\\n        propFilter(props, animation.opts.specialEasing);\\n\\n        for (; index < length; index++) {\\n            result = animationPrefilters[index].call(animation, elem, props, animation.opts);\\n            if (result) {\\n                return result;\\n            }\\n        }\\n\\n        jQuery.map(props, createTween, animation);\\n\\n        if (jQuery.isFunction(animation.opts.start)) {\\n            animation.opts.start.call(elem, animation);\\n        }\\n\\n        jQuery.fx.timer(jQuery.extend(tick, {\\n            elem: elem,\\n            anim: animation,\\n            queue: animation.opts.queue\\n        }));\\n\\n        // attach callbacks from options\\n        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\\n    }\\n\\n    jQuery.Animation = jQuery.extend(Animation, {\\n\\n        tweener: function tweener(props, callback) {\\n            if (jQuery.isFunction(props)) {\\n                callback = props;\\n                props = [\"*\"];\\n            } else {\\n                props = props.split(\" \");\\n            }\\n\\n            var prop,\\n                index = 0,\\n                length = props.length;\\n\\n            for (; index < length; index++) {\\n                prop = props[index];\\n                tweeners[prop] = tweeners[prop] || [];\\n                tweeners[prop].unshift(callback);\\n            }\\n        },\\n\\n        prefilter: function prefilter(callback, prepend) {\\n            if (prepend) {\\n                animationPrefilters.unshift(callback);\\n            } else {\\n                animationPrefilters.push(callback);\\n            }\\n        }\\n    });\\n\\n    jQuery.speed = function (speed, easing, fn) {\\n        var opt = speed && (typeof speed === \"undefined\" ? \"undefined\" : _typeof(speed)) === \"object\" ? jQuery.extend({}, speed) : {\\n            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\\n            duration: speed,\\n            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing\\n        };\\n\\n        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;\\n\\n        // normalize opt.queue - true/undefined/null -> \"fx\"\\n        if (opt.queue == null || opt.queue === true) {\\n            opt.queue = \"fx\";\\n        }\\n\\n        // Queueing\\n        opt.old = opt.complete;\\n\\n        opt.complete = function () {\\n            if (jQuery.isFunction(opt.old)) {\\n                opt.old.call(this);\\n            }\\n\\n            if (opt.queue) {\\n                jQuery.dequeue(this, opt.queue);\\n            }\\n        };\\n\\n        return opt;\\n    };\\n\\n    jQuery.fn.extend({\\n        fadeTo: function fadeTo(speed, to, easing, callback) {\\n\\n            // show any hidden elements after setting opacity to 0\\n            return this.filter(isHidden).css(\"opacity\", 0).show()\\n\\n            // animate to the value specified\\n            .end().animate({ opacity: to }, speed, easing, callback);\\n        },\\n        animate: function animate(prop, speed, easing, callback) {\\n            var empty = jQuery.isEmptyObject(prop),\\n                optall = jQuery.speed(speed, easing, callback),\\n                doAnimation = function doAnimation() {\\n                // Operate on a copy of prop so per-property easing won\\'t be lost\\n                var anim = Animation(this, jQuery.extend({}, prop), optall);\\n\\n                // Empty animations, or finishing resolves immediately\\n                if (empty || data_priv.get(this, \"finish\")) {\\n                    anim.stop(true);\\n                }\\n            };\\n            doAnimation.finish = doAnimation;\\n\\n            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\\n        },\\n        stop: function stop(type, clearQueue, gotoEnd) {\\n            var stopQueue = function stopQueue(hooks) {\\n                var stop = hooks.stop;\\n                delete hooks.stop;\\n                stop(gotoEnd);\\n            };\\n\\n            if (typeof type !== \"string\") {\\n                gotoEnd = clearQueue;\\n                clearQueue = type;\\n                type = undefined;\\n            }\\n            if (clearQueue && type !== false) {\\n                this.queue(type || \"fx\", []);\\n            }\\n\\n            return this.each(function () {\\n                var dequeue = true,\\n                    index = type != null && type + \"queueHooks\",\\n                    timers = jQuery.timers,\\n                    data = data_priv.get(this);\\n\\n                if (index) {\\n                    if (data[index] && data[index].stop) {\\n                        stopQueue(data[index]);\\n                    }\\n                } else {\\n                    for (index in data) {\\n                        if (data[index] && data[index].stop && rrun.test(index)) {\\n                            stopQueue(data[index]);\\n                        }\\n                    }\\n                }\\n\\n                for (index = timers.length; index--;) {\\n                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\\n                        timers[index].anim.stop(gotoEnd);\\n                        dequeue = false;\\n                        timers.splice(index, 1);\\n                    }\\n                }\\n\\n                // start the next in the queue if the last step wasn\\'t forced\\n                // timers currently will call their complete callbacks, which will dequeue\\n                // but only if they were gotoEnd\\n                if (dequeue || !gotoEnd) {\\n                    jQuery.dequeue(this, type);\\n                }\\n            });\\n        },\\n        finish: function finish(type) {\\n            if (type !== false) {\\n                type = type || \"fx\";\\n            }\\n            return this.each(function () {\\n                var index,\\n                    data = data_priv.get(this),\\n                    queue = data[type + \"queue\"],\\n                    hooks = data[type + \"queueHooks\"],\\n                    timers = jQuery.timers,\\n                    length = queue ? queue.length : 0;\\n\\n                // enable finishing flag on private data\\n                data.finish = true;\\n\\n                // empty the queue first\\n                jQuery.queue(this, type, []);\\n\\n                if (hooks && hooks.stop) {\\n                    hooks.stop.call(this, true);\\n                }\\n\\n                // look for any active animations, and finish them\\n                for (index = timers.length; index--;) {\\n                    if (timers[index].elem === this && timers[index].queue === type) {\\n                        timers[index].anim.stop(true);\\n                        timers.splice(index, 1);\\n                    }\\n                }\\n\\n                // look for any animations in the old queue and finish them\\n                for (index = 0; index < length; index++) {\\n                    if (queue[index] && queue[index].finish) {\\n                        queue[index].finish.call(this);\\n                    }\\n                }\\n\\n                // turn off finishing flag\\n                delete data.finish;\\n            });\\n        }\\n    });\\n\\n    jQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\\n        var cssFn = jQuery.fn[name];\\n        jQuery.fn[name] = function (speed, easing, callback) {\\n            return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\\n        };\\n    });\\n\\n    // Generate shortcuts for custom animations\\n    jQuery.each({\\n        slideDown: genFx(\"show\"),\\n        slideUp: genFx(\"hide\"),\\n        slideToggle: genFx(\"toggle\"),\\n        fadeIn: { opacity: \"show\" },\\n        fadeOut: { opacity: \"hide\" },\\n        fadeToggle: { opacity: \"toggle\" }\\n    }, function (name, props) {\\n        jQuery.fn[name] = function (speed, easing, callback) {\\n            return this.animate(props, speed, easing, callback);\\n        };\\n    });\\n\\n    jQuery.timers = [];\\n    jQuery.fx.tick = function () {\\n        var timer,\\n            i = 0,\\n            timers = jQuery.timers;\\n\\n        fxNow = jQuery.now();\\n\\n        for (; i < timers.length; i++) {\\n            timer = timers[i];\\n            // Checks the timer has not already been removed\\n            if (!timer() && timers[i] === timer) {\\n                timers.splice(i--, 1);\\n            }\\n        }\\n\\n        if (!timers.length) {\\n            jQuery.fx.stop();\\n        }\\n        fxNow = undefined;\\n    };\\n\\n    jQuery.fx.timer = function (timer) {\\n        jQuery.timers.push(timer);\\n        if (timer()) {\\n            jQuery.fx.start();\\n        } else {\\n            jQuery.timers.pop();\\n        }\\n    };\\n\\n    jQuery.fx.interval = 13;\\n\\n    jQuery.fx.start = function () {\\n        if (!timerId) {\\n            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\\n        }\\n    };\\n\\n    jQuery.fx.stop = function () {\\n        clearInterval(timerId);\\n        timerId = null;\\n    };\\n\\n    jQuery.fx.speeds = {\\n        slow: 600,\\n        fast: 200,\\n        // Default speed\\n        _default: 400\\n    };\\n\\n    // Based off of the plugin by Clint Helfers, with permission.\\n    // http://blindsignals.com/index.php/2009/07/jquery-delay/\\n    jQuery.fn.delay = function (time, type) {\\n        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\\n        type = type || \"fx\";\\n\\n        return this.queue(type, function (next, hooks) {\\n            var timeout = setTimeout(next, time);\\n            hooks.stop = function () {\\n                clearTimeout(timeout);\\n            };\\n        });\\n    };\\n\\n    (function () {\\n        var input = document.createElement(\"input\"),\\n            select = document.createElement(\"select\"),\\n            opt = select.appendChild(document.createElement(\"option\"));\\n\\n        input.type = \"checkbox\";\\n\\n        // Support: iOS 5.1, Android 4.x, Android 2.3\\n        // Check the default checkbox/radio value (\"\" on old WebKit; \"on\" elsewhere)\\n        support.checkOn = input.value !== \"\";\\n\\n        // Must access the parent to make an option select properly\\n        // Support: IE9, IE10\\n        support.optSelected = opt.selected;\\n\\n        // Make sure that the options inside disabled selects aren\\'t marked as disabled\\n        // (WebKit marks them as disabled)\\n        select.disabled = true;\\n        support.optDisabled = !opt.disabled;\\n\\n        // Check if an input maintains its value after becoming a radio\\n        // Support: IE9, IE10\\n        input = document.createElement(\"input\");\\n        input.value = \"t\";\\n        input.type = \"radio\";\\n        support.radioValue = input.value === \"t\";\\n    })();\\n\\n    var nodeHook,\\n        boolHook,\\n        attrHandle = jQuery.expr.attrHandle;\\n\\n    jQuery.fn.extend({\\n        attr: function attr(name, value) {\\n            return access(this, jQuery.attr, name, value, arguments.length > 1);\\n        },\\n\\n        removeAttr: function removeAttr(name) {\\n            return this.each(function () {\\n                jQuery.removeAttr(this, name);\\n            });\\n        }\\n    });\\n\\n    jQuery.extend({\\n        attr: function attr(elem, name, value) {\\n            var hooks,\\n                ret,\\n                nType = elem.nodeType;\\n\\n            // don\\'t get/set attributes on text, comment and attribute nodes\\n            if (!elem || nType === 3 || nType === 8 || nType === 2) {\\n                return;\\n            }\\n\\n            // Fallback to prop when attributes are not supported\\n            if (_typeof(elem.getAttribute) === strundefined) {\\n                return jQuery.prop(elem, name, value);\\n            }\\n\\n            // All attributes are lowercase\\n            // Grab necessary hook if one is defined\\n            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\\n                name = name.toLowerCase();\\n                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);\\n            }\\n\\n            if (value !== undefined) {\\n\\n                if (value === null) {\\n                    jQuery.removeAttr(elem, name);\\n                } else if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\\n                    return ret;\\n                } else {\\n                    elem.setAttribute(name, value + \"\");\\n                    return value;\\n                }\\n            } else if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\\n                return ret;\\n            } else {\\n                ret = jQuery.find.attr(elem, name);\\n\\n                // Non-existent attributes return null, we normalize to undefined\\n                return ret == null ? undefined : ret;\\n            }\\n        },\\n\\n        removeAttr: function removeAttr(elem, value) {\\n            var name,\\n                propName,\\n                i = 0,\\n                attrNames = value && value.match(rnotwhite);\\n\\n            if (attrNames && elem.nodeType === 1) {\\n                while (name = attrNames[i++]) {\\n                    propName = jQuery.propFix[name] || name;\\n\\n                    // Boolean attributes get special treatment (#10870)\\n                    if (jQuery.expr.match.bool.test(name)) {\\n                        // Set corresponding property to false\\n                        elem[propName] = false;\\n                    }\\n\\n                    elem.removeAttribute(name);\\n                }\\n            }\\n        },\\n\\n        attrHooks: {\\n            type: {\\n                set: function set(elem, value) {\\n                    if (!support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\\n                        // Setting the type on a radio button after the value resets the value in IE6-9\\n                        // Reset value to default in case type is set after value during creation\\n                        var val = elem.value;\\n                        elem.setAttribute(\"type\", value);\\n                        if (val) {\\n                            elem.value = val;\\n                        }\\n                        return value;\\n                    }\\n                }\\n            }\\n        }\\n    });\\n\\n    // Hooks for boolean attributes\\n    boolHook = {\\n        set: function set(elem, value, name) {\\n            if (value === false) {\\n                // Remove boolean attributes when set to false\\n                jQuery.removeAttr(elem, name);\\n            } else {\\n                elem.setAttribute(name, name);\\n            }\\n            return name;\\n        }\\n    };\\n    jQuery.each(jQuery.expr.match.bool.source.match(/\\\\w+/g), function (i, name) {\\n        var getter = attrHandle[name] || jQuery.find.attr;\\n\\n        attrHandle[name] = function (elem, name, isXML) {\\n            var ret, handle;\\n            if (!isXML) {\\n                // Avoid an infinite loop by temporarily removing this function from the getter\\n                handle = attrHandle[name];\\n                attrHandle[name] = ret;\\n                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;\\n                attrHandle[name] = handle;\\n            }\\n            return ret;\\n        };\\n    });\\n\\n    var rfocusable = /^(?:input|select|textarea|button)$/i;\\n\\n    jQuery.fn.extend({\\n        prop: function prop(name, value) {\\n            return access(this, jQuery.prop, name, value, arguments.length > 1);\\n        },\\n\\n        removeProp: function removeProp(name) {\\n            return this.each(function () {\\n                delete this[jQuery.propFix[name] || name];\\n            });\\n        }\\n    });\\n\\n    jQuery.extend({\\n        propFix: {\\n            \"for\": \"htmlFor\",\\n            \"class\": \"className\"\\n        },\\n\\n        prop: function prop(elem, name, value) {\\n            var ret,\\n                hooks,\\n                notxml,\\n                nType = elem.nodeType;\\n\\n            // don\\'t get/set properties on text, comment and attribute nodes\\n            if (!elem || nType === 3 || nType === 8 || nType === 2) {\\n                return;\\n            }\\n\\n            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);\\n\\n            if (notxml) {\\n                // Fix name and attach hooks\\n                name = jQuery.propFix[name] || name;\\n                hooks = jQuery.propHooks[name];\\n            }\\n\\n            if (value !== undefined) {\\n                return hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;\\n            } else {\\n                return hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];\\n            }\\n        },\\n\\n        propHooks: {\\n            tabIndex: {\\n                get: function get(elem) {\\n                    return elem.hasAttribute(\"tabindex\") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;\\n                }\\n            }\\n        }\\n    });\\n\\n    // Support: IE9+\\n    // Selectedness for an option in an optgroup can be inaccurate\\n    if (!support.optSelected) {\\n        jQuery.propHooks.selected = {\\n            get: function get(elem) {\\n                var parent = elem.parentNode;\\n                if (parent && parent.parentNode) {\\n                    parent.parentNode.selectedIndex;\\n                }\\n                return null;\\n            }\\n        };\\n    }\\n\\n    jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\\n        jQuery.propFix[this.toLowerCase()] = this;\\n    });\\n\\n    var rclass = /[\\\\t\\\\r\\\\n\\\\f]/g;\\n\\n    jQuery.fn.extend({\\n        addClass: function addClass(value) {\\n            var classes,\\n                elem,\\n                cur,\\n                clazz,\\n                j,\\n                finalValue,\\n                proceed = typeof value === \"string\" && value,\\n                i = 0,\\n                len = this.length;\\n\\n            if (jQuery.isFunction(value)) {\\n                return this.each(function (j) {\\n                    jQuery(this).addClass(value.call(this, j, this.className));\\n                });\\n            }\\n\\n            if (proceed) {\\n                // The disjunction here is for better compressibility (see removeClass)\\n                classes = (value || \"\").match(rnotwhite) || [];\\n\\n                for (; i < len; i++) {\\n                    elem = this[i];\\n                    cur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \" \");\\n\\n                    if (cur) {\\n                        j = 0;\\n                        while (clazz = classes[j++]) {\\n                            if (cur.indexOf(\" \" + clazz + \" \") < 0) {\\n                                cur += clazz + \" \";\\n                            }\\n                        }\\n\\n                        // only assign if different to avoid unneeded rendering.\\n                        finalValue = jQuery.trim(cur);\\n                        if (elem.className !== finalValue) {\\n                            elem.className = finalValue;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return this;\\n        },\\n\\n        removeClass: function removeClass(value) {\\n            var classes,\\n                elem,\\n                cur,\\n                clazz,\\n                j,\\n                finalValue,\\n                proceed = arguments.length === 0 || typeof value === \"string\" && value,\\n                i = 0,\\n                len = this.length;\\n\\n            if (jQuery.isFunction(value)) {\\n                return this.each(function (j) {\\n                    jQuery(this).removeClass(value.call(this, j, this.className));\\n                });\\n            }\\n            if (proceed) {\\n                classes = (value || \"\").match(rnotwhite) || [];\\n\\n                for (; i < len; i++) {\\n                    elem = this[i];\\n                    // This expression is here for better compressibility (see addClass)\\n                    cur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \"\");\\n\\n                    if (cur) {\\n                        j = 0;\\n                        while (clazz = classes[j++]) {\\n                            // Remove *all* instances\\n                            while (cur.indexOf(\" \" + clazz + \" \") >= 0) {\\n                                cur = cur.replace(\" \" + clazz + \" \", \" \");\\n                            }\\n                        }\\n\\n                        // only assign if different to avoid unneeded rendering.\\n                        finalValue = value ? jQuery.trim(cur) : \"\";\\n                        if (elem.className !== finalValue) {\\n                            elem.className = finalValue;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            return this;\\n        },\\n\\n        toggleClass: function toggleClass(value, stateVal) {\\n            var type = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\\n\\n            if (typeof stateVal === \"boolean\" && type === \"string\") {\\n                return stateVal ? this.addClass(value) : this.removeClass(value);\\n            }\\n\\n            if (jQuery.isFunction(value)) {\\n                return this.each(function (i) {\\n                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\\n                });\\n            }\\n\\n            return this.each(function () {\\n                if (type === \"string\") {\\n                    // toggle individual class names\\n                    var className,\\n                        i = 0,\\n                        self = jQuery(this),\\n                        classNames = value.match(rnotwhite) || [];\\n\\n                    while (className = classNames[i++]) {\\n                        // check each className given, space separated list\\n                        if (self.hasClass(className)) {\\n                            self.removeClass(className);\\n                        } else {\\n                            self.addClass(className);\\n                        }\\n                    }\\n\\n                    // Toggle whole class name\\n                } else if (type === strundefined || type === \"boolean\") {\\n                    if (this.className) {\\n                        // store className if set\\n                        data_priv.set(this, \"__className__\", this.className);\\n                    }\\n\\n                    // If the element has a class name or if we\\'re passed \"false\",\\n                    // then remove the whole classname (if there was one, the above saved it).\\n                    // Otherwise bring back whatever was previously saved (if anything),\\n                    // falling back to the empty string if nothing was stored.\\n                    this.className = this.className || value === false ? \"\" : data_priv.get(this, \"__className__\") || \"\";\\n                }\\n            });\\n        },\\n\\n        hasClass: function hasClass(selector) {\\n            var className = \" \" + selector + \" \",\\n                i = 0,\\n                l = this.length;\\n            for (; i < l; i++) {\\n                if (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\\n                    return true;\\n                }\\n            }\\n\\n            return false;\\n        }\\n    });\\n\\n    var rreturn = /\\\\r/g;\\n\\n    jQuery.fn.extend({\\n        val: function val(value) {\\n            var hooks,\\n                ret,\\n                isFunction,\\n                elem = this[0];\\n\\n            if (!arguments.length) {\\n                if (elem) {\\n                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\\n\\n                    if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\\n                        return ret;\\n                    }\\n\\n                    ret = elem.value;\\n\\n                    return typeof ret === \"string\" ?\\n                    // handle most common string cases\\n                    ret.replace(rreturn, \"\") :\\n                    // handle cases where value is null/undef or number\\n                    ret == null ? \"\" : ret;\\n                }\\n\\n                return;\\n            }\\n\\n            isFunction = jQuery.isFunction(value);\\n\\n            return this.each(function (i) {\\n                var val;\\n\\n                if (this.nodeType !== 1) {\\n                    return;\\n                }\\n\\n                if (isFunction) {\\n                    val = value.call(this, i, jQuery(this).val());\\n                } else {\\n                    val = value;\\n                }\\n\\n                // Treat null/undefined as \"\"; convert numbers to string\\n                if (val == null) {\\n                    val = \"\";\\n                } else if (typeof val === \"number\") {\\n                    val += \"\";\\n                } else if (jQuery.isArray(val)) {\\n                    val = jQuery.map(val, function (value) {\\n                        return value == null ? \"\" : value + \"\";\\n                    });\\n                }\\n\\n                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\\n\\n                // If set returns undefined, fall back to normal setting\\n                if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\\n                    this.value = val;\\n                }\\n            });\\n        }\\n    });\\n\\n    jQuery.extend({\\n        valHooks: {\\n            option: {\\n                get: function get(elem) {\\n                    var val = jQuery.find.attr(elem, \"value\");\\n                    return val != null ? val :\\n                    // Support: IE10-11+\\n                    // option.text throws exceptions (#14686, #14858)\\n                    jQuery.trim(jQuery.text(elem));\\n                }\\n            },\\n            select: {\\n                get: function get(elem) {\\n                    var value,\\n                        option,\\n                        options = elem.options,\\n                        index = elem.selectedIndex,\\n                        one = elem.type === \"select-one\" || index < 0,\\n                        values = one ? null : [],\\n                        max = one ? index + 1 : options.length,\\n                        i = index < 0 ? max : one ? index : 0;\\n\\n                    // Loop through all the selected options\\n                    for (; i < max; i++) {\\n                        option = options[i];\\n\\n                        // IE6-9 doesn\\'t update selected after form reset (#2551)\\n                        if ((option.selected || i === index) && (\\n                        // Don\\'t return options that are disabled or in a disabled optgroup\\n                        support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\\n\\n                            // Get the specific value for the option\\n                            value = jQuery(option).val();\\n\\n                            // We don\\'t need an array for one selects\\n                            if (one) {\\n                                return value;\\n                            }\\n\\n                            // Multi-Selects return an array\\n                            values.push(value);\\n                        }\\n                    }\\n\\n                    return values;\\n                },\\n\\n                set: function set(elem, value) {\\n                    var optionSet,\\n                        option,\\n                        options = elem.options,\\n                        values = jQuery.makeArray(value),\\n                        i = options.length;\\n\\n                    while (i--) {\\n                        option = options[i];\\n                        if (option.selected = jQuery.inArray(option.value, values) >= 0) {\\n                            optionSet = true;\\n                        }\\n                    }\\n\\n                    // force browsers to behave consistently when non-matching value is set\\n                    if (!optionSet) {\\n                        elem.selectedIndex = -1;\\n                    }\\n                    return values;\\n                }\\n            }\\n        }\\n    });\\n\\n    // Radios and checkboxes getter/setter\\n    jQuery.each([\"radio\", \"checkbox\"], function () {\\n        jQuery.valHooks[this] = {\\n            set: function set(elem, value) {\\n                if (jQuery.isArray(value)) {\\n                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\\n                }\\n            }\\n        };\\n        if (!support.checkOn) {\\n            jQuery.valHooks[this].get = function (elem) {\\n                // Support: Webkit\\n                // \"\" is returned instead of \"on\" if a value isn\\'t specified\\n                return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\\n            };\\n        }\\n    });\\n\\n    // Return jQuery for attributes-only inclusion\\n\\n\\n    jQuery.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\\n\\n        // Handle event binding\\n        jQuery.fn[name] = function (data, fn) {\\n            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\\n        };\\n    });\\n\\n    jQuery.fn.extend({\\n        hover: function hover(fnOver, fnOut) {\\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\\n        },\\n\\n        bind: function bind(types, data, fn) {\\n            return this.on(types, null, data, fn);\\n        },\\n        unbind: function unbind(types, fn) {\\n            return this.off(types, null, fn);\\n        },\\n\\n        delegate: function delegate(selector, types, data, fn) {\\n            return this.on(types, selector, data, fn);\\n        },\\n        undelegate: function undelegate(selector, types, fn) {\\n            // ( namespace ) or ( selector, types [, fn] )\\n            return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\\n        }\\n    });\\n\\n    var nonce = jQuery.now();\\n\\n    var rquery = /\\\\?/;\\n\\n    // Support: Android 2.3\\n    // Workaround failure to string-cast null input\\n    jQuery.parseJSON = function (data) {\\n        return JSON.parse(data + \"\");\\n    };\\n\\n    // Cross-browser xml parsing\\n    jQuery.parseXML = function (data) {\\n        var xml, tmp;\\n        if (!data || typeof data !== \"string\") {\\n            return null;\\n        }\\n\\n        // Support: IE9\\n        try {\\n            tmp = new DOMParser();\\n            xml = tmp.parseFromString(data, \"text/xml\");\\n        } catch (e) {\\n            xml = undefined;\\n        }\\n\\n        if (!xml || xml.getElementsByTagName(\"parsererror\").length) {\\n            jQuery.error(\"Invalid XML: \" + data);\\n        }\\n        return xml;\\n    };\\n\\n    var\\n    // Document location\\n    ajaxLocParts,\\n        ajaxLocation,\\n        rhash = /#.*$/,\\n        rts = /([?&])_=[^&]*/,\\n        rheaders = /^(.*?):[ \\\\t]*([^\\\\r\\\\n]*)$/mg,\\n\\n    // #7653, #8125, #8152: local protocol detection\\n    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\\n        rnoContent = /^(?:GET|HEAD)$/,\\n        rprotocol = /^\\\\/\\\\//,\\n        rurl = /^([\\\\w.+-]+:)(?:\\\\/\\\\/(?:[^\\\\/?#]*@|)([^\\\\/?#:]*)(?::(\\\\d+)|)|)/,\\n\\n\\n    /* Prefilters\\r\\n     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\\r\\n     * 2) These are called:\\r\\n     *    - BEFORE asking for a transport\\r\\n     *    - AFTER param serialization (s.data is a string if s.processData is true)\\r\\n     * 3) key is the dataType\\r\\n     * 4) the catchall symbol \"*\" can be used\\r\\n     * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\\r\\n     */\\n    prefilters = {},\\n\\n\\n    /* Transports bindings\\r\\n     * 1) key is the dataType\\r\\n     * 2) the catchall symbol \"*\" can be used\\r\\n     * 3) selection will start with transport dataType and THEN go to \"*\" if needed\\r\\n     */\\n    transports = {},\\n\\n\\n    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\\n    allTypes = \"*/\".concat(\"*\");\\n\\n    // #8138, IE may throw an exception when accessing\\n    // a field from window.location if document.domain has been set\\n    try {\\n        ajaxLocation = location.href;\\n    } catch (e) {\\n        // Use the href attribute of an A element\\n        // since IE will modify it given document.location\\n        ajaxLocation = document.createElement(\"a\");\\n        ajaxLocation.href = \"\";\\n        ajaxLocation = ajaxLocation.href;\\n    }\\n\\n    // Segment location into parts\\n    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\\n\\n    // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\\n    function addToPrefiltersOrTransports(structure) {\\n\\n        // dataTypeExpression is optional and defaults to \"*\"\\n        return function (dataTypeExpression, func) {\\n\\n            if (typeof dataTypeExpression !== \"string\") {\\n                func = dataTypeExpression;\\n                dataTypeExpression = \"*\";\\n            }\\n\\n            var dataType,\\n                i = 0,\\n                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\\n\\n            if (jQuery.isFunction(func)) {\\n                // For each dataType in the dataTypeExpression\\n                while (dataType = dataTypes[i++]) {\\n                    // Prepend if requested\\n                    if (dataType[0] === \"+\") {\\n                        dataType = dataType.slice(1) || \"*\";\\n                        (structure[dataType] = structure[dataType] || []).unshift(func);\\n\\n                        // Otherwise append\\n                    } else {\\n                        (structure[dataType] = structure[dataType] || []).push(func);\\n                    }\\n                }\\n            }\\n        };\\n    }\\n\\n    // Base inspection function for prefilters and transports\\n    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\\n\\n        var inspected = {},\\n            seekingTransport = structure === transports;\\n\\n        function inspect(dataType) {\\n            var selected;\\n            inspected[dataType] = true;\\n            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\\n                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\\n                if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\\n                    options.dataTypes.unshift(dataTypeOrTransport);\\n                    inspect(dataTypeOrTransport);\\n                    return false;\\n                } else if (seekingTransport) {\\n                    return !(selected = dataTypeOrTransport);\\n                }\\n            });\\n            return selected;\\n        }\\n\\n        return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\\n    }\\n\\n    // A special extend for ajax options\\n    // that takes \"flat\" options (not to be deep extended)\\n    // Fixes #9887\\n    function ajaxExtend(target, src) {\\n        var key,\\n            deep,\\n            flatOptions = jQuery.ajaxSettings.flatOptions || {};\\n\\n        for (key in src) {\\n            if (src[key] !== undefined) {\\n                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\\n            }\\n        }\\n        if (deep) {\\n            jQuery.extend(true, target, deep);\\n        }\\n\\n        return target;\\n    }\\n\\n    /* Handles responses to an ajax request:\\r\\n     * - finds the right dataType (mediates between content-type and expected dataType)\\r\\n     * - returns the corresponding response\\r\\n     */\\n    function ajaxHandleResponses(s, jqXHR, responses) {\\n\\n        var ct,\\n            type,\\n            finalDataType,\\n            firstDataType,\\n            contents = s.contents,\\n            dataTypes = s.dataTypes;\\n\\n        // Remove auto dataType and get content-type in the process\\n        while (dataTypes[0] === \"*\") {\\n            dataTypes.shift();\\n            if (ct === undefined) {\\n                ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\\n            }\\n        }\\n\\n        // Check if we\\'re dealing with a known content-type\\n        if (ct) {\\n            for (type in contents) {\\n                if (contents[type] && contents[type].test(ct)) {\\n                    dataTypes.unshift(type);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // Check to see if we have a response for the expected dataType\\n        if (dataTypes[0] in responses) {\\n            finalDataType = dataTypes[0];\\n        } else {\\n            // Try convertible dataTypes\\n            for (type in responses) {\\n                if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\\n                    finalDataType = type;\\n                    break;\\n                }\\n                if (!firstDataType) {\\n                    firstDataType = type;\\n                }\\n            }\\n            // Or just use first one\\n            finalDataType = finalDataType || firstDataType;\\n        }\\n\\n        // If we found a dataType\\n        // We add the dataType to the list if needed\\n        // and return the corresponding response\\n        if (finalDataType) {\\n            if (finalDataType !== dataTypes[0]) {\\n                dataTypes.unshift(finalDataType);\\n            }\\n            return responses[finalDataType];\\n        }\\n    }\\n\\n    /* Chain conversions given the request and the original response\\r\\n     * Also sets the responseXXX fields on the jqXHR instance\\r\\n     */\\n    function ajaxConvert(s, response, jqXHR, isSuccess) {\\n        var conv2,\\n            current,\\n            conv,\\n            tmp,\\n            prev,\\n            converters = {},\\n\\n        // Work with a copy of dataTypes in case we need to modify it for conversion\\n        dataTypes = s.dataTypes.slice();\\n\\n        // Create converters map with lowercased keys\\n        if (dataTypes[1]) {\\n            for (conv in s.converters) {\\n                converters[conv.toLowerCase()] = s.converters[conv];\\n            }\\n        }\\n\\n        current = dataTypes.shift();\\n\\n        // Convert to each sequential dataType\\n        while (current) {\\n\\n            if (s.responseFields[current]) {\\n                jqXHR[s.responseFields[current]] = response;\\n            }\\n\\n            // Apply the dataFilter if provided\\n            if (!prev && isSuccess && s.dataFilter) {\\n                response = s.dataFilter(response, s.dataType);\\n            }\\n\\n            prev = current;\\n            current = dataTypes.shift();\\n\\n            if (current) {\\n\\n                // There\\'s only work to do if current dataType is non-auto\\n                if (current === \"*\") {\\n\\n                    current = prev;\\n\\n                    // Convert response if prev dataType is non-auto and differs from current\\n                } else if (prev !== \"*\" && prev !== current) {\\n\\n                    // Seek a direct converter\\n                    conv = converters[prev + \" \" + current] || converters[\"* \" + current];\\n\\n                    // If none found, seek a pair\\n                    if (!conv) {\\n                        for (conv2 in converters) {\\n\\n                            // If conv2 outputs current\\n                            tmp = conv2.split(\" \");\\n                            if (tmp[1] === current) {\\n\\n                                // If prev can be converted to accepted input\\n                                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\\n                                if (conv) {\\n                                    // Condense equivalence converters\\n                                    if (conv === true) {\\n                                        conv = converters[conv2];\\n\\n                                        // Otherwise, insert the intermediate dataType\\n                                    } else if (converters[conv2] !== true) {\\n                                        current = tmp[0];\\n                                        dataTypes.unshift(tmp[1]);\\n                                    }\\n                                    break;\\n                                }\\n                            }\\n                        }\\n                    }\\n\\n                    // Apply converter (if not an equivalence)\\n                    if (conv !== true) {\\n\\n                        // Unless errors are allowed to bubble, catch and return them\\n                        if (conv && s[\"throws\"]) {\\n                            response = conv(response);\\n                        } else {\\n                            try {\\n                                response = conv(response);\\n                            } catch (e) {\\n                                return { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        return { state: \"success\", data: response };\\n    }\\n\\n    jQuery.extend({\\n\\n        // Counter for holding the number of active queries\\n        active: 0,\\n\\n        // Last-Modified header cache for next request\\n        lastModified: {},\\n        etag: {},\\n\\n        ajaxSettings: {\\n            url: ajaxLocation,\\n            type: \"GET\",\\n            isLocal: rlocalProtocol.test(ajaxLocParts[1]),\\n            global: true,\\n            processData: true,\\n            async: true,\\n            contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\\n            /*\\r\\n            timeout: 0,\\r\\n            data: null,\\r\\n            dataType: null,\\r\\n            username: null,\\r\\n            password: null,\\r\\n            cache: null,\\r\\n            throws: false,\\r\\n            traditional: false,\\r\\n            headers: {},\\r\\n            */\\n\\n            accepts: {\\n                \"*\": allTypes,\\n                text: \"text/plain\",\\n                html: \"text/html\",\\n                xml: \"application/xml, text/xml\",\\n                json: \"application/json, text/javascript\"\\n            },\\n\\n            contents: {\\n                xml: /xml/,\\n                html: /html/,\\n                json: /json/\\n            },\\n\\n            responseFields: {\\n                xml: \"responseXML\",\\n                text: \"responseText\",\\n                json: \"responseJSON\"\\n            },\\n\\n            // Data converters\\n            // Keys separate source (or catchall \"*\") and destination types with a single space\\n            converters: {\\n\\n                // Convert anything to text\\n                \"* text\": String,\\n\\n                // Text to html (true = no transformation)\\n                \"text html\": true,\\n\\n                // Evaluate text as a json expression\\n                \"text json\": jQuery.parseJSON,\\n\\n                // Parse text as xml\\n                \"text xml\": jQuery.parseXML\\n            },\\n\\n            // For options that shouldn\\'t be deep extended:\\n            // you can add your own custom options here if\\n            // and when you create one that shouldn\\'t be\\n            // deep extended (see ajaxExtend)\\n            flatOptions: {\\n                url: true,\\n                context: true\\n            }\\n        },\\n\\n        // Creates a full fledged settings object into target\\n        // with both ajaxSettings and settings fields.\\n        // If target is omitted, writes into ajaxSettings.\\n        ajaxSetup: function ajaxSetup(target, settings) {\\n            return settings ?\\n\\n            // Building a settings object\\n            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\\n\\n            // Extending ajaxSettings\\n            ajaxExtend(jQuery.ajaxSettings, target);\\n        },\\n\\n        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\\n        ajaxTransport: addToPrefiltersOrTransports(transports),\\n\\n        // Main method\\n        ajax: function ajax(url, options) {\\n\\n            // If url is an object, simulate pre-1.5 signature\\n            if ((typeof url === \"undefined\" ? \"undefined\" : _typeof(url)) === \"object\") {\\n                options = url;\\n                url = undefined;\\n            }\\n\\n            // Force options to be an object\\n            options = options || {};\\n\\n            var transport,\\n\\n            // URL without anti-cache param\\n            cacheURL,\\n\\n            // Response headers\\n            responseHeadersString,\\n                responseHeaders,\\n\\n            // timeout handle\\n            timeoutTimer,\\n\\n            // Cross-domain detection vars\\n            parts,\\n\\n            // To know if global events are to be dispatched\\n            fireGlobals,\\n\\n            // Loop variable\\n            i,\\n\\n            // Create the final options object\\n            s = jQuery.ajaxSetup({}, options),\\n\\n            // Callbacks context\\n            callbackContext = s.context || s,\\n\\n            // Context for global events is callbackContext if it is a DOM node or jQuery collection\\n            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\\n\\n            // Deferreds\\n            deferred = jQuery.Deferred(),\\n                completeDeferred = jQuery.Callbacks(\"once memory\"),\\n\\n            // Status-dependent callbacks\\n            _statusCode = s.statusCode || {},\\n\\n            // Headers (they are sent all at once)\\n            requestHeaders = {},\\n                requestHeadersNames = {},\\n\\n            // The jqXHR state\\n            state = 0,\\n\\n            // Default abort message\\n            strAbort = \"canceled\",\\n\\n            // Fake xhr\\n            jqXHR = {\\n                readyState: 0,\\n\\n                // Builds headers hashtable if needed\\n                getResponseHeader: function getResponseHeader(key) {\\n                    var match;\\n                    if (state === 2) {\\n                        if (!responseHeaders) {\\n                            responseHeaders = {};\\n                            while (match = rheaders.exec(responseHeadersString)) {\\n                                responseHeaders[match[1].toLowerCase()] = match[2];\\n                            }\\n                        }\\n                        match = responseHeaders[key.toLowerCase()];\\n                    }\\n                    return match == null ? null : match;\\n                },\\n\\n                // Raw string\\n                getAllResponseHeaders: function getAllResponseHeaders() {\\n                    return state === 2 ? responseHeadersString : null;\\n                },\\n\\n                // Caches the header\\n                setRequestHeader: function setRequestHeader(name, value) {\\n                    var lname = name.toLowerCase();\\n                    if (!state) {\\n                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\\n                        requestHeaders[name] = value;\\n                    }\\n                    return this;\\n                },\\n\\n                // Overrides response content-type header\\n                overrideMimeType: function overrideMimeType(type) {\\n                    if (!state) {\\n                        s.mimeType = type;\\n                    }\\n                    return this;\\n                },\\n\\n                // Status-dependent callbacks\\n                statusCode: function statusCode(map) {\\n                    var code;\\n                    if (map) {\\n                        if (state < 2) {\\n                            for (code in map) {\\n                                // Lazy-add the new callback in a way that preserves old ones\\n                                _statusCode[code] = [_statusCode[code], map[code]];\\n                            }\\n                        } else {\\n                            // Execute the appropriate callbacks\\n                            jqXHR.always(map[jqXHR.status]);\\n                        }\\n                    }\\n                    return this;\\n                },\\n\\n                // Cancel the request\\n                abort: function abort(statusText) {\\n                    var finalText = statusText || strAbort;\\n                    if (transport) {\\n                        transport.abort(finalText);\\n                    }\\n                    done(0, finalText);\\n                    return this;\\n                }\\n            };\\n\\n            // Attach deferreds\\n            deferred.promise(jqXHR).complete = completeDeferred.add;\\n            jqXHR.success = jqXHR.done;\\n            jqXHR.error = jqXHR.fail;\\n\\n            // Remove hash character (#7531: and string promotion)\\n            // Add protocol if not provided (prefilters might expect it)\\n            // Handle falsy url in the settings object (#10093: consistency with old signature)\\n            // We also use the url parameter if available\\n            s.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\");\\n\\n            // Alias method option to type as per ticket #12004\\n            s.type = options.method || options.type || s.method || s.type;\\n\\n            // Extract dataTypes list\\n            s.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(rnotwhite) || [\"\"];\\n\\n            // A cross-domain request is in order when we have a protocol:host:port mismatch\\n            if (s.crossDomain == null) {\\n                parts = rurl.exec(s.url.toLowerCase());\\n                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? \"80\" : \"443\")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? \"80\" : \"443\"))));\\n            }\\n\\n            // Convert data if not already a string\\n            if (s.data && s.processData && typeof s.data !== \"string\") {\\n                s.data = jQuery.param(s.data, s.traditional);\\n            }\\n\\n            // Apply prefilters\\n            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\\n\\n            // If request was aborted inside a prefilter, stop there\\n            if (state === 2) {\\n                return jqXHR;\\n            }\\n\\n            // We can fire global events as of now if asked to\\n            fireGlobals = s.global;\\n\\n            // Watch for a new set of requests\\n            if (fireGlobals && jQuery.active++ === 0) {\\n                jQuery.event.trigger(\"ajaxStart\");\\n            }\\n\\n            // Uppercase the type\\n            s.type = s.type.toUpperCase();\\n\\n            // Determine if request has content\\n            s.hasContent = !rnoContent.test(s.type);\\n\\n            // Save the URL in case we\\'re toying with the If-Modified-Since\\n            // and/or If-None-Match header later on\\n            cacheURL = s.url;\\n\\n            // More options handling for requests with no content\\n            if (!s.hasContent) {\\n\\n                // If data is available, append data to url\\n                if (s.data) {\\n                    cacheURL = s.url += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\\n                    // #9682: remove data so that it\\'s not used in an eventual retry\\n                    delete s.data;\\n                }\\n\\n                // Add anti-cache in url if needed\\n                if (s.cache === false) {\\n                    s.url = rts.test(cacheURL) ?\\n\\n                    // If there is already a \\'_\\' parameter, set its value\\n                    cacheURL.replace(rts, \"$1_=\" + nonce++) :\\n\\n                    // Otherwise add one to the end\\n                    cacheURL + (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++;\\n                }\\n            }\\n\\n            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n            if (s.ifModified) {\\n                if (jQuery.lastModified[cacheURL]) {\\n                    jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\\n                }\\n                if (jQuery.etag[cacheURL]) {\\n                    jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\\n                }\\n            }\\n\\n            // Set the correct header, if data is being sent\\n            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\\n                jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\\n            }\\n\\n            // Set the Accepts header for the server, depending on the dataType\\n            jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\\n\\n            // Check for headers option\\n            for (i in s.headers) {\\n                jqXHR.setRequestHeader(i, s.headers[i]);\\n            }\\n\\n            // Allow custom headers/mimetypes and early abort\\n            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\\n                // Abort if not done already and return\\n                return jqXHR.abort();\\n            }\\n\\n            // aborting is no longer a cancellation\\n            strAbort = \"abort\";\\n\\n            // Install callbacks on deferreds\\n            for (i in { success: 1, error: 1, complete: 1 }) {\\n                jqXHR[i](s[i]);\\n            }\\n\\n            // Get transport\\n            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\\n\\n            // If no transport, we auto-abort\\n            if (!transport) {\\n                done(-1, \"No Transport\");\\n            } else {\\n                jqXHR.readyState = 1;\\n\\n                // Send global event\\n                if (fireGlobals) {\\n                    globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\\n                }\\n                // Timeout\\n                if (s.async && s.timeout > 0) {\\n                    timeoutTimer = setTimeout(function () {\\n                        jqXHR.abort(\"timeout\");\\n                    }, s.timeout);\\n                }\\n\\n                try {\\n                    state = 1;\\n                    transport.send(requestHeaders, done);\\n                } catch (e) {\\n                    // Propagate exception as error if not done\\n                    if (state < 2) {\\n                        done(-1, e);\\n                        // Simply rethrow otherwise\\n                    } else {\\n                        throw e;\\n                    }\\n                }\\n            }\\n\\n            // Callback for when everything is done\\n            function done(status, nativeStatusText, responses, headers) {\\n                var isSuccess,\\n                    success,\\n                    error,\\n                    response,\\n                    modified,\\n                    statusText = nativeStatusText;\\n\\n                // Called once\\n                if (state === 2) {\\n                    return;\\n                }\\n\\n                // State is \"done\" now\\n                state = 2;\\n\\n                // Clear timeout if it exists\\n                if (timeoutTimer) {\\n                    clearTimeout(timeoutTimer);\\n                }\\n\\n                // Dereference transport for early garbage collection\\n                // (no matter how long the jqXHR object will be used)\\n                transport = undefined;\\n\\n                // Cache response headers\\n                responseHeadersString = headers || \"\";\\n\\n                // Set readyState\\n                jqXHR.readyState = status > 0 ? 4 : 0;\\n\\n                // Determine if successful\\n                isSuccess = status >= 200 && status < 300 || status === 304;\\n\\n                // Get response data\\n                if (responses) {\\n                    response = ajaxHandleResponses(s, jqXHR, responses);\\n                }\\n\\n                // Convert no matter what (that way responseXXX fields are always set)\\n                response = ajaxConvert(s, response, jqXHR, isSuccess);\\n\\n                // If successful, handle type chaining\\n                if (isSuccess) {\\n\\n                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n                    if (s.ifModified) {\\n                        modified = jqXHR.getResponseHeader(\"Last-Modified\");\\n                        if (modified) {\\n                            jQuery.lastModified[cacheURL] = modified;\\n                        }\\n                        modified = jqXHR.getResponseHeader(\"etag\");\\n                        if (modified) {\\n                            jQuery.etag[cacheURL] = modified;\\n                        }\\n                    }\\n\\n                    // if no content\\n                    if (status === 204 || s.type === \"HEAD\") {\\n                        statusText = \"nocontent\";\\n\\n                        // if not modified\\n                    } else if (status === 304) {\\n                        statusText = \"notmodified\";\\n\\n                        // If we have data, let\\'s convert it\\n                    } else {\\n                        statusText = response.state;\\n                        success = response.data;\\n                        error = response.error;\\n                        isSuccess = !error;\\n                    }\\n                } else {\\n                    // We extract error from statusText\\n                    // then normalize statusText and status for non-aborts\\n                    error = statusText;\\n                    if (status || !statusText) {\\n                        statusText = \"error\";\\n                        if (status < 0) {\\n                            status = 0;\\n                        }\\n                    }\\n                }\\n\\n                // Set data for the fake xhr object\\n                jqXHR.status = status;\\n                jqXHR.statusText = (nativeStatusText || statusText) + \"\";\\n\\n                // Success/Error\\n                if (isSuccess) {\\n                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\\n                } else {\\n                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\\n                }\\n\\n                // Status-dependent callbacks\\n                jqXHR.statusCode(_statusCode);\\n                _statusCode = undefined;\\n\\n                if (fireGlobals) {\\n                    globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\\n                }\\n\\n                // Complete\\n                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\\n\\n                if (fireGlobals) {\\n                    globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\\n                    // Handle the global AJAX counter\\n                    if (! --jQuery.active) {\\n                        jQuery.event.trigger(\"ajaxStop\");\\n                    }\\n                }\\n            }\\n\\n            return jqXHR;\\n        },\\n\\n        getJSON: function getJSON(url, data, callback) {\\n            return jQuery.get(url, data, callback, \"json\");\\n        },\\n\\n        getScript: function getScript(url, callback) {\\n            return jQuery.get(url, undefined, callback, \"script\");\\n        }\\n    });\\n\\n    jQuery.each([\"get\", \"post\"], function (i, method) {\\n        jQuery[method] = function (url, data, callback, type) {\\n            // shift arguments if data argument was omitted\\n            if (jQuery.isFunction(data)) {\\n                type = type || callback;\\n                callback = data;\\n                data = undefined;\\n            }\\n\\n            return jQuery.ajax({\\n                url: url,\\n                type: method,\\n                dataType: type,\\n                data: data,\\n                success: callback\\n            });\\n        };\\n    });\\n\\n    // Attach a bunch of functions for handling common AJAX events\\n    jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\\n        jQuery.fn[type] = function (fn) {\\n            return this.on(type, fn);\\n        };\\n    });\\n\\n    jQuery._evalUrl = function (url) {\\n        return jQuery.ajax({\\n            url: url,\\n            type: \"GET\",\\n            dataType: \"script\",\\n            async: false,\\n            global: false,\\n            \"throws\": true\\n        });\\n    };\\n\\n    jQuery.fn.extend({\\n        wrapAll: function wrapAll(html) {\\n            var wrap;\\n\\n            if (jQuery.isFunction(html)) {\\n                return this.each(function (i) {\\n                    jQuery(this).wrapAll(html.call(this, i));\\n                });\\n            }\\n\\n            if (this[0]) {\\n\\n                // The elements to wrap the target around\\n                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\\n\\n                if (this[0].parentNode) {\\n                    wrap.insertBefore(this[0]);\\n                }\\n\\n                wrap.map(function () {\\n                    var elem = this;\\n\\n                    while (elem.firstElementChild) {\\n                        elem = elem.firstElementChild;\\n                    }\\n\\n                    return elem;\\n                }).append(this);\\n            }\\n\\n            return this;\\n        },\\n\\n        wrapInner: function wrapInner(html) {\\n            if (jQuery.isFunction(html)) {\\n                return this.each(function (i) {\\n                    jQuery(this).wrapInner(html.call(this, i));\\n                });\\n            }\\n\\n            return this.each(function () {\\n                var self = jQuery(this),\\n                    contents = self.contents();\\n\\n                if (contents.length) {\\n                    contents.wrapAll(html);\\n                } else {\\n                    self.append(html);\\n                }\\n            });\\n        },\\n\\n        wrap: function wrap(html) {\\n            var isFunction = jQuery.isFunction(html);\\n\\n            return this.each(function (i) {\\n                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\\n            });\\n        },\\n\\n        unwrap: function unwrap() {\\n            return this.parent().each(function () {\\n                if (!jQuery.nodeName(this, \"body\")) {\\n                    jQuery(this).replaceWith(this.childNodes);\\n                }\\n            }).end();\\n        }\\n    });\\n\\n    jQuery.expr.filters.hidden = function (elem) {\\n        // Support: Opera <= 12.12\\n        // Opera reports offsetWidths and offsetHeights less than zero on some elements\\n        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;\\n    };\\n    jQuery.expr.filters.visible = function (elem) {\\n        return !jQuery.expr.filters.hidden(elem);\\n    };\\n\\n    var r20 = /%20/g,\\n        rbracket = /\\\\[\\\\]$/,\\n        rCRLF = /\\\\r?\\\\n/g,\\n        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\\n        rsubmittable = /^(?:input|select|textarea|keygen)/i;\\n\\n    function buildParams(prefix, obj, traditional, add) {\\n        var name;\\n\\n        if (jQuery.isArray(obj)) {\\n            // Serialize array item.\\n            jQuery.each(obj, function (i, v) {\\n                if (traditional || rbracket.test(prefix)) {\\n                    // Treat each array item as a scalar.\\n                    add(prefix, v);\\n                } else {\\n                    // Item is non-scalar (array or object), encode its numeric index.\\n                    buildParams(prefix + \"[\" + ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\" ? i : \"\") + \"]\", v, traditional, add);\\n                }\\n            });\\n        } else if (!traditional && jQuery.type(obj) === \"object\") {\\n            // Serialize object item.\\n            for (name in obj) {\\n                buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\\n            }\\n        } else {\\n            // Serialize scalar item.\\n            add(prefix, obj);\\n        }\\n    }\\n\\n    // Serialize an array of form elements or a set of\\n    // key/values into a query string\\n    jQuery.param = function (a, traditional) {\\n        var prefix,\\n            s = [],\\n            add = function add(key, value) {\\n            // If value is a function, invoke it and return its value\\n            value = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\\n            s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\\n        };\\n\\n        // Set traditional to true for jQuery <= 1.3.2 behavior.\\n        if (traditional === undefined) {\\n            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\\n        }\\n\\n        // If an array was passed in, assume that it is an array of form elements.\\n        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\\n            // Serialize the form elements\\n            jQuery.each(a, function () {\\n                add(this.name, this.value);\\n            });\\n        } else {\\n            // If traditional, encode the \"old\" way (the way 1.3.2 or older\\n            // did it), otherwise encode params recursively.\\n            for (prefix in a) {\\n                buildParams(prefix, a[prefix], traditional, add);\\n            }\\n        }\\n\\n        // Return the resulting serialization\\n        return s.join(\"&\").replace(r20, \"+\");\\n    };\\n\\n    jQuery.fn.extend({\\n        serialize: function serialize() {\\n            return jQuery.param(this.serializeArray());\\n        },\\n        serializeArray: function serializeArray() {\\n            return this.map(function () {\\n                // Can add propHook for \"elements\" to filter or add form elements\\n                var elements = jQuery.prop(this, \"elements\");\\n                return elements ? jQuery.makeArray(elements) : this;\\n            }).filter(function () {\\n                var type = this.type;\\n\\n                // Use .is( \":disabled\" ) so that fieldset[disabled] works\\n                return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\\n            }).map(function (i, elem) {\\n                var val = jQuery(this).val();\\n\\n                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\\n                    return { name: elem.name, value: val.replace(rCRLF, \"\\\\r\\\\n\") };\\n                }) : { name: elem.name, value: val.replace(rCRLF, \"\\\\r\\\\n\") };\\n            }).get();\\n        }\\n    });\\n\\n    jQuery.ajaxSettings.xhr = function () {\\n        try {\\n            return new XMLHttpRequest();\\n        } catch (e) {}\\n    };\\n\\n    var xhrId = 0,\\n        xhrCallbacks = {},\\n        xhrSuccessStatus = {\\n        // file protocol always yields status code 0, assume 200\\n        0: 200,\\n        // Support: IE9\\n        // #1450: sometimes IE returns 1223 when it should be 204\\n        1223: 204\\n    },\\n        xhrSupported = jQuery.ajaxSettings.xhr();\\n\\n    // Support: IE9\\n    // Open requests must be manually aborted on unload (#5280)\\n    if (window.ActiveXObject) {\\n        jQuery(window).on(\"unload\", function () {\\n            for (var key in xhrCallbacks) {\\n                xhrCallbacks[key]();\\n            }\\n        });\\n    }\\n\\n    support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\\n    support.ajax = xhrSupported = !!xhrSupported;\\n\\n    jQuery.ajaxTransport(function (options) {\\n        var _callback;\\n\\n        // Cross domain only allowed if supported through XMLHttpRequest\\n        if (support.cors || xhrSupported && !options.crossDomain) {\\n            return {\\n                send: function send(headers, complete) {\\n                    var i,\\n                        xhr = options.xhr(),\\n                        id = ++xhrId;\\n\\n                    xhr.open(options.type, options.url, options.async, options.username, options.password);\\n\\n                    // Apply custom fields if provided\\n                    if (options.xhrFields) {\\n                        for (i in options.xhrFields) {\\n                            xhr[i] = options.xhrFields[i];\\n                        }\\n                    }\\n\\n                    // Override mime type if needed\\n                    if (options.mimeType && xhr.overrideMimeType) {\\n                        xhr.overrideMimeType(options.mimeType);\\n                    }\\n\\n                    // X-Requested-With header\\n                    // For cross-domain requests, seeing as conditions for a preflight are\\n                    // akin to a jigsaw puzzle, we simply never set it to be sure.\\n                    // (it can always be set on a per-request basis or even using ajaxSetup)\\n                    // For same-domain requests, won\\'t change header if already provided.\\n                    if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\\n                        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\\n                    }\\n\\n                    // Set headers\\n                    for (i in headers) {\\n                        xhr.setRequestHeader(i, headers[i]);\\n                    }\\n\\n                    // Callback\\n                    _callback = function callback(type) {\\n                        return function () {\\n                            if (_callback) {\\n                                delete xhrCallbacks[id];\\n                                _callback = xhr.onload = xhr.onerror = null;\\n\\n                                if (type === \"abort\") {\\n                                    xhr.abort();\\n                                } else if (type === \"error\") {\\n                                    complete(\\n                                    // file: protocol always yields status 0; see #8605, #14207\\n                                    xhr.status, xhr.statusText);\\n                                } else {\\n                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\\n                                    // Support: IE9\\n                                    // Accessing binary-data responseText throws an exception\\n                                    // (#11426)\\n                                    typeof xhr.responseText === \"string\" ? {\\n                                        text: xhr.responseText\\n                                    } : undefined, xhr.getAllResponseHeaders());\\n                                }\\n                            }\\n                        };\\n                    };\\n\\n                    // Listen to events\\n                    xhr.onload = _callback();\\n                    xhr.onerror = _callback(\"error\");\\n\\n                    // Create the abort callback\\n                    _callback = xhrCallbacks[id] = _callback(\"abort\");\\n\\n                    try {\\n                        // Do send the request (this may raise an exception)\\n                        xhr.send(options.hasContent && options.data || null);\\n                    } catch (e) {\\n                        // #14683: Only rethrow if this hasn\\'t been notified as an error yet\\n                        if (_callback) {\\n                            throw e;\\n                        }\\n                    }\\n                },\\n\\n                abort: function abort() {\\n                    if (_callback) {\\n                        _callback();\\n                    }\\n                }\\n            };\\n        }\\n    });\\n\\n    // Install script dataType\\n    jQuery.ajaxSetup({\\n        accepts: {\\n            script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\\n        },\\n        contents: {\\n            script: /(?:java|ecma)script/\\n        },\\n        converters: {\\n            \"text script\": function textScript(text) {\\n                jQuery.globalEval(text);\\n                return text;\\n            }\\n        }\\n    });\\n\\n    // Handle cache\\'s special case and crossDomain\\n    jQuery.ajaxPrefilter(\"script\", function (s) {\\n        if (s.cache === undefined) {\\n            s.cache = false;\\n        }\\n        if (s.crossDomain) {\\n            s.type = \"GET\";\\n        }\\n    });\\n\\n    // Bind script tag hack transport\\n    jQuery.ajaxTransport(\"script\", function (s) {\\n        // This transport only deals with cross domain requests\\n        if (s.crossDomain) {\\n            var script, _callback2;\\n            return {\\n                send: function send(_, complete) {\\n                    script = jQuery(\"<script>\").prop({\\n                        async: true,\\n                        charset: s.scriptCharset,\\n                        src: s.url\\n                    }).on(\"load error\", _callback2 = function callback(evt) {\\n                        script.remove();\\n                        _callback2 = null;\\n                        if (evt) {\\n                            complete(evt.type === \"error\" ? 404 : 200, evt.type);\\n                        }\\n                    });\\n                    document.head.appendChild(script[0]);\\n                },\\n                abort: function abort() {\\n                    if (_callback2) {\\n                        _callback2();\\n                    }\\n                }\\n            };\\n        }\\n    });\\n\\n    var oldCallbacks = [],\\n        rjsonp = /(=)\\\\?(?=&|$)|\\\\?\\\\?/;\\n\\n    // Default jsonp settings\\n    jQuery.ajaxSetup({\\n        jsonp: \"callback\",\\n        jsonpCallback: function jsonpCallback() {\\n            var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\\n            this[callback] = true;\\n            return callback;\\n        }\\n    });\\n\\n    // Detect, normalize options and install callbacks for jsonp requests\\n    jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\\n\\n        var callbackName,\\n            overwritten,\\n            responseContainer,\\n            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\");\\n\\n        // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\\n        if (jsonProp || s.dataTypes[0] === \"jsonp\") {\\n\\n            // Get callback name, remembering preexisting value associated with it\\n            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\\n\\n            // Insert callback into url or form data\\n            if (jsonProp) {\\n                s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\\n            } else if (s.jsonp !== false) {\\n                s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\\n            }\\n\\n            // Use data converter to retrieve json after script execution\\n            s.converters[\"script json\"] = function () {\\n                if (!responseContainer) {\\n                    jQuery.error(callbackName + \" was not called\");\\n                }\\n                return responseContainer[0];\\n            };\\n\\n            // force json dataType\\n            s.dataTypes[0] = \"json\";\\n\\n            // Install callback\\n            overwritten = window[callbackName];\\n            window[callbackName] = function () {\\n                responseContainer = arguments;\\n            };\\n\\n            // Clean-up function (fires after converters)\\n            jqXHR.always(function () {\\n                // Restore preexisting value\\n                window[callbackName] = overwritten;\\n\\n                // Save back as free\\n                if (s[callbackName]) {\\n                    // make sure that re-using the options doesn\\'t screw things around\\n                    s.jsonpCallback = originalSettings.jsonpCallback;\\n\\n                    // save the callback name for future use\\n                    oldCallbacks.push(callbackName);\\n                }\\n\\n                // Call if it was a function and we have a response\\n                if (responseContainer && jQuery.isFunction(overwritten)) {\\n                    overwritten(responseContainer[0]);\\n                }\\n\\n                responseContainer = overwritten = undefined;\\n            });\\n\\n            // Delegate to script\\n            return \"script\";\\n        }\\n    });\\n\\n    // data: string of html\\n    // context (optional): If specified, the fragment will be created in this context, defaults to document\\n    // keepScripts (optional): If true, will include scripts passed in the html string\\n    jQuery.parseHTML = function (data, context, keepScripts) {\\n        if (!data || typeof data !== \"string\") {\\n            return null;\\n        }\\n        if (typeof context === \"boolean\") {\\n            keepScripts = context;\\n            context = false;\\n        }\\n        context = context || document;\\n\\n        var parsed = rsingleTag.exec(data),\\n            scripts = !keepScripts && [];\\n\\n        // Single tag\\n        if (parsed) {\\n            return [context.createElement(parsed[1])];\\n        }\\n\\n        parsed = jQuery.buildFragment([data], context, scripts);\\n\\n        if (scripts && scripts.length) {\\n            jQuery(scripts).remove();\\n        }\\n\\n        return jQuery.merge([], parsed.childNodes);\\n    };\\n\\n    // Keep a copy of the old load method\\n    var _load = jQuery.fn.load;\\n\\n    /**\\r\\n     * Load a url into a page\\r\\n     */\\n    jQuery.fn.load = function (url, params, callback) {\\n        if (typeof url !== \"string\" && _load) {\\n            return _load.apply(this, arguments);\\n        }\\n\\n        var selector,\\n            type,\\n            response,\\n            self = this,\\n            off = url.indexOf(\" \");\\n\\n        if (off >= 0) {\\n            selector = jQuery.trim(url.slice(off));\\n            url = url.slice(0, off);\\n        }\\n\\n        // If it\\'s a function\\n        if (jQuery.isFunction(params)) {\\n\\n            // We assume that it\\'s the callback\\n            callback = params;\\n            params = undefined;\\n\\n            // Otherwise, build a param string\\n        } else if (params && (typeof params === \"undefined\" ? \"undefined\" : _typeof(params)) === \"object\") {\\n            type = \"POST\";\\n        }\\n\\n        // If we have elements to modify, make the request\\n        if (self.length > 0) {\\n            jQuery.ajax({\\n                url: url,\\n\\n                // if \"type\" variable is undefined, then \"GET\" method will be used\\n                type: type,\\n                dataType: \"html\",\\n                data: params\\n            }).done(function (responseText) {\\n\\n                // Save response for use in complete callback\\n                response = arguments;\\n\\n                self.html(selector ?\\n\\n                // If a selector was specified, locate the right elements in a dummy div\\n                // Exclude scripts to avoid IE \\'Permission Denied\\' errors\\n                jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\\n\\n                // Otherwise use the full result\\n                responseText);\\n            }).complete(callback && function (jqXHR, status) {\\n                self.each(callback, response || [jqXHR.responseText, status, jqXHR]);\\n            });\\n        }\\n\\n        return this;\\n    };\\n\\n    jQuery.expr.filters.animated = function (elem) {\\n        return jQuery.grep(jQuery.timers, function (fn) {\\n            return elem === fn.elem;\\n        }).length;\\n    };\\n\\n    var docElem = window.document.documentElement;\\n\\n    /**\\r\\n     * Gets a window from an element\\r\\n     */\\n    function getWindow(elem) {\\n        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;\\n    }\\n\\n    jQuery.offset = {\\n        setOffset: function setOffset(elem, options, i) {\\n            var curPosition,\\n                curLeft,\\n                curCSSTop,\\n                curTop,\\n                curOffset,\\n                curCSSLeft,\\n                calculatePosition,\\n                position = jQuery.css(elem, \"position\"),\\n                curElem = jQuery(elem),\\n                props = {};\\n\\n            // Set position first, in-case top/left are set even on static elem\\n            if (position === \"static\") {\\n                elem.style.position = \"relative\";\\n            }\\n\\n            curOffset = curElem.offset();\\n            curCSSTop = jQuery.css(elem, \"top\");\\n            curCSSLeft = jQuery.css(elem, \"left\");\\n            calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1;\\n\\n            // Need to be able to calculate position if either top or left is auto and position is either absolute or fixed\\n            if (calculatePosition) {\\n                curPosition = curElem.position();\\n                curTop = curPosition.top;\\n                curLeft = curPosition.left;\\n            } else {\\n                curTop = parseFloat(curCSSTop) || 0;\\n                curLeft = parseFloat(curCSSLeft) || 0;\\n            }\\n\\n            if (jQuery.isFunction(options)) {\\n                options = options.call(elem, i, curOffset);\\n            }\\n\\n            if (options.top != null) {\\n                props.top = options.top - curOffset.top + curTop;\\n            }\\n            if (options.left != null) {\\n                props.left = options.left - curOffset.left + curLeft;\\n            }\\n\\n            if (\"using\" in options) {\\n                options.using.call(elem, props);\\n            } else {\\n                curElem.css(props);\\n            }\\n        }\\n    };\\n\\n    jQuery.fn.extend({\\n        offset: function offset(options) {\\n            if (arguments.length) {\\n                return options === undefined ? this : this.each(function (i) {\\n                    jQuery.offset.setOffset(this, options, i);\\n                });\\n            }\\n\\n            var docElem,\\n                win,\\n                elem = this[0],\\n                box = { top: 0, left: 0 },\\n                doc = elem && elem.ownerDocument;\\n\\n            if (!doc) {\\n                return;\\n            }\\n\\n            docElem = doc.documentElement;\\n\\n            // Make sure it\\'s not a disconnected DOM node\\n            if (!jQuery.contains(docElem, elem)) {\\n                return box;\\n            }\\n\\n            // If we don\\'t have gBCR, just use 0,0 rather than error\\n            // BlackBerry 5, iOS 3 (original iPhone)\\n            if (_typeof(elem.getBoundingClientRect) !== strundefined) {\\n                box = elem.getBoundingClientRect();\\n            }\\n            win = getWindow(doc);\\n            return {\\n                top: box.top + win.pageYOffset - docElem.clientTop,\\n                left: box.left + win.pageXOffset - docElem.clientLeft\\n            };\\n        },\\n\\n        position: function position() {\\n            if (!this[0]) {\\n                return;\\n            }\\n\\n            var offsetParent,\\n                offset,\\n                elem = this[0],\\n                parentOffset = { top: 0, left: 0 };\\n\\n            // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\\n            if (jQuery.css(elem, \"position\") === \"fixed\") {\\n                // We assume that getBoundingClientRect is available when computed position is fixed\\n                offset = elem.getBoundingClientRect();\\n            } else {\\n                // Get *real* offsetParent\\n                offsetParent = this.offsetParent();\\n\\n                // Get correct offsets\\n                offset = this.offset();\\n                if (!jQuery.nodeName(offsetParent[0], \"html\")) {\\n                    parentOffset = offsetParent.offset();\\n                }\\n\\n                // Add offsetParent borders\\n                parentOffset.top += jQuery.css(offsetParent[0], \"borderTopWidth\", true);\\n                parentOffset.left += jQuery.css(offsetParent[0], \"borderLeftWidth\", true);\\n            }\\n\\n            // Subtract parent offsets and element margins\\n            return {\\n                top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\\n                left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\\n            };\\n        },\\n\\n        offsetParent: function offsetParent() {\\n            return this.map(function () {\\n                var offsetParent = this.offsetParent || docElem;\\n\\n                while (offsetParent && !jQuery.nodeName(offsetParent, \"html\") && jQuery.css(offsetParent, \"position\") === \"static\") {\\n                    offsetParent = offsetParent.offsetParent;\\n                }\\n\\n                return offsetParent || docElem;\\n            });\\n        }\\n    });\\n\\n    // Create scrollLeft and scrollTop methods\\n    jQuery.each({ scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function (method, prop) {\\n        var top = \"pageYOffset\" === prop;\\n\\n        jQuery.fn[method] = function (val) {\\n            return access(this, function (elem, method, val) {\\n                var win = getWindow(elem);\\n\\n                if (val === undefined) {\\n                    return win ? win[prop] : elem[method];\\n                }\\n\\n                if (win) {\\n                    win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);\\n                } else {\\n                    elem[method] = val;\\n                }\\n            }, method, val, arguments.length, null);\\n        };\\n    });\\n\\n    // Add the top/left cssHooks using jQuery.fn.position\\n    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\\n    // getComputedStyle returns percent when specified for top/left/bottom/right\\n    // rather than make the css module depend on the offset module, we just check for it here\\n    jQuery.each([\"top\", \"left\"], function (i, prop) {\\n        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\\n            if (computed) {\\n                computed = curCSS(elem, prop);\\n                // if curCSS returns percentage, fallback to offset\\n                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\\n            }\\n        });\\n    });\\n\\n    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\\n    jQuery.each({ Height: \"height\", Width: \"width\" }, function (name, type) {\\n        jQuery.each({ padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function (defaultExtra, funcName) {\\n            // margin is only for outerHeight, outerWidth\\n            jQuery.fn[funcName] = function (margin, value) {\\n                var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\\n                    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\\n\\n                return access(this, function (elem, type, value) {\\n                    var doc;\\n\\n                    if (jQuery.isWindow(elem)) {\\n                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\\n                        // isn\\'t a whole lot we can do. See pull request at this URL for discussion:\\n                        // https://github.com/jquery/jquery/pull/764\\n                        return elem.document.documentElement[\"client\" + name];\\n                    }\\n\\n                    // Get document width or height\\n                    if (elem.nodeType === 9) {\\n                        doc = elem.documentElement;\\n\\n                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\\n                        // whichever is greatest\\n                        return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\\n                    }\\n\\n                    return value === undefined ?\\n                    // Get width or height on the element, requesting but not forcing parseFloat\\n                    jQuery.css(elem, type, extra) :\\n\\n                    // Set width or height on the element\\n                    jQuery.style(elem, type, value, extra);\\n                }, type, chainable ? margin : undefined, chainable, null);\\n            };\\n        });\\n    });\\n\\n    // The number of elements contained in the matched element set\\n    jQuery.fn.size = function () {\\n        return this.length;\\n    };\\n\\n    jQuery.fn.andSelf = jQuery.fn.addBack;\\n\\n    // Register as a named AMD module, since jQuery can be concatenated with other\\n    // files that may use define, but not via a proper concatenation script that\\n    // understands anonymous AMD modules. A named AMD is safest and most robust\\n    // way to register. Lowercase jquery is used because AMD module names are\\n    // derived from file names, and jQuery is normally delivered in a lowercase\\n    // file name. Do this after creating the global so that if an AMD module wants\\n    // to call noConflict to hide this version of jQuery, it will work.\\n\\n    // Note that for maximum portability, libraries that are not jQuery should\\n    // declare themselves as anonymous modules, and avoid setting a global if an\\n    // AMD loader is present. jQuery is a special case. For more information, see\\n    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\\n\\n    if (true) {\\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n            return jQuery;\\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n    }\\n\\n    var\\n    // Map over jQuery in case of overwrite\\n    _jQuery = window.jQuery,\\n\\n\\n    // Map over the $ in case of overwrite\\n    _$ = window.$;\\n\\n    jQuery.noConflict = function (deep) {\\n        if (window.$ === jQuery) {\\n            window.$ = _$;\\n        }\\n\\n        if (deep && window.jQuery === jQuery) {\\n            window.jQuery = _jQuery;\\n        }\\n\\n        return jQuery;\\n    };\\n\\n    // Expose jQuery and $ identifiers, even in\\n    // AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\\n    // and CommonJS for browser emulators (#13566)\\n    if ((typeof noGlobal === \"undefined\" ? \"undefined\" : _typeof(noGlobal)) === strundefined) {\\n        window.jQuery = window.$ = jQuery;\\n    }\\n\\n    return jQuery;\\n});\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)(module)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///2\\n')},function(module,exports,__webpack_require__){\"use strict\";eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {\\n    // require([\\'./move\\']);\\n\\n    function showplan() {\\n        var data = localStorage.getItem(\"myplan\");\\n        data = JSON.parse(data);\\n        $(\\'<li id=\\' + data[data.length - 1].id + \\' ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\"><span><span></span><input type=\"checkbox\" style=\"zoom:200%\"/><span>\\' + data[data.length - 1].content + \\'</span></span><span class=\"del\">X</span></li>\\').appendTo($(\".todolist .list1>ul\"));\\n    }\\n    var sHtml = \\'\\';\\n\\n    function showplans() {\\n        var data = localStorage.getItem(\"myplan\");\\n        data = JSON.parse(data);\\n        for (var i = data.length - 1000; i < data.length; i++) {\\n            if (data[i].done == false) {\\n                sHtml += \\'<li id=\\' + data[i].id + \\' ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\"><span><span></span><input type=\"checkbox\" style=\"zoom:200%\"/><span>\\' + data[i].content + \\'</span></span><span class=\"del\">X</span></li>\\'; // 构造需要添加元素的字符串  \\n            }\\n        };\\n        $(\\'.todolist .list1>ul\\').append(sHtml);\\n    }\\n\\n    function showallplan() {\\n\\n        var data = localStorage.getItem(\"myplan\");\\n\\n        data = JSON.parse(data);\\n\\n        var txt = \"\";\\n        var txt2 = \"\";\\n        for (var i = 0; i < data.length; i++) {\\n            if (data[i].done == false) {\\n                txt += \\'<li id=\\' + data[i].id + \\'  ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\"><span><span></span><input type=\"checkbox\" style=\"zoom:200%\"/><span>\\';\\n                txt += data[i].content;\\n                txt += \\'</span></span><span class=\"del\">X</span></li>\\';\\n            } else {\\n                txt2 += \\'<li id=\\' + data[i].id + \\'><span><span></span><input type=\"checkbox\" checked=\"checked\" style=\"zoom:200%\"/><span>\\';\\n                txt2 += data[i].content;\\n                txt2 += \\'</span></span><span class=\"del\">X</span></li>\\';\\n            }\\n        }\\n        $(\".list2 ul\").html(txt2);\\n        $(\".list1 ul\").html(txt);\\n    }\\n    return {\\n        \\'showplan\\': showplan,\\n        \\'showallplan\\': showallplan,\\n        \\'showplans\\': showplans\\n    };\\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvc2hvdy5qcz84OGFiIl0sIm5hbWVzIjpbIiQiLCJzaG93cGxhbiIsImRhdGEiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwibGVuZ3RoIiwiaWQiLCJjb250ZW50IiwiYXBwZW5kVG8iLCJzSHRtbCIsInNob3dwbGFucyIsImkiLCJkb25lIiwiYXBwZW5kIiwic2hvd2FsbHBsYW4iLCJ0eHQiLCJ0eHQyIiwiaHRtbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsbUNBQXFCLFVBQVNBLENBQVQsRUFBWTtBQUM3Qjs7QUFFQSxhQUFTQyxRQUFULEdBQW9CO0FBQ2hCLFlBQUlDLE9BQU9DLGFBQWFDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWDtBQUNBRixlQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUDtBQUNBRixVQUFFLFlBQVlFLEtBQUtBLEtBQUtLLE1BQUwsR0FBYyxDQUFuQixFQUFzQkMsRUFBbEMsR0FBdUMsK0tBQXZDLEdBQXlOTixLQUFLQSxLQUFLSyxNQUFMLEdBQWMsQ0FBbkIsRUFBc0JFLE9BQS9PLEdBQXlQLCtDQUEzUCxFQUE0U0MsUUFBNVMsQ0FBcVRWLEVBQUUscUJBQUYsQ0FBclQ7QUFDSDtBQUNELFFBQUlXLFFBQVEsRUFBWjs7QUFFQSxhQUFTQyxTQUFULEdBQXFCO0FBQ2pCLFlBQUlWLE9BQU9DLGFBQWFDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWDtBQUNBRixlQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUDtBQUNBLGFBQUssSUFBSVcsSUFBSVgsS0FBS0ssTUFBTCxHQUFjLElBQTNCLEVBQWlDTSxJQUFJWCxLQUFLSyxNQUExQyxFQUFrRE0sR0FBbEQsRUFBdUQ7QUFDbkQsZ0JBQUlYLEtBQUtXLENBQUwsRUFBUUMsSUFBUixJQUFnQixLQUFwQixFQUEyQjtBQUN2QkgseUJBQVMsWUFBWVQsS0FBS1csQ0FBTCxFQUFRTCxFQUFwQixHQUF5QiwrS0FBekIsR0FBMk1OLEtBQUtXLENBQUwsRUFBUUosT0FBbk4sR0FBNk4sK0NBQXRPLENBRHVCLENBQ2dRO0FBQzFSO0FBQ0o7QUFDRFQsVUFBRSxxQkFBRixFQUF5QmUsTUFBekIsQ0FBZ0NKLEtBQWhDO0FBRUg7O0FBR0QsYUFBU0ssV0FBVCxHQUF1Qjs7QUFFbkIsWUFBSWQsT0FBT0MsYUFBYUMsT0FBYixDQUFxQixRQUFyQixDQUFYOztBQUVBRixlQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUDs7QUFFQSxZQUFJZSxNQUFNLEVBQVY7QUFDQSxZQUFJQyxPQUFPLEVBQVg7QUFDQSxhQUFLLElBQUlMLElBQUksQ0FBYixFQUFnQkEsSUFBSVgsS0FBS0ssTUFBekIsRUFBaUNNLEdBQWpDLEVBQXNDO0FBQ2xDLGdCQUFJWCxLQUFLVyxDQUFMLEVBQVFDLElBQVIsSUFBZ0IsS0FBcEIsRUFBMkI7QUFDdkJHLHVCQUFPLFlBQVlmLEtBQUtXLENBQUwsRUFBUUwsRUFBcEIsR0FBeUIsZ0xBQWhDO0FBQ0FTLHVCQUFPZixLQUFLVyxDQUFMLEVBQVFKLE9BQWY7QUFDQVEsdUJBQU8sK0NBQVA7QUFDSCxhQUpELE1BSU87QUFDSEMsd0JBQVEsWUFBWWhCLEtBQUtXLENBQUwsRUFBUUwsRUFBcEIsR0FBeUIsd0ZBQWpDO0FBQ0FVLHdCQUFRaEIsS0FBS1csQ0FBTCxFQUFRSixPQUFoQjtBQUNBUyx3QkFBUSwrQ0FBUjtBQUVIO0FBQ0o7QUFDRGxCLFVBQUUsV0FBRixFQUFlbUIsSUFBZixDQUFvQkQsSUFBcEI7QUFDQWxCLFVBQUUsV0FBRixFQUFlbUIsSUFBZixDQUFvQkYsR0FBcEI7QUFFSDtBQUNELFdBQU87QUFDSCxvQkFBWWhCLFFBRFQ7QUFFSCx1QkFBZWUsV0FGWjtBQUdILHFCQUFhSjtBQUhWLEtBQVA7QUFNSCxDQXJERDtBQUFBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuL2pxdWVyeSddLCBmdW5jdGlvbigkKSB7XHJcbiAgICAvLyByZXF1aXJlKFsnLi9tb3ZlJ10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNob3dwbGFuKCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJteXBsYW5cIik7XHJcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgJCgnPGxpIGlkPScgKyBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uaWQgKyAnIG9uZHJvcD1cImRyb3AoZXZlbnQsdGhpcylcIiBvbmRyYWdvdmVyPVwiYWxsb3dEcm9wKGV2ZW50KVwiIGRyYWdnYWJsZT1cInRydWVcIiBvbmRyYWdzdGFydD1cImRyYWcoZXZlbnQsIHRoaXMpXCI+PHNwYW4+PHNwYW4+PC9zcGFuPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBzdHlsZT1cInpvb206MjAwJVwiLz48c3Bhbj4nICsgZGF0YVtkYXRhLmxlbmd0aCAtIDFdLmNvbnRlbnQgKyAnPC9zcGFuPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRlbFwiPlg8L3NwYW4+PC9saT4nKS5hcHBlbmRUbygkKFwiLnRvZG9saXN0IC5saXN0MT51bFwiKSlcclxuICAgIH1cclxuICAgIHZhciBzSHRtbCA9ICcnO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNob3dwbGFucygpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibXlwbGFuXCIpO1xyXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBkYXRhLmxlbmd0aCAtIDEwMDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhW2ldLmRvbmUgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHNIdG1sICs9ICc8bGkgaWQ9JyArIGRhdGFbaV0uaWQgKyAnIG9uZHJvcD1cImRyb3AoZXZlbnQsdGhpcylcIiBvbmRyYWdvdmVyPVwiYWxsb3dEcm9wKGV2ZW50KVwiIGRyYWdnYWJsZT1cInRydWVcIiBvbmRyYWdzdGFydD1cImRyYWcoZXZlbnQsIHRoaXMpXCI+PHNwYW4+PHNwYW4+PC9zcGFuPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBzdHlsZT1cInpvb206MjAwJVwiLz48c3Bhbj4nICsgZGF0YVtpXS5jb250ZW50ICsgJzwvc3Bhbj48L3NwYW4+PHNwYW4gY2xhc3M9XCJkZWxcIj5YPC9zcGFuPjwvbGk+JzsgLy8g5p6E6YCg6ZyA6KaB5re75Yqg5YWD57Sg55qE5a2X56ym5LiyICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJCgnLnRvZG9saXN0IC5saXN0MT51bCcpLmFwcGVuZChzSHRtbCk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBzaG93YWxscGxhbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIm15cGxhblwiKTtcclxuXHJcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblxyXG4gICAgICAgIHZhciB0eHQgPSBcIlwiO1xyXG4gICAgICAgIHZhciB0eHQyID0gXCJcIjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbaV0uZG9uZSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdHh0ICs9ICc8bGkgaWQ9JyArIGRhdGFbaV0uaWQgKyAnICBvbmRyb3A9XCJkcm9wKGV2ZW50LHRoaXMpXCIgb25kcmFnb3Zlcj1cImFsbG93RHJvcChldmVudClcIiBkcmFnZ2FibGU9XCJ0cnVlXCIgb25kcmFnc3RhcnQ9XCJkcmFnKGV2ZW50LCB0aGlzKVwiPjxzcGFuPjxzcGFuPjwvc3Bhbj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgc3R5bGU9XCJ6b29tOjIwMCVcIi8+PHNwYW4+JztcclxuICAgICAgICAgICAgICAgIHR4dCArPSBkYXRhW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB0eHQgKz0gJzwvc3Bhbj48L3NwYW4+PHNwYW4gY2xhc3M9XCJkZWxcIj5YPC9zcGFuPjwvbGk+JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHR4dDIgKz0gJzxsaSBpZD0nICsgZGF0YVtpXS5pZCArICc+PHNwYW4+PHNwYW4+PC9zcGFuPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPVwiY2hlY2tlZFwiIHN0eWxlPVwiem9vbToyMDAlXCIvPjxzcGFuPic7XHJcbiAgICAgICAgICAgICAgICB0eHQyICs9IGRhdGFbaV0uY29udGVudDtcclxuICAgICAgICAgICAgICAgIHR4dDIgKz0gJzwvc3Bhbj48L3NwYW4+PHNwYW4gY2xhc3M9XCJkZWxcIj5YPC9zcGFuPjwvbGk+JztcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgJChcIi5saXN0MiB1bFwiKS5odG1sKHR4dDIpO1xyXG4gICAgICAgICQoXCIubGlzdDEgdWxcIikuaHRtbCh0eHQpO1xyXG5cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ3Nob3dwbGFuJzogc2hvd3BsYW4sXHJcbiAgICAgICAgJ3Nob3dhbGxwbGFuJzogc2hvd2FsbHBsYW4sXHJcbiAgICAgICAgJ3Nob3dwbGFucyc6IHNob3dwbGFuc1xyXG4gICAgfVxyXG5cclxufSkiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n')},function(module,exports,__webpack_require__){\"use strict\";eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {\\n    function count() {\\n        var data = localStorage.getItem(\"myplan\");\\n        data = JSON.parse(data);\\n        var len1 = 0;\\n        var len2 = 0;\\n        for (var i = 0; i < data.length; i++) {\\n\\n            if (data[i].done == false) {\\n                len1 += 1;\\n            } else {\\n                len2 += 1;\\n            }\\n        }\\n        $(\".ongoing .listtop span:nth-child(2)\").text(len1);\\n        $(\".done .listtop span:nth-child(2)\").text(len2);\\n    }\\n    return {\\n        \\'count\\': count\\n    };\\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvamF2YXNjcmlwdHMvY291bnQuanM/MDMzMSJdLCJuYW1lcyI6WyIkIiwiY291bnQiLCJkYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImxlbjEiLCJsZW4yIiwiaSIsImxlbmd0aCIsImRvbmUiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsQ0FBUCxtQ0FBcUIsVUFBU0EsQ0FBVCxFQUFZO0FBQzdCLGFBQVNDLEtBQVQsR0FBaUI7QUFDYixZQUFJQyxPQUFPQyxhQUFhQyxPQUFiLENBQXFCLFFBQXJCLENBQVg7QUFDQUYsZUFBT0csS0FBS0MsS0FBTCxDQUFXSixJQUFYLENBQVA7QUFDQSxZQUFJSyxPQUFPLENBQVg7QUFDQSxZQUFJQyxPQUFPLENBQVg7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSVAsS0FBS1EsTUFBekIsRUFBaUNELEdBQWpDLEVBQXNDOztBQUVsQyxnQkFBSVAsS0FBS08sQ0FBTCxFQUFRRSxJQUFSLElBQWdCLEtBQXBCLEVBQTJCO0FBQ3ZCSix3QkFBUSxDQUFSO0FBQ0gsYUFGRCxNQUVPO0FBQ0hDLHdCQUFRLENBQVI7QUFDSDtBQUNKO0FBQ0RSLFVBQUUscUNBQUYsRUFBeUNZLElBQXpDLENBQThDTCxJQUE5QztBQUNBUCxVQUFFLGtDQUFGLEVBQXNDWSxJQUF0QyxDQUEyQ0osSUFBM0M7QUFDSDtBQUNELFdBQU87QUFDSCxpQkFBU1A7QUFETixLQUFQO0FBR0gsQ0FwQkQ7QUFBQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi9qcXVlcnknXSwgZnVuY3Rpb24oJCkge1xyXG4gICAgZnVuY3Rpb24gY291bnQoKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIm15cGxhblwiKTtcclxuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICB2YXIgbGVuMSA9IDA7XHJcbiAgICAgICAgdmFyIGxlbjIgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGFbaV0uZG9uZSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgbGVuMSArPSAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGVuMiArPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoXCIub25nb2luZyAubGlzdHRvcCBzcGFuOm50aC1jaGlsZCgyKVwiKS50ZXh0KGxlbjEpO1xyXG4gICAgICAgICQoXCIuZG9uZSAubGlzdHRvcCBzcGFuOm50aC1jaGlsZCgyKVwiKS50ZXh0KGxlbjIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnY291bnQnOiBjb3VudFxyXG4gICAgfVxyXG59KSJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///4\\n')},function(module,exports){eval('module.exports = function(module) {\\r\\n\\tif (!module.webpackPolyfill) {\\r\\n\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\tmodule.paths = [];\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tif (!module.children) module.children = [];\\r\\n\\t\\tObject.defineProperty(module, \"loaded\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.l;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tObject.defineProperty(module, \"id\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n};\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///5\\n')}]]);","extractedComments":[]}